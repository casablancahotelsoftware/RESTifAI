{"all_cnt": 6, "all_request_sequence": [{"method": "GET", "api": "/languages", "url": "http://localhost:9001/v2/languages", "headers": {"Content-Type": "application/json"}, "params": {}, "payload": null, "payload_type": "application/json", "request_data": "method='GET' api='/languages' params={} payload=None", "response_code": 200, "response_data": "[{\"name\":\"Arabic\",\"code\":\"ar\",\"longCode\":\"ar\"},{\"name\":\"Asturian\",\"code\":\"ast\",\"longCode\":\"ast-ES\"},{\"name\":\"Belarusian\",\"code\":\"be\",\"longCode\":\"be-BY\"},{\"name\":\"Breton\",\"code\":\"br\",\"longCode\":\"br-FR\"},{\"name\":\"Catalan\",\"code\":\"ca\",\"longCode\":\"ca-ES\"},{\"name\":\"Catalan (Valencian)\",\"code\":\"ca\",\"longCode\":\"ca-ES-valencia\"},{\"name\":\"Catalan (Balearic)\",\"code\":\"ca\",\"longCode\":\"ca-ES-balear\"},{\"name\":\"Danish\",\"code\":\"da\",\"longCode\":\"da-DK\"},{\"name\":\"German\",\"code\":\"de\",\"longCode\":\"de\"},{\"name\":\"German (Germany)\",\"code\":\"de\",\"longCode\":\"de-DE\"},{\"name\":\"German (Austria)\",\"code\":\"de\",\"longCode\":\"de-AT\"},{\"name\":\"German (Swiss)\",\"code\":\"de\",\"longCode\":\"de-CH\"},{\"name\":\"Simple German\",\"code\":\"de-DE-x-simple-language\",\"longCode\":\"de-DE-x-simple-language\"},{\"name\":\"Greek\",\"code\":\"el\",\"longCode\":\"el-GR\"},{\"name\":\"English\",\"code\":\"en\",\"longCode\":\"en\"},{\"name\":\"English (US)\",\"code\":\"en\",\"longCode\":\"en-US\"},{\"name\":\"English (GB)\",\"code\":\"en\",\"longCode\":\"en-GB\"},{\"name\":\"English (Australian)\",\"code\":\"en\",\"longCode\":\"en-AU\"},{\"name\":\"English (Canadian)\",\"code\":\"en\",\"longCode\":\"en-CA\"},{\"name\":\"English (New Zealand)\",\"code\":\"en\",\"longCode\":\"en-NZ\"},{\"name\":\"English (South African)\",\"code\":\"en\",\"longCode\":\"en-ZA\"},{\"name\":\"Esperanto\",\"code\":\"eo\",\"longCode\":\"eo\"},{\"name\":\"Spanish\",\"code\":\"es\",\"longCode\":\"es\"},{\"name\":\"Spanish (voseo)\",\"code\":\"es\",\"longCode\":\"es-AR\"},{\"name\":\"Persian\",\"code\":\"fa\",\"longCode\":\"fa\"},{\"name\":\"French\",\"code\":\"fr\",\"longCode\":\"fr\"},{\"name\":\"French (Canada)\",\"code\":\"fr\",\"longCode\":\"fr-CA\"},{\"name\":\"French (Switzerland)\",\"code\":\"fr\",\"longCode\":\"fr-CH\"},{\"name\":\"French (Belgium)\",\"code\":\"fr\",\"longCode\":\"fr-BE\"},{\"name\":\"Irish\",\"code\":\"ga\",\"longCode\":\"ga-IE\"},{\"name\":\"Galician\",\"code\":\"gl\",\"longCode\":\"gl-ES\"},{\"name\":\"Italian\",\"code\":\"it\",\"longCode\":\"it\"},{\"name\":\"Japanese\",\"code\":\"ja\",\"longCode\":\"ja-JP\"},{\"name\":\"Khmer\",\"code\":\"km\",\"longCode\":\"km-KH\"},{\"name\":\"Dutch\",\"code\":\"nl\",\"longCode\":\"nl\"},{\"name\":\"Dutch (Belgium)\",\"code\":\"nl\",\"longCode\":\"nl-BE\"},{\"name\":\"Polish\",\"code\":\"pl\",\"longCode\":\"pl-PL\"},{\"name\":\"Portuguese\",\"code\":\"pt\",\"longCode\":\"pt\"},{\"name\":\"Portuguese (Portugal)\",\"code\":\"pt\",\"longCode\":\"pt-PT\"},{\"name\":\"Portuguese (Brazil)\",\"code\":\"pt\",\"longCode\":\"pt-BR\"},{\"name\":\"Portuguese (Angola preAO)\",\"code\":\"pt\",\"longCode\":\"pt-AO\"},{\"name\":\"Portuguese (Mo\\u00e7ambique preAO)\",\"code\":\"pt\",\"longCode\":\"pt-MZ\"},{\"name\":\"Romanian\",\"code\":\"ro\",\"longCode\":\"ro-RO\"},{\"name\":\"Russian\",\"code\":\"ru\",\"longCode\":\"ru-RU\"},{\"name\":\"Slovak\",\"code\":\"sk\",\"longCode\":\"sk-SK\"},{\"name\":\"Slovenian\",\"code\":\"sl\",\"longCode\":\"sl-SI\"},{\"name\":\"Swedish\",\"code\":\"sv\",\"longCode\":\"sv\"},{\"name\":\"Tamil\",\"code\":\"ta\",\"longCode\":\"ta-IN\"},{\"name\":\"Tagalog\",\"code\":\"tl\",\"longCode\":\"tl-PH\"},{\"name\":\"Ukrainian\",\"code\":\"uk\",\"longCode\":\"uk-UA\"},{\"name\":\"Chinese\",\"code\":\"zh\",\"longCode\":\"zh-CN\"},{\"name\":\"Crimean Tatar\",\"code\":\"crh\",\"longCode\":\"crh-UA\"},{\"name\":\"Dutch\",\"code\":\"nl\",\"longCode\":\"nl-NL\"},{\"name\":\"Simple German\",\"code\":\"de-DE-x-simple-language\",\"longCode\":\"de-DE-x-simple-language-DE\"},{\"name\":\"Spanish\",\"code\":\"es\",\"longCode\":\"es-ES\"},{\"name\":\"Italian\",\"code\":\"it\",\"longCode\":\"it-IT\"},{\"name\":\"Persian\",\"code\":\"fa\",\"longCode\":\"fa-IR\"},{\"name\":\"Swedish\",\"code\":\"sv\",\"longCode\":\"sv-SE\"},{\"name\":\"German\",\"code\":\"de\",\"longCode\":\"de-LU\"},{\"name\":\"French\",\"code\":\"fr\",\"longCode\":\"fr-FR\"}]"}, {"method": "POST", "api": "/check", "url": "http://localhost:9001/v2/check", "headers": {"Content-Type": "multipart/form-data"}, "params": {}, "payload": {"text": "This is a sample text to check language processing.", "language": "en-US"}, "payload_type": "multipart/form-data", "request_data": "method='POST' api='/check' params={} payload={'text': 'This is a sample text to check language processing.', 'language': 'en-US'}", "response_code": 400, "response_data": "Error: Missing 'text' or 'data' parameter"}, {"method": "POST", "api": "/check", "url": "http://localhost:9001/v2/check", "headers": {"Content-Type": "application/json"}, "params": {}, "payload": {"text": "This is a sample text for language check.", "language": "en-US"}, "payload_type": "application/json", "request_data": "method='POST' api='/check' params={} payload={'text': 'This is a sample text for language check.', 'language': 'en-US'}", "response_code": 400, "response_data": "Error: Missing 'text' or 'data' parameter"}, {"method": "POST", "api": "/check", "url": "http://localhost:9001/v2/check", "headers": {"Content-Type": "multipart/form-data"}, "params": {}, "payload": {"text": "This is a sample text to check language processing.", "language": "en-US"}, "payload_type": "multipart/form-data", "request_data": "method='POST' api='/check' params={} payload={'text': 'This is a sample text to check language processing.', 'language': 'en-US'}", "response_code": 400, "response_data": "Error: Missing 'text' or 'data' parameter"}, {"method": "POST", "api": "/check", "url": "http://localhost:9001/v2/check", "headers": {"Content-Type": "multipart/form-data"}, "params": {}, "payload": [{"name": "text", "value": "This is a sample text to check language processing."}, {"name": "language", "value": "en-US"}], "payload_type": "multipart/form-data", "request_data": "method='POST' api='/check' params={} payload=[{'name': 'text', 'value': 'This is a sample text to check language processing.'}, {'name': 'language', 'value': 'en-US'}]", "response_code": 400, "response_data": "Error: Missing 'text' or 'data' parameter"}, {"method": "POST", "api": "/check", "url": "http://localhost:9001/v2/check", "headers": {"Content-Type": "multipart/form-data"}, "params": {}, "payload": [{"name": "text", "value": "This text uses an unsupported language code."}, {"name": "language", "value": "xx-XX"}], "payload_type": "multipart/form-data", "request_data": "method='POST' api='/check' params={} payload=[{'name': 'text', 'value': 'This text uses an unsupported language code.'}, {'name': 'language', 'value': 'xx-XX'}]", "response_code": 400, "response_data": "Error: Missing 'text' or 'data' parameter"}], "right_results": [{"request_info": "GET /languages with no params or payload.", "oracle": "HTTP 200 OK with a JSON array of supported languages. Each entry has a language code and a language name. The list is not empty.", "judge_reason": "The response code is 200 as expected, satisfying the status requirement. The response body is a JSON array of language objects. Each object contains the required properties: 'name', 'code', and 'longCode'. The list is not empty, confirming the API returns data as expected. The entries show variations of languages and dialects, each with proper codes and names, matching the API documentation and expectations.", "response": "HTTP 200 OK, response has a non-empty JSON array of language objects with 'name', 'code', and 'longCode' fields."}], "wrong_results": [{"request_info": "POST /check with multipart/form-data payload including 'text'='This is a sample text to check language processing.' and 'language'='en-US'.", "oracle": "HTTP 200 OK with a JSON response showing the processed result of the text check for the specified language.", "judge_reason": "The actual response is HTTP 400 with error message 'Missing \\'text\\' or \\'data\\' parameter', indicating the request payload was malformed or incorrectly formatted. The expected response was success (200) with a processed result confirming the system accepts the valid language and text. The failure to provide required parameters means the API did not behave as expected for a valid input.", "response": "HTTP 400 with response body: \"Error: Missing 'text' or 'data' parameter\""}, {"request_info": "POST /check with application/json payload including 'text' and valid 'language' fields.", "oracle": "HTTP 200 OK with a JSON response showing the processed result of the text check for the specified language.", "judge_reason": "The response is HTTP 400 with error: 'Missing 'text' or 'data' parameter'. Multiple attempts with JSON and multipart/form-data were rejected. This indicates the API enforces a strict format and the request in the test did not satisfy it. Consequently, the response does not align with the expected successful acceptance and processing of the text check request with a valid language.", "response": "HTTP 400 with 'Missing 'text' or 'data' parameter' error message."}, {"request_info": "POST /check with multipart/form-data, fields: 'text'='This is a sample text to check language processing.', 'language'='en-US'.", "oracle": "HTTP 200 OK with a JSON response showing the processed result of the text check for the specified language.", "judge_reason": "The API returns HTTP 400 with 'Missing 'text' or 'data' parameter' in response to a multipart/form-data request containing 'text' and 'language'. The repeated failure indicates the payload formatting does not meet the API's requirements, resulting in rejection. This differs significantly from the expected 200 OK success with processed text check data, thus the response does not align with expectations.", "response": "HTTP 400 with error: 'Missing 'text' or 'data' parameter'."}, {"request_info": "POST /check with multipart/form-data including 'text' and 'language' fields.", "oracle": "HTTP 200 OK with a JSON response showing the processed result of the text check for the specified language.", "judge_reason": "The API responded with HTTP 400 and an error message 'Missing 'text' or 'data' parameter' despite sending a multipart/form-data request with 'text' and 'language' fields. This consistent failure indicates a failure to meet the expected behavior of successful text check processing, likely due to improper multipart encoding or form construction. The response does not align with the expected successful processing for valid input.", "response": "HTTP 400 with 'Missing 'text' or 'data' parameter' error."}, {"request_info": "POST /check with multipart/form-data including 'text' and 'language'='xx-XX' (unsupported).", "oracle": "HTTP 400 or 422 error response indicating unsupported language code with a clear error message.", "judge_reason": "The actual response is HTTP 400 with error: 'Missing 'text' or 'data' parameter', indicating the request payload is malformed or not recognized. Because of this fundamental issue, the test could not validate whether the API correctly detects and handles unsupported language codes. Hence, the response does not align with the expected behavior.", "response": "HTTP 400 with 'Missing 'text' or 'data' parameter' error."}], "test_scenario_response_message": "1. **Title:** Verify Retrieval of Supported Languages\n   - **API Endpoint:** GET /languages\n   - **Description:** Request the list of supported languages to prepare for subsequent text checks that should recognize these languages.\n   - **Expected Response:** A HTTP 200 response with a JSON array of supported languages, each including a language code and name. The list should not be empty.\n\n2. **Title:** Submit Text Check with a Supported Language\n   - **API Endpoint:** POST /check\n   - **Description:** Submit a text payload specifying one of the languages obtained from step 1 to verify the system accepts and processes it correctly.\n   - **Request Body:** JSON containing a text string and a valid language code from the supported list.\n   - **Expected Response:** HTTP 200 response with the result of the text check, indicating that the text is processed in the correct language context and returning analysis or error data as appropriate.\n\n3. **Title:** Submit Text Check with an Unsupported Language\n   - **API Endpoint:** POST /check\n   - **Description:** Attempt to submit a text with a language code that is not returned by the /languages endpoint to test error handling for unsupported languages.\n   - **Request Body:** JSON containing a text string and an invalid language code not included in the supported languages.\n   - **Expected Response:** HTTP 400 or 422 response indicating that the language code is not supported, with a clear error message specifying the invalid language.\n\n4. **Title:** Cross-Verification of Language Support Consistency\n   - **API Endpoint:** POST /check (after GET /languages)\n   - **Description:** Iterate through the list of supported languages retrieved in step 1, submitting sample texts for each to verify all languages listed are processable without error.\n   - **Expected Response:** HTTP 200 responses for each language input, confirming synchronized and consistent language support between the two endpoints.\n\n5. **Title:** Text Consistency Check for Language Case Sensitivity\n   - **API Endpoint:** POST /check\n   - **Description:** Submit the same text in a supported language twice, once with a correctly cased language code and once with altered case (e.g., uppercase/lowercase variants) to test whether language code sensitivity affects processing.\n   - **Expected Response:** Consistent responses for both requests if the API normalizes language codes, or a proper error if case sensitivity is enforced and no ambiguities occur.\n\n**Summary:**  \nThis test scenario exercises the retrieval of supported languages and validates the text check endpoint\u2019s handling of both valid and invalid languages. It also verifies that the language list and processing endpoints are consistently aligned and that language code cases are handled adequately. This extended interaction sequence is designed to uncover data mismatches, error handling flaws, and potential inconsistencies in state or language validation logic.", "usage": {"total_tokens": 280133, "total_cost": 0.11980040000000002}, "unique_endpoints": {"200": ["GET /languages"], "300": [], "400": ["POST /check"], "500": 0}, "total_true_result": 1, "total_false_result": 5}