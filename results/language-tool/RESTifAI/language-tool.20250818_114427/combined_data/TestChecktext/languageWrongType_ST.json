{
  "test_name": "languageWrongType_ST",
  "description": "Set the `language` property to a non-string type, e.g., 12345 (integer)",
  "test_suite": "TestChecktext",
  "base_url": "http://localhost:9001/v2",
  "operations": [
    "getSupportedLanguages",
    "checkText"
  ],
  "values_to_create_a_successful_request": "getSupportedLanguages.response.body[0].name: Arabic\ngetSupportedLanguages.response.body[0].code: ar\ngetSupportedLanguages.response.body[0].longCode: ar\ngetSupportedLanguages.response.body[1].name: Asturian\ngetSupportedLanguages.response.body[1].code: ast\ngetSupportedLanguages.response.body[1].longCode: ast-ES\ngetSupportedLanguages.response.body[2].name: Belarusian\ngetSupportedLanguages.response.body[2].code: be\ngetSupportedLanguages.response.body[2].longCode: be-BY\ngetSupportedLanguages.response.body[3].name: Breton\ngetSupportedLanguages.response.body[3].code: br\ngetSupportedLanguages.response.body[3].longCode: br-FR\ngetSupportedLanguages.response.body[4].name: Catalan\ngetSupportedLanguages.response.body[4].code: ca\ngetSupportedLanguages.response.body[4].longCode: ca-ES\ngetSupportedLanguages.response.body[5].name: Catalan (Valencian)\ngetSupportedLanguages.response.body[5].code: ca\ngetSupportedLanguages.response.body[5].longCode: ca-ES-valencia\ngetSupportedLanguages.response.body[6].name: Catalan (Balearic)\ngetSupportedLanguages.response.body[6].code: ca\ngetSupportedLanguages.response.body[6].longCode: ca-ES-balear\ngetSupportedLanguages.response.body[7].name: Danish\ngetSupportedLanguages.response.body[7].code: da\ngetSupportedLanguages.response.body[7].longCode: da-DK\ngetSupportedLanguages.response.body[8].name: German\ngetSupportedLanguages.response.body[8].code: de\ngetSupportedLanguages.response.body[8].longCode: de\ngetSupportedLanguages.response.body[9].name: German (Germany)\ngetSupportedLanguages.response.body[9].code: de\ngetSupportedLanguages.response.body[9].longCode: de-DE\ngetSupportedLanguages.response.headers.Date: Mon, 18 Aug 2025 11:44:32 GMT\ngetSupportedLanguages.response.headers.Content-type: application/json\ngetSupportedLanguages.response.headers.Content-length: 3307\ngetSupportedLanguages.response.status_code: 200\ncheckText.request.headers.Content-Type: multipart/form-data\ncheckText.request.body.language: en-US\ncheckText.request.body.text: This is a sample text to check for spelling and grammar errors.\ncheckText.response.body.software.name: LanguageTool\ncheckText.response.body.software.version: 6.7-SNAPSHOT\ncheckText.response.body.software.buildDate: 2025-07-21 18:51:01 +0200\ncheckText.response.body.software.apiVersion: 1\ncheckText.response.body.software.premium: False\ncheckText.response.body.software.premiumHint: You might be missing errors only the Premium version can find. Contact us at support<at>languagetoolplus.com.\ncheckText.response.body.software.status: \ncheckText.response.body.warnings.incompleteResults: False\ncheckText.response.body.language.name: English (US)\ncheckText.response.body.language.code: en-US\ncheckText.response.body.language.detectedLanguage.name: English (US)\ncheckText.response.body.language.detectedLanguage.code: en-US\ncheckText.response.body.language.detectedLanguage.confidence: 0.9999963\ncheckText.response.body.language.detectedLanguage.source: +fallback\ncheckText.response.body.sentenceRanges[0][0]: 0\ncheckText.response.body.sentenceRanges[0][1]: 63\ncheckText.response.body.extendedSentenceRanges[0].from: 0\ncheckText.response.body.extendedSentenceRanges[0].to: 63\ncheckText.response.body.extendedSentenceRanges[0].detectedLanguages[0].language: en\ncheckText.response.body.extendedSentenceRanges[0].detectedLanguages[0].rate: 1.0\ncheckText.response.headers.Date: Mon, 18 Aug 2025 11:44:44 GMT\ncheckText.response.headers.Content-type: application/json\ncheckText.response.headers.Content-length: 597\ncheckText.response.status_code: 200",
  "relevant_endpoints": [
    "#### checkText\n- Method: POST\n- Path: /check\n- Parameters:\nNone\n- Request Body Schema:\n{'multipart/form-data': {'schema': {'required': ['language'], 'type': 'object', 'properties': {'text': {'type': 'string', 'description': \"The text to be checked. This or 'data' is required.\"}, 'data': {'type': 'string', 'description': 'The text to be checked, given as a JSON document that specifies what\\'s text and what\\'s markup. This or \\'text\\' is required. Markup will be ignored when looking for errors. Example text: <pre>A &lt;b>test&lt;/b></pre>JSON for the example text: <pre>{\"annotation\":[\\n {\"text\": \"A \"},\\n {\"markup\": \"&lt;b>\"},\\n {\"text\": \"test\"},\\n {\"markup\": \"&lt;/b>\"}\\n]}</pre> <p>If you have markup that should be interpreted as whitespace, like <tt>&lt;p&gt;</tt> in HTML, you can have it interpreted like this: <pre>{\"markup\": \"&lt;p&gt;\", \"interpretAs\": \"\\\\n\\\\n\"}</pre><p>The \\'data\\' feature is not limited to HTML or XML, it can be used for any kind of markup. Entities will need to be expanded in this input.'}, 'language': {'type': 'string', 'description': 'A language code like `en-US`, `de-DE`, `fr`, or `auto` to guess the language automatically (see `preferredVariants` below). For languages with variants (English, German, Portuguese) spell checking will only be activated when you specify the variant, e.g. `en-GB` instead of just `en`.'}, 'username': {'type': 'string', 'description': 'Set to get Premium API access: Your username/email as used to log in at languagetool.org.'}, 'apiKey': {'type': 'string', 'description': \"Set to get Premium API access: <a target='_blank' href='https://languagetool.org/editor/settings/access-tokens'>your API key</a>\", 'format': 'password'}, 'dicts': {'type': 'string', 'description': 'Comma-separated list of dictionaries to include words from; uses special default dictionary if this is unset'}, 'motherTongue': {'type': 'string', 'description': \"A language code of the user's native language, enabling false friends checks for some language pairs.\"}, 'preferredVariants': {'type': 'string', 'description': 'Comma-separated list of preferred language variants. The language detector used with `language=auto` can detect e.g. English, but it cannot decide whether British English or American English is used. Thus this parameter can be used to specify the preferred variants like `en-GB` and `de-AT`. Only available with `language=auto`. You should set variants for at least German and English, as otherwise the spell checking will not work for those, as no spelling dictionary can be selected for just `en` or `de`.'}, 'enabledRules': {'type': 'string', 'description': \"IDs of rules to be enabled, comma-separated. Note that 'level' still applies, so the rule won't run unless 'level' is set to a level that activates the rule.\"}, 'disabledRules': {'type': 'string', 'description': 'IDs of rules to be disabled, comma-separated'}, 'enabledCategories': {'type': 'string', 'description': 'IDs of categories to be enabled, comma-separated'}, 'disabledCategories': {'type': 'string', 'description': 'IDs of categories to be disabled, comma-separated'}, 'enabledOnly': {'type': 'boolean', 'description': 'If true, only the rules and categories whose IDs are specified with `enabledRules` or `enabledCategories` are enabled.', 'default': False}, 'level': {'type': 'string', 'description': 'If set to `picky`, additional rules will be activated, i.e. rules that you might only find useful when checking formal text.', 'enum': ['default', 'picky']}}}}}\n- Responses:\n{'200': {'description': 'the result of checking the text', 'content': {'application/json': {'schema': {'type': 'object', 'properties': {'software': {'required': ['apiVersion', 'buildDate', 'name', 'version'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': \"Usually 'LanguageTool'.\"}, 'version': {'type': 'string', 'description': \"A version string like '3.3' or '3.4-SNAPSHOT'.\"}, 'buildDate': {'type': 'string', 'description': \"Date when the software was built, e.g. '2016-05-25'.\"}, 'apiVersion': {'type': 'integer', 'description': \"Version of this API response. We don't expect to make incompatible changes, so this can also be increased for newly added fields.\"}, 'status': {'type': 'string', 'description': 'An optional warning, e.g. when the API format is not stable.'}, 'premium': {'type': 'boolean', 'description': \"true if you're using a Premium account with all the premium text checks (since LanguageTool 4.2)\"}}}, 'language': {'required': ['code', 'detectedLanguage', 'name'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': \"Language name like 'French' or 'English (US)'.\"}, 'code': {'type': 'string', 'description': \"ISO 639-1 code like 'en', 'en-US', or 'ca-ES-valencia'\"}, 'detectedLanguage': {'required': ['code', 'name'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': \"Language name like 'French' or 'English (US)'.\"}, 'code': {'type': 'string', 'description': \"ISO 639-1 code like 'en', 'en-US', or 'ca-ES-valencia'.\"}}, 'description': 'The automatically detected text language (might be different from the language actually used for checking).'}}, 'description': 'The language used for checking the text.'}, 'matches': {'type': 'array', 'items': {'required': ['context', 'length', 'message', 'offset', 'replacements', 'sentence'], 'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'Message about the error displayed to the user.'}, 'shortMessage': {'type': 'string', 'description': \"An optional shorter version of 'message'.\"}, 'offset': {'type': 'integer', 'description': 'The 0-based character offset of the error in the text.'}, 'length': {'type': 'integer', 'description': 'The length of the error in characters.'}, 'replacements': {'type': 'array', 'description': 'Replacements that might correct the error. The array can be empty, in this case there is no suggested replacement.', 'items': {'type': 'object', 'properties': {'value': {'type': 'string', 'description': 'the replacement string'}}}}, 'context': {'required': ['length', 'offset', 'text'], 'type': 'object', 'properties': {'text': {'type': 'string', 'description': 'Context of the error, i.e. the error and some text to the left and to the left.'}, 'offset': {'type': 'integer', 'description': 'The 0-based character offset of the error in the context text.'}, 'length': {'type': 'integer', 'description': 'The length of the error in characters in the context.'}}}, 'sentence': {'type': 'string', 'description': 'The sentence the error occurred in (since LanguageTool 4.0 or later)'}, 'rule': {'required': ['category', 'description', 'id'], 'type': 'object', 'properties': {'id': {'type': 'string', 'description': \"An rule's identifier that's unique for this language.\"}, 'subId': {'type': 'string', 'description': 'An optional sub identifier of the rule, used when several rules are grouped.'}, 'description': {'type': 'string'}, 'urls': {'type': 'array', 'description': 'An optional array of URLs with a more detailed description of the error.', 'items': {'type': 'object', 'properties': {'value': {'type': 'string', 'description': 'the URL'}}}}, 'issueType': {'type': 'string', 'description': 'The <a href=\"http://www.w3.org/International/multilingualweb/lt/drafts/its20/its20.html#lqissue-typevalues\">Localization Quality Issue Type</a>. This is not defined for all languages, in which case it will always be \\'Uncategorized\\'.'}, 'category': {'type': 'object', 'properties': {'id': {'type': 'string', 'description': \"A category's identifier that's unique for this language.\"}, 'name': {'type': 'string', 'description': 'A short description of the category.'}}}}}}}}}}}}}}\n",
    "#### getSupportedLanguages\n- Method: GET\n- Path: /languages\n- Parameters:\nNone\n- Request Body Schema:\nNone\n- Responses:\n{'200': {'description': 'An array of language objects.', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'required': ['code', 'longCode', 'name'], 'type': 'object', 'properties': {'name': {'type': 'string', 'description': \"a language name like 'French' or 'English (Australia)'\"}, 'code': {'type': 'string', 'description': \"a language code like 'en'\"}, 'longCode': {'type': 'string', 'description': \"a language code like 'en-US' or 'ca-ES-valencia'\"}}}}}}}}\n"
  ],
  "passed": true,
  "test_results": [
    {
      "request_name": "getSupportedLanguages",
      "request_id": "084ead4b-4e16-4714-80ac-c987a2dfbdca",
      "success": true,
      "is_server_error": false,
      "request_data": {
        "method": "GET",
        "url": {
          "path": [
            "languages"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "headers": [],
        "body": ""
      },
      "response_data": {
        "headers": {
          "Date": "Mon, 18 Aug 2025 11:45:50 GMT",
          "Content-type": "application/json",
          "Content-length": "3307"
        },
        "body": [
          {
            "name": "Arabic",
            "code": "ar",
            "longCode": "ar"
          },
          {
            "name": "Asturian",
            "code": "ast",
            "longCode": "ast-ES"
          },
          {
            "name": "Belarusian",
            "code": "be",
            "longCode": "be-BY"
          },
          {
            "name": "Breton",
            "code": "br",
            "longCode": "br-FR"
          },
          {
            "name": "Catalan",
            "code": "ca",
            "longCode": "ca-ES"
          },
          {
            "name": "Catalan (Valencian)",
            "code": "ca",
            "longCode": "ca-ES-valencia"
          },
          {
            "name": "Catalan (Balearic)",
            "code": "ca",
            "longCode": "ca-ES-balear"
          },
          {
            "name": "Danish",
            "code": "da",
            "longCode": "da-DK"
          },
          {
            "name": "German",
            "code": "de",
            "longCode": "de"
          },
          {
            "name": "German (Germany)",
            "code": "de",
            "longCode": "de-DE"
          },
          {
            "name": "German (Austria)",
            "code": "de",
            "longCode": "de-AT"
          },
          {
            "name": "German (Swiss)",
            "code": "de",
            "longCode": "de-CH"
          },
          {
            "name": "Simple German",
            "code": "de-DE-x-simple-language",
            "longCode": "de-DE-x-simple-language"
          },
          {
            "name": "Greek",
            "code": "el",
            "longCode": "el-GR"
          },
          {
            "name": "English",
            "code": "en",
            "longCode": "en"
          },
          {
            "name": "English (US)",
            "code": "en",
            "longCode": "en-US"
          },
          {
            "name": "English (GB)",
            "code": "en",
            "longCode": "en-GB"
          },
          {
            "name": "English (Australian)",
            "code": "en",
            "longCode": "en-AU"
          },
          {
            "name": "English (Canadian)",
            "code": "en",
            "longCode": "en-CA"
          },
          {
            "name": "English (New Zealand)",
            "code": "en",
            "longCode": "en-NZ"
          },
          {
            "name": "English (South African)",
            "code": "en",
            "longCode": "en-ZA"
          },
          {
            "name": "Esperanto",
            "code": "eo",
            "longCode": "eo"
          },
          {
            "name": "Spanish",
            "code": "es",
            "longCode": "es"
          },
          {
            "name": "Spanish (voseo)",
            "code": "es",
            "longCode": "es-AR"
          },
          {
            "name": "Persian",
            "code": "fa",
            "longCode": "fa"
          },
          {
            "name": "French",
            "code": "fr",
            "longCode": "fr"
          },
          {
            "name": "French (Canada)",
            "code": "fr",
            "longCode": "fr-CA"
          },
          {
            "name": "French (Switzerland)",
            "code": "fr",
            "longCode": "fr-CH"
          },
          {
            "name": "French (Belgium)",
            "code": "fr",
            "longCode": "fr-BE"
          },
          {
            "name": "Irish",
            "code": "ga",
            "longCode": "ga-IE"
          },
          {
            "name": "Galician",
            "code": "gl",
            "longCode": "gl-ES"
          },
          {
            "name": "Italian",
            "code": "it",
            "longCode": "it"
          },
          {
            "name": "Japanese",
            "code": "ja",
            "longCode": "ja-JP"
          },
          {
            "name": "Khmer",
            "code": "km",
            "longCode": "km-KH"
          },
          {
            "name": "Dutch",
            "code": "nl",
            "longCode": "nl"
          },
          {
            "name": "Dutch (Belgium)",
            "code": "nl",
            "longCode": "nl-BE"
          },
          {
            "name": "Polish",
            "code": "pl",
            "longCode": "pl-PL"
          },
          {
            "name": "Portuguese",
            "code": "pt",
            "longCode": "pt"
          },
          {
            "name": "Portuguese (Portugal)",
            "code": "pt",
            "longCode": "pt-PT"
          },
          {
            "name": "Portuguese (Brazil)",
            "code": "pt",
            "longCode": "pt-BR"
          },
          {
            "name": "Portuguese (Angola preAO)",
            "code": "pt",
            "longCode": "pt-AO"
          },
          {
            "name": "Portuguese (Moambique preAO)",
            "code": "pt",
            "longCode": "pt-MZ"
          },
          {
            "name": "Romanian",
            "code": "ro",
            "longCode": "ro-RO"
          },
          {
            "name": "Russian",
            "code": "ru",
            "longCode": "ru-RU"
          },
          {
            "name": "Slovak",
            "code": "sk",
            "longCode": "sk-SK"
          },
          {
            "name": "Slovenian",
            "code": "sl",
            "longCode": "sl-SI"
          },
          {
            "name": "Swedish",
            "code": "sv",
            "longCode": "sv"
          },
          {
            "name": "Tamil",
            "code": "ta",
            "longCode": "ta-IN"
          },
          {
            "name": "Tagalog",
            "code": "tl",
            "longCode": "tl-PH"
          },
          {
            "name": "Ukrainian",
            "code": "uk",
            "longCode": "uk-UA"
          },
          {
            "name": "Chinese",
            "code": "zh",
            "longCode": "zh-CN"
          },
          {
            "name": "Crimean Tatar",
            "code": "crh",
            "longCode": "crh-UA"
          },
          {
            "name": "Dutch",
            "code": "nl",
            "longCode": "nl-NL"
          },
          {
            "name": "Simple German",
            "code": "de-DE-x-simple-language",
            "longCode": "de-DE-x-simple-language-DE"
          },
          {
            "name": "Spanish",
            "code": "es",
            "longCode": "es-ES"
          },
          {
            "name": "Italian",
            "code": "it",
            "longCode": "it-IT"
          },
          {
            "name": "Persian",
            "code": "fa",
            "longCode": "fa-IR"
          },
          {
            "name": "Swedish",
            "code": "sv",
            "longCode": "sv-SE"
          },
          {
            "name": "German",
            "code": "de",
            "longCode": "de-LU"
          },
          {
            "name": "French",
            "code": "fr",
            "longCode": "fr-FR"
          }
        ]
      },
      "assertions": [
        {
          "assertion": "Response status code is 2xx",
          "error": null
        }
      ]
    },
    {
      "request_name": "checkText",
      "request_id": "7c390355-d1d4-4e84-9974-a6f4758193bf",
      "success": true,
      "is_server_error": false,
      "request_data": {
        "method": "POST",
        "url": {
          "path": [
            "check"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "headers": [
          {
            "key": "Content-Type",
            "value": "multipart/form-data"
          }
        ],
        "body": ""
      },
      "response_data": {
        "headers": {
          "Date": "Mon, 18 Aug 2025 11:45:50 GMT",
          "Content-length": "700"
        },
        "body": "Error: '12345' is not a language code known to LanguageTool. Supported language codes are: ar, ast-ES, be-BY, br-FR, ca-ES, ca-ES-balear, ca-ES-valencia, crh-UA, da-DK, de, de-AT, de-CH, de-DE, de-DE-x-simple-language, de-DE-x-simple-language-DE, de-LU, el-GR, en, en-AU, en-CA, en-GB, en-NZ, en-US, en-ZA, eo, es, es-AR, es-ES, fa, fa-IR, fr, fr-BE, fr-CA, fr-CH, fr-FR, ga-IE, gl-ES, it, it-IT, ja-JP, km-KH, nl, nl-BE, nl-NL, pl-PL, pt, pt-AO, pt-BR, pt-MZ, pt-PT, ro-RO, ru-RU, sk-SK, sl-SI, sv, sv-SE, ta-IN, tl-PH, uk-UA, zh-CN. The list of languages is read from META-INF/org/languagetool/language-module.properties in the Java classpath. See https://dev.languagetool.org/java-api for details."
      },
      "assertions": [
        {
          "assertion": "Response status code is 4xx",
          "error": null
        }
      ]
    }
  ]
}