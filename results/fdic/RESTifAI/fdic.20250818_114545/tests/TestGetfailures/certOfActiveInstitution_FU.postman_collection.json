{
    "info": {
        "name": "certOfActiveInstitution_FU",
        "description": "Set the `filters` parameter in getFailures with a CERT number that belongs to an active institution (not failed), e.g., filters=CERT:\"14761\" AND CITY:\"Cambridge\" AND CITYST:\"Cambridge, Maryland\" AND FAILYR:[\"2015\" TO \"2025\"], to test querying failures for an institution that has no failure record.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "searchInstitutions",
            "request": {
                "method": "GET",
                "header": [],
                "body": null,
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/institutions?filters=DEP%3A%5B50000%20TO%20%2A%5D&search=NAME%3A%20Bank&fields=CERT,NAME,STNAME,CITY&sort_by=NAME&sort_order=ASC&limit=10&offset=0&format=json&download=false&filename=institutions_list",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "institutions"
                    ],
                    "query": [
                        {
                            "key": "filters",
                            "value": "DEP%3A%5B50000%20TO%20%2A%5D"
                        },
                        {
                            "key": "search",
                            "value": "NAME%3A%20Bank"
                        },
                        {
                            "key": "fields",
                            "value": "CERT,NAME,STNAME,CITY"
                        },
                        {
                            "key": "sort_by",
                            "value": "NAME"
                        },
                        {
                            "key": "sort_order",
                            "value": "ASC"
                        },
                        {
                            "key": "limit",
                            "value": "10"
                        },
                        {
                            "key": "offset",
                            "value": "0"
                        },
                        {
                            "key": "format",
                            "value": "json"
                        },
                        {
                            "key": "download",
                            "value": "false"
                        },
                        {
                            "key": "filename",
                            "value": "institutions_list"
                        }
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 2xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(200, 299);",
                            "});",
                            "",
                            "try {",
                            "",
                            "   /**",
                            "    * Gets a value from a nested object using a flattened key path",
                            "    * @param {Object} obj - The object to extract from",
                            "    * @param {string} path - Flattened key path (e.g., 'users[1].role.id')",
                            "    * @return {*} The extracted value or undefined if not found",
                            "    */",
                            "   function getValueByPath(obj, path) {",
                            "       // Handle array notation by splitting correctly",
                            "       const parts = [];",
                            "       let currentPart = '';",
                            "       let inBracket = false;",
                            "",
                            "       // Parse the path maintaining array indexes",
                            "       for (let i = 0; i < path.length; i++) {",
                            "           const char = path[i];",
                            "           if (char === '.' && !inBracket) {",
                            "               if (currentPart) parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else if (char === '[') {",
                            "               inBracket = true;",
                            "               parts.push(currentPart);",
                            "               currentPart = '[';",
                            "           } else if (char === ']') {",
                            "               inBracket = false;",
                            "               currentPart += ']';",
                            "               parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else {",
                            "               currentPart += char;",
                            "           }",
                            "       }",
                            "       if (currentPart) parts.push(currentPart);",
                            "",
                            "       // Navigate through the object",
                            "       let current = obj;",
                            "       for (const part of parts) {",
                            "           if (!current) return undefined;",
                            "",
                            "           if (part.startsWith('[') && part.endsWith(']')) {",
                            "               // Handle array index",
                            "               const index = parseInt(part.substring(1, part.length - 1));",
                            "               if (!Array.isArray(current) || current.length <= index) {",
                            "                   return undefined;",
                            "               }",
                            "               current = current[index];",
                            "           } else {",
                            "               // Handle object property",
                            "               current = current[part];",
                            "           }",
                            "       }",
                            "       return current;",
                            "   }",
                            "",
                            "    // Extract response body values",
                            "    const responseJson = pm.response.json();",
                            "",
                            "    // Store expected body fields",
                            "    const x0 = getValueByPath(responseJson, 'meta.total');",
                            "    if (x0 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.meta.total', x0);",
                            "    }",
                            "    const x1 = getValueByPath(responseJson, 'meta.parameters.filters');",
                            "    if (x1 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.meta.parameters.filters', x1);",
                            "    }",
                            "    const x2 = getValueByPath(responseJson, 'meta.parameters.fields');",
                            "    if (x2 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.meta.parameters.fields', x2);",
                            "    }",
                            "    const x3 = getValueByPath(responseJson, 'meta.parameters.limit');",
                            "    if (x3 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.meta.parameters.limit', x3);",
                            "    }",
                            "    const x4 = getValueByPath(responseJson, 'meta.parameters.offset');",
                            "    if (x4 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.meta.parameters.offset', x4);",
                            "    }",
                            "    const x5 = getValueByPath(responseJson, 'meta.parameters.search');",
                            "    if (x5 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.meta.parameters.search', x5);",
                            "    }",
                            "    const x6 = getValueByPath(responseJson, 'meta.index.name');",
                            "    if (x6 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.meta.index.name', x6);",
                            "    }",
                            "    const x7 = getValueByPath(responseJson, 'meta.index.createTimestamp');",
                            "    if (x7 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.meta.index.createTimestamp', x7);",
                            "    }",
                            "    const x8 = getValueByPath(responseJson, 'data[0].data.CITY');",
                            "    if (x8 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[0].data.CITY', x8);",
                            "    }",
                            "    const x9 = getValueByPath(responseJson, 'data[0].data.STNAME');",
                            "    if (x9 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[0].data.STNAME', x9);",
                            "    }",
                            "    const x10 = getValueByPath(responseJson, 'data[0].data.CERT');",
                            "    if (x10 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[0].data.CERT', x10);",
                            "    }",
                            "    const x11 = getValueByPath(responseJson, 'data[0].data.NAME');",
                            "    if (x11 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[0].data.NAME', x11);",
                            "    }",
                            "    const x12 = getValueByPath(responseJson, 'data[0].data.ID');",
                            "    if (x12 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[0].data.ID', x12);",
                            "    }",
                            "    const x13 = getValueByPath(responseJson, 'data[0].score');",
                            "    if (x13 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[0].score', x13);",
                            "    }",
                            "    const x14 = getValueByPath(responseJson, 'data[0].highlight.PRIORNAME1.raw[0]');",
                            "    if (x14 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[0].highlight.PRIORNAME1.raw[0]', x14);",
                            "    }",
                            "    const x15 = getValueByPath(responseJson, 'data[0].highlight.NAME.raw[0]');",
                            "    if (x15 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[0].highlight.NAME.raw[0]', x15);",
                            "    }",
                            "    const x16 = getValueByPath(responseJson, 'data[1].data.CITY');",
                            "    if (x16 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[1].data.CITY', x16);",
                            "    }",
                            "    const x17 = getValueByPath(responseJson, 'data[1].data.STNAME');",
                            "    if (x17 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[1].data.STNAME', x17);",
                            "    }",
                            "    const x18 = getValueByPath(responseJson, 'data[1].data.CERT');",
                            "    if (x18 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[1].data.CERT', x18);",
                            "    }",
                            "    const x19 = getValueByPath(responseJson, 'data[1].data.NAME');",
                            "    if (x19 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[1].data.NAME', x19);",
                            "    }",
                            "    const x20 = getValueByPath(responseJson, 'data[1].data.ID');",
                            "    if (x20 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[1].data.ID', x20);",
                            "    }",
                            "    const x21 = getValueByPath(responseJson, 'data[1].score');",
                            "    if (x21 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[1].score', x21);",
                            "    }",
                            "    const x22 = getValueByPath(responseJson, 'data[1].highlight.PRIORNAME1.raw[0]');",
                            "    if (x22 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[1].highlight.PRIORNAME1.raw[0]', x22);",
                            "    }",
                            "    const x23 = getValueByPath(responseJson, 'data[1].highlight.NAME.raw[0]');",
                            "    if (x23 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[1].highlight.NAME.raw[0]', x23);",
                            "    }",
                            "    const x24 = getValueByPath(responseJson, 'data[2].data.CITY');",
                            "    if (x24 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[2].data.CITY', x24);",
                            "    }",
                            "    const x25 = getValueByPath(responseJson, 'data[2].data.STNAME');",
                            "    if (x25 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[2].data.STNAME', x25);",
                            "    }",
                            "    const x26 = getValueByPath(responseJson, 'data[2].data.CERT');",
                            "    if (x26 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[2].data.CERT', x26);",
                            "    }",
                            "    const x27 = getValueByPath(responseJson, 'data[2].data.NAME');",
                            "    if (x27 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[2].data.NAME', x27);",
                            "    }",
                            "    const x28 = getValueByPath(responseJson, 'data[2].data.ID');",
                            "    if (x28 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[2].data.ID', x28);",
                            "    }",
                            "    const x29 = getValueByPath(responseJson, 'data[2].score');",
                            "    if (x29 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[2].score', x29);",
                            "    }",
                            "    const x30 = getValueByPath(responseJson, 'data[2].highlight.PRIORNAME1.raw[0]');",
                            "    if (x30 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[2].highlight.PRIORNAME1.raw[0]', x30);",
                            "    }",
                            "    const x31 = getValueByPath(responseJson, 'data[2].highlight.NAME.raw[0]');",
                            "    if (x31 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[2].highlight.NAME.raw[0]', x31);",
                            "    }",
                            "    const x32 = getValueByPath(responseJson, 'data[3].data.CITY');",
                            "    if (x32 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[3].data.CITY', x32);",
                            "    }",
                            "    const x33 = getValueByPath(responseJson, 'data[3].data.STNAME');",
                            "    if (x33 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[3].data.STNAME', x33);",
                            "    }",
                            "    const x34 = getValueByPath(responseJson, 'data[3].data.CERT');",
                            "    if (x34 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[3].data.CERT', x34);",
                            "    }",
                            "    const x35 = getValueByPath(responseJson, 'data[3].data.NAME');",
                            "    if (x35 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[3].data.NAME', x35);",
                            "    }",
                            "    const x36 = getValueByPath(responseJson, 'data[3].data.ID');",
                            "    if (x36 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[3].data.ID', x36);",
                            "    }",
                            "    const x37 = getValueByPath(responseJson, 'data[3].score');",
                            "    if (x37 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[3].score', x37);",
                            "    }",
                            "    const x38 = getValueByPath(responseJson, 'data[3].highlight.PRIORNAME1.raw[0]');",
                            "    if (x38 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[3].highlight.PRIORNAME1.raw[0]', x38);",
                            "    }",
                            "    const x39 = getValueByPath(responseJson, 'data[3].highlight.NAME.raw[0]');",
                            "    if (x39 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[3].highlight.NAME.raw[0]', x39);",
                            "    }",
                            "    const x40 = getValueByPath(responseJson, 'data[4].data.CITY');",
                            "    if (x40 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[4].data.CITY', x40);",
                            "    }",
                            "    const x41 = getValueByPath(responseJson, 'data[4].data.STNAME');",
                            "    if (x41 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[4].data.STNAME', x41);",
                            "    }",
                            "    const x42 = getValueByPath(responseJson, 'data[4].data.CERT');",
                            "    if (x42 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[4].data.CERT', x42);",
                            "    }",
                            "    const x43 = getValueByPath(responseJson, 'data[4].data.NAME');",
                            "    if (x43 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[4].data.NAME', x43);",
                            "    }",
                            "    const x44 = getValueByPath(responseJson, 'data[4].data.ID');",
                            "    if (x44 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[4].data.ID', x44);",
                            "    }",
                            "    const x45 = getValueByPath(responseJson, 'data[4].score');",
                            "    if (x45 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[4].score', x45);",
                            "    }",
                            "    const x46 = getValueByPath(responseJson, 'data[4].highlight.PRIORNAME1.raw[0]');",
                            "    if (x46 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[4].highlight.PRIORNAME1.raw[0]', x46);",
                            "    }",
                            "    const x47 = getValueByPath(responseJson, 'data[4].highlight.PRIORNAME2.raw[0]');",
                            "    if (x47 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[4].highlight.PRIORNAME2.raw[0]', x47);",
                            "    }",
                            "    const x48 = getValueByPath(responseJson, 'data[4].highlight.NAME.raw[0]');",
                            "    if (x48 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[4].highlight.NAME.raw[0]', x48);",
                            "    }",
                            "    const x49 = getValueByPath(responseJson, 'data[5].data.CITY');",
                            "    if (x49 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[5].data.CITY', x49);",
                            "    }",
                            "    const x50 = getValueByPath(responseJson, 'data[5].data.STNAME');",
                            "    if (x50 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[5].data.STNAME', x50);",
                            "    }",
                            "    const x51 = getValueByPath(responseJson, 'data[5].data.CERT');",
                            "    if (x51 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[5].data.CERT', x51);",
                            "    }",
                            "    const x52 = getValueByPath(responseJson, 'data[5].data.NAME');",
                            "    if (x52 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[5].data.NAME', x52);",
                            "    }",
                            "    const x53 = getValueByPath(responseJson, 'data[5].data.ID');",
                            "    if (x53 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[5].data.ID', x53);",
                            "    }",
                            "    const x54 = getValueByPath(responseJson, 'data[5].score');",
                            "    if (x54 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[5].score', x54);",
                            "    }",
                            "    const x55 = getValueByPath(responseJson, 'data[5].highlight.PRIORNAME1.raw[0]');",
                            "    if (x55 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[5].highlight.PRIORNAME1.raw[0]', x55);",
                            "    }",
                            "    const x56 = getValueByPath(responseJson, 'data[5].highlight.PRIORNAME2.raw[0]');",
                            "    if (x56 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[5].highlight.PRIORNAME2.raw[0]', x56);",
                            "    }",
                            "    const x57 = getValueByPath(responseJson, 'data[5].highlight.PRIORNAME3.raw[0]');",
                            "    if (x57 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[5].highlight.PRIORNAME3.raw[0]', x57);",
                            "    }",
                            "    const x58 = getValueByPath(responseJson, 'data[5].highlight.NAME.raw[0]');",
                            "    if (x58 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[5].highlight.NAME.raw[0]', x58);",
                            "    }",
                            "    const x59 = getValueByPath(responseJson, 'data[6].data.CITY');",
                            "    if (x59 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[6].data.CITY', x59);",
                            "    }",
                            "    const x60 = getValueByPath(responseJson, 'data[6].data.STNAME');",
                            "    if (x60 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[6].data.STNAME', x60);",
                            "    }",
                            "    const x61 = getValueByPath(responseJson, 'data[6].data.CERT');",
                            "    if (x61 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[6].data.CERT', x61);",
                            "    }",
                            "    const x62 = getValueByPath(responseJson, 'data[6].data.NAME');",
                            "    if (x62 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[6].data.NAME', x62);",
                            "    }",
                            "    const x63 = getValueByPath(responseJson, 'data[6].data.ID');",
                            "    if (x63 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[6].data.ID', x63);",
                            "    }",
                            "    const x64 = getValueByPath(responseJson, 'data[6].score');",
                            "    if (x64 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[6].score', x64);",
                            "    }",
                            "    const x65 = getValueByPath(responseJson, 'data[6].highlight.PRIORNAME1.raw[0]');",
                            "    if (x65 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[6].highlight.PRIORNAME1.raw[0]', x65);",
                            "    }",
                            "    const x66 = getValueByPath(responseJson, 'data[6].highlight.NAME.raw[0]');",
                            "    if (x66 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[6].highlight.NAME.raw[0]', x66);",
                            "    }",
                            "    const x67 = getValueByPath(responseJson, 'data[7].data.CITY');",
                            "    if (x67 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[7].data.CITY', x67);",
                            "    }",
                            "    const x68 = getValueByPath(responseJson, 'data[7].data.STNAME');",
                            "    if (x68 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[7].data.STNAME', x68);",
                            "    }",
                            "    const x69 = getValueByPath(responseJson, 'data[7].data.CERT');",
                            "    if (x69 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[7].data.CERT', x69);",
                            "    }",
                            "    const x70 = getValueByPath(responseJson, 'data[7].data.NAME');",
                            "    if (x70 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[7].data.NAME', x70);",
                            "    }",
                            "    const x71 = getValueByPath(responseJson, 'data[7].data.ID');",
                            "    if (x71 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[7].data.ID', x71);",
                            "    }",
                            "    const x72 = getValueByPath(responseJson, 'data[7].score');",
                            "    if (x72 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[7].score', x72);",
                            "    }",
                            "    const x73 = getValueByPath(responseJson, 'data[7].highlight.PRIORNAME1.raw[0]');",
                            "    if (x73 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[7].highlight.PRIORNAME1.raw[0]', x73);",
                            "    }",
                            "    const x74 = getValueByPath(responseJson, 'data[7].highlight.NAME.raw[0]');",
                            "    if (x74 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[7].highlight.NAME.raw[0]', x74);",
                            "    }",
                            "    const x75 = getValueByPath(responseJson, 'data[8].data.CITY');",
                            "    if (x75 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[8].data.CITY', x75);",
                            "    }",
                            "    const x76 = getValueByPath(responseJson, 'data[8].data.STNAME');",
                            "    if (x76 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[8].data.STNAME', x76);",
                            "    }",
                            "    const x77 = getValueByPath(responseJson, 'data[8].data.CERT');",
                            "    if (x77 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[8].data.CERT', x77);",
                            "    }",
                            "    const x78 = getValueByPath(responseJson, 'data[8].data.NAME');",
                            "    if (x78 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[8].data.NAME', x78);",
                            "    }",
                            "    const x79 = getValueByPath(responseJson, 'data[8].data.ID');",
                            "    if (x79 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[8].data.ID', x79);",
                            "    }",
                            "    const x80 = getValueByPath(responseJson, 'data[8].score');",
                            "    if (x80 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[8].score', x80);",
                            "    }",
                            "    const x81 = getValueByPath(responseJson, 'data[8].highlight.PRIORNAME1.raw[0]');",
                            "    if (x81 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[8].highlight.PRIORNAME1.raw[0]', x81);",
                            "    }",
                            "    const x82 = getValueByPath(responseJson, 'data[8].highlight.PRIORNAME2.raw[0]');",
                            "    if (x82 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[8].highlight.PRIORNAME2.raw[0]', x82);",
                            "    }",
                            "    const x83 = getValueByPath(responseJson, 'data[8].highlight.NAME.raw[0]');",
                            "    if (x83 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[8].highlight.NAME.raw[0]', x83);",
                            "    }",
                            "    const x84 = getValueByPath(responseJson, 'data[9].data.CITY');",
                            "    if (x84 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[9].data.CITY', x84);",
                            "    }",
                            "    const x85 = getValueByPath(responseJson, 'data[9].data.STNAME');",
                            "    if (x85 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[9].data.STNAME', x85);",
                            "    }",
                            "    const x86 = getValueByPath(responseJson, 'data[9].data.CERT');",
                            "    if (x86 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[9].data.CERT', x86);",
                            "    }",
                            "    const x87 = getValueByPath(responseJson, 'data[9].data.NAME');",
                            "    if (x87 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[9].data.NAME', x87);",
                            "    }",
                            "    const x88 = getValueByPath(responseJson, 'data[9].data.ID');",
                            "    if (x88 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[9].data.ID', x88);",
                            "    }",
                            "    const x89 = getValueByPath(responseJson, 'data[9].score');",
                            "    if (x89 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[9].score', x89);",
                            "    }",
                            "    const x90 = getValueByPath(responseJson, 'data[9].highlight.NAME.raw[0]');",
                            "    if (x90 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.data[9].highlight.NAME.raw[0]', x90);",
                            "    }",
                            "    const x91 = getValueByPath(responseJson, 'totals.count');",
                            "    if (x91 !== undefined) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.body.totals.count', x91);",
                            "    }",
                            "",
                            "    // Store response headers",
                            "    pm.response.headers.each(function(header) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.headers.', header.value);",
                            "    });",
                            "",
                            "    // Store response cookies",
                            "    pm.response.cookies.each(function(cookie) {",
                            "        pm.collectionVariables.set('searchInstitutions.response.cookies.', cookie.value);",
                            "    });",
                            "",
                            "    // Store status code",
                            "    pm.collectionVariables.set('searchInstitutions.response.status_code', pm.response.code);",
                            "} catch (error) {",
                            "    console.error('Failed to process response:', error.message);",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.collectionVariables.set('searchInstitutions.request.query_params.filters', 'DEP%3A%5B50000%20TO%20%2A%5D');",
                            "pm.collectionVariables.set('searchInstitutions.request.query_params.search', 'NAME%3A%20Bank');",
                            "pm.collectionVariables.set('searchInstitutions.request.query_params.fields', 'CERT,NAME,STNAME,CITY');",
                            "pm.collectionVariables.set('searchInstitutions.request.query_params.sort_by', 'NAME');",
                            "pm.collectionVariables.set('searchInstitutions.request.query_params.sort_order', 'ASC');",
                            "pm.collectionVariables.set('searchInstitutions.request.query_params.limit', 10);",
                            "pm.collectionVariables.set('searchInstitutions.request.query_params.offset', 0);",
                            "pm.collectionVariables.set('searchInstitutions.request.query_params.format', 'json');",
                            "pm.collectionVariables.set('searchInstitutions.request.query_params.download', 'false');",
                            "pm.collectionVariables.set('searchInstitutions.request.query_params.filename', 'institutions_list');"
                        ]
                    }
                }
            ]
        },
        {
            "name": "searchLocations",
            "request": {
                "method": "GET",
                "header": [],
                "body": null,
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/locations?filters=CITY%3ACambridge%20AND%20STNAME%3AMaryland&fields=LOCID,NAME,ADDR,ZIP,CITY,STNAME&sort_by=NAME&sort_order=ASC&limit=10&offset=0&format=json",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "locations"
                    ],
                    "query": [
                        {
                            "key": "filters",
                            "value": "CITY%3ACambridge%20AND%20STNAME%3AMaryland"
                        },
                        {
                            "key": "fields",
                            "value": "LOCID,NAME,ADDR,ZIP,CITY,STNAME"
                        },
                        {
                            "key": "sort_by",
                            "value": "NAME"
                        },
                        {
                            "key": "sort_order",
                            "value": "ASC"
                        },
                        {
                            "key": "limit",
                            "value": "10"
                        },
                        {
                            "key": "offset",
                            "value": "0"
                        },
                        {
                            "key": "format",
                            "value": "json"
                        }
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 2xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(200, 299);",
                            "});",
                            "",
                            "try {",
                            "",
                            "   /**",
                            "    * Gets a value from a nested object using a flattened key path",
                            "    * @param {Object} obj - The object to extract from",
                            "    * @param {string} path - Flattened key path (e.g., 'users[1].role.id')",
                            "    * @return {*} The extracted value or undefined if not found",
                            "    */",
                            "   function getValueByPath(obj, path) {",
                            "       // Handle array notation by splitting correctly",
                            "       const parts = [];",
                            "       let currentPart = '';",
                            "       let inBracket = false;",
                            "",
                            "       // Parse the path maintaining array indexes",
                            "       for (let i = 0; i < path.length; i++) {",
                            "           const char = path[i];",
                            "           if (char === '.' && !inBracket) {",
                            "               if (currentPart) parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else if (char === '[') {",
                            "               inBracket = true;",
                            "               parts.push(currentPart);",
                            "               currentPart = '[';",
                            "           } else if (char === ']') {",
                            "               inBracket = false;",
                            "               currentPart += ']';",
                            "               parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else {",
                            "               currentPart += char;",
                            "           }",
                            "       }",
                            "       if (currentPart) parts.push(currentPart);",
                            "",
                            "       // Navigate through the object",
                            "       let current = obj;",
                            "       for (const part of parts) {",
                            "           if (!current) return undefined;",
                            "",
                            "           if (part.startsWith('[') && part.endsWith(']')) {",
                            "               // Handle array index",
                            "               const index = parseInt(part.substring(1, part.length - 1));",
                            "               if (!Array.isArray(current) || current.length <= index) {",
                            "                   return undefined;",
                            "               }",
                            "               current = current[index];",
                            "           } else {",
                            "               // Handle object property",
                            "               current = current[part];",
                            "           }",
                            "       }",
                            "       return current;",
                            "   }",
                            "",
                            "    // Extract response body values",
                            "    const responseJson = pm.response.json();",
                            "",
                            "    // Store expected body fields",
                            "    const x0 = getValueByPath(responseJson, 'meta.total');",
                            "    if (x0 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.meta.total', x0);",
                            "    }",
                            "    const x1 = getValueByPath(responseJson, 'meta.parameters.filters');",
                            "    if (x1 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.meta.parameters.filters', x1);",
                            "    }",
                            "    const x2 = getValueByPath(responseJson, 'meta.parameters.fields');",
                            "    if (x2 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.meta.parameters.fields', x2);",
                            "    }",
                            "    const x3 = getValueByPath(responseJson, 'meta.parameters.limit');",
                            "    if (x3 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.meta.parameters.limit', x3);",
                            "    }",
                            "    const x4 = getValueByPath(responseJson, 'meta.parameters.offset');",
                            "    if (x4 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.meta.parameters.offset', x4);",
                            "    }",
                            "    const x5 = getValueByPath(responseJson, 'meta.index.name');",
                            "    if (x5 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.meta.index.name', x5);",
                            "    }",
                            "    const x6 = getValueByPath(responseJson, 'meta.index.createTimestamp');",
                            "    if (x6 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.meta.index.createTimestamp', x6);",
                            "    }",
                            "    const x7 = getValueByPath(responseJson, 'data[0].data.ZIP');",
                            "    if (x7 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[0].data.ZIP', x7);",
                            "    }",
                            "    const x8 = getValueByPath(responseJson, 'data[0].data.CITY');",
                            "    if (x8 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[0].data.CITY', x8);",
                            "    }",
                            "    const x9 = getValueByPath(responseJson, 'data[0].data.STNAME');",
                            "    if (x9 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[0].data.STNAME', x9);",
                            "    }",
                            "    const x10 = getValueByPath(responseJson, 'data[0].data.NAME');",
                            "    if (x10 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[0].data.NAME', x10);",
                            "    }",
                            "    const x11 = getValueByPath(responseJson, 'data[0].data.ID');",
                            "    if (x11 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[0].data.ID', x11);",
                            "    }",
                            "    const x12 = getValueByPath(responseJson, 'data[0].score');",
                            "    if (x12 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[0].score', x12);",
                            "    }",
                            "    const x13 = getValueByPath(responseJson, 'data[1].data.ZIP');",
                            "    if (x13 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[1].data.ZIP', x13);",
                            "    }",
                            "    const x14 = getValueByPath(responseJson, 'data[1].data.CITY');",
                            "    if (x14 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[1].data.CITY', x14);",
                            "    }",
                            "    const x15 = getValueByPath(responseJson, 'data[1].data.STNAME');",
                            "    if (x15 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[1].data.STNAME', x15);",
                            "    }",
                            "    const x16 = getValueByPath(responseJson, 'data[1].data.NAME');",
                            "    if (x16 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[1].data.NAME', x16);",
                            "    }",
                            "    const x17 = getValueByPath(responseJson, 'data[1].data.ID');",
                            "    if (x17 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[1].data.ID', x17);",
                            "    }",
                            "    const x18 = getValueByPath(responseJson, 'data[1].score');",
                            "    if (x18 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[1].score', x18);",
                            "    }",
                            "    const x19 = getValueByPath(responseJson, 'data[2].data.ZIP');",
                            "    if (x19 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[2].data.ZIP', x19);",
                            "    }",
                            "    const x20 = getValueByPath(responseJson, 'data[2].data.CITY');",
                            "    if (x20 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[2].data.CITY', x20);",
                            "    }",
                            "    const x21 = getValueByPath(responseJson, 'data[2].data.STNAME');",
                            "    if (x21 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[2].data.STNAME', x21);",
                            "    }",
                            "    const x22 = getValueByPath(responseJson, 'data[2].data.NAME');",
                            "    if (x22 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[2].data.NAME', x22);",
                            "    }",
                            "    const x23 = getValueByPath(responseJson, 'data[2].data.ID');",
                            "    if (x23 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[2].data.ID', x23);",
                            "    }",
                            "    const x24 = getValueByPath(responseJson, 'data[2].score');",
                            "    if (x24 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[2].score', x24);",
                            "    }",
                            "    const x25 = getValueByPath(responseJson, 'data[3].data.ZIP');",
                            "    if (x25 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[3].data.ZIP', x25);",
                            "    }",
                            "    const x26 = getValueByPath(responseJson, 'data[3].data.CITY');",
                            "    if (x26 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[3].data.CITY', x26);",
                            "    }",
                            "    const x27 = getValueByPath(responseJson, 'data[3].data.STNAME');",
                            "    if (x27 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[3].data.STNAME', x27);",
                            "    }",
                            "    const x28 = getValueByPath(responseJson, 'data[3].data.NAME');",
                            "    if (x28 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[3].data.NAME', x28);",
                            "    }",
                            "    const x29 = getValueByPath(responseJson, 'data[3].data.ID');",
                            "    if (x29 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[3].data.ID', x29);",
                            "    }",
                            "    const x30 = getValueByPath(responseJson, 'data[3].score');",
                            "    if (x30 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[3].score', x30);",
                            "    }",
                            "    const x31 = getValueByPath(responseJson, 'data[4].data.ZIP');",
                            "    if (x31 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[4].data.ZIP', x31);",
                            "    }",
                            "    const x32 = getValueByPath(responseJson, 'data[4].data.CITY');",
                            "    if (x32 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[4].data.CITY', x32);",
                            "    }",
                            "    const x33 = getValueByPath(responseJson, 'data[4].data.STNAME');",
                            "    if (x33 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[4].data.STNAME', x33);",
                            "    }",
                            "    const x34 = getValueByPath(responseJson, 'data[4].data.NAME');",
                            "    if (x34 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[4].data.NAME', x34);",
                            "    }",
                            "    const x35 = getValueByPath(responseJson, 'data[4].data.ID');",
                            "    if (x35 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[4].data.ID', x35);",
                            "    }",
                            "    const x36 = getValueByPath(responseJson, 'data[4].score');",
                            "    if (x36 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[4].score', x36);",
                            "    }",
                            "    const x37 = getValueByPath(responseJson, 'data[5].data.ZIP');",
                            "    if (x37 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[5].data.ZIP', x37);",
                            "    }",
                            "    const x38 = getValueByPath(responseJson, 'data[5].data.CITY');",
                            "    if (x38 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[5].data.CITY', x38);",
                            "    }",
                            "    const x39 = getValueByPath(responseJson, 'data[5].data.STNAME');",
                            "    if (x39 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[5].data.STNAME', x39);",
                            "    }",
                            "    const x40 = getValueByPath(responseJson, 'data[5].data.NAME');",
                            "    if (x40 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[5].data.NAME', x40);",
                            "    }",
                            "    const x41 = getValueByPath(responseJson, 'data[5].data.ID');",
                            "    if (x41 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[5].data.ID', x41);",
                            "    }",
                            "    const x42 = getValueByPath(responseJson, 'data[5].score');",
                            "    if (x42 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[5].score', x42);",
                            "    }",
                            "    const x43 = getValueByPath(responseJson, 'data[6].data.ZIP');",
                            "    if (x43 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[6].data.ZIP', x43);",
                            "    }",
                            "    const x44 = getValueByPath(responseJson, 'data[6].data.CITY');",
                            "    if (x44 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[6].data.CITY', x44);",
                            "    }",
                            "    const x45 = getValueByPath(responseJson, 'data[6].data.STNAME');",
                            "    if (x45 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[6].data.STNAME', x45);",
                            "    }",
                            "    const x46 = getValueByPath(responseJson, 'data[6].data.NAME');",
                            "    if (x46 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[6].data.NAME', x46);",
                            "    }",
                            "    const x47 = getValueByPath(responseJson, 'data[6].data.ID');",
                            "    if (x47 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[6].data.ID', x47);",
                            "    }",
                            "    const x48 = getValueByPath(responseJson, 'data[6].score');",
                            "    if (x48 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[6].score', x48);",
                            "    }",
                            "    const x49 = getValueByPath(responseJson, 'data[7].data.ZIP');",
                            "    if (x49 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[7].data.ZIP', x49);",
                            "    }",
                            "    const x50 = getValueByPath(responseJson, 'data[7].data.CITY');",
                            "    if (x50 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[7].data.CITY', x50);",
                            "    }",
                            "    const x51 = getValueByPath(responseJson, 'data[7].data.STNAME');",
                            "    if (x51 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[7].data.STNAME', x51);",
                            "    }",
                            "    const x52 = getValueByPath(responseJson, 'data[7].data.NAME');",
                            "    if (x52 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[7].data.NAME', x52);",
                            "    }",
                            "    const x53 = getValueByPath(responseJson, 'data[7].data.ID');",
                            "    if (x53 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[7].data.ID', x53);",
                            "    }",
                            "    const x54 = getValueByPath(responseJson, 'data[7].score');",
                            "    if (x54 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[7].score', x54);",
                            "    }",
                            "    const x55 = getValueByPath(responseJson, 'data[8].data.ZIP');",
                            "    if (x55 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[8].data.ZIP', x55);",
                            "    }",
                            "    const x56 = getValueByPath(responseJson, 'data[8].data.CITY');",
                            "    if (x56 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[8].data.CITY', x56);",
                            "    }",
                            "    const x57 = getValueByPath(responseJson, 'data[8].data.STNAME');",
                            "    if (x57 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[8].data.STNAME', x57);",
                            "    }",
                            "    const x58 = getValueByPath(responseJson, 'data[8].data.NAME');",
                            "    if (x58 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[8].data.NAME', x58);",
                            "    }",
                            "    const x59 = getValueByPath(responseJson, 'data[8].data.ID');",
                            "    if (x59 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[8].data.ID', x59);",
                            "    }",
                            "    const x60 = getValueByPath(responseJson, 'data[8].score');",
                            "    if (x60 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.data[8].score', x60);",
                            "    }",
                            "    const x61 = getValueByPath(responseJson, 'totals.count');",
                            "    if (x61 !== undefined) {",
                            "        pm.collectionVariables.set('searchLocations.response.body.totals.count', x61);",
                            "    }",
                            "",
                            "    // Store response headers",
                            "    pm.response.headers.each(function(header) {",
                            "        pm.collectionVariables.set('searchLocations.response.headers.', header.value);",
                            "    });",
                            "",
                            "    // Store response cookies",
                            "    pm.response.cookies.each(function(cookie) {",
                            "        pm.collectionVariables.set('searchLocations.response.cookies.', cookie.value);",
                            "    });",
                            "",
                            "    // Store status code",
                            "    pm.collectionVariables.set('searchLocations.response.status_code', pm.response.code);",
                            "} catch (error) {",
                            "    console.error('Failed to process response:', error.message);",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.collectionVariables.set('searchLocations.request.query_params.filters', 'CITY%3ACambridge%20AND%20STNAME%3AMaryland');",
                            "pm.collectionVariables.set('searchLocations.request.query_params.fields', 'LOCID,NAME,ADDR,ZIP,CITY,STNAME');",
                            "pm.collectionVariables.set('searchLocations.request.query_params.sort_by', 'NAME');",
                            "pm.collectionVariables.set('searchLocations.request.query_params.sort_order', 'ASC');",
                            "pm.collectionVariables.set('searchLocations.request.query_params.limit', 10);",
                            "pm.collectionVariables.set('searchLocations.request.query_params.offset', 0);",
                            "pm.collectionVariables.set('searchLocations.request.query_params.format', 'json');"
                        ]
                    }
                }
            ]
        },
        {
            "name": "getFailures",
            "request": {
                "method": "GET",
                "header": [],
                "body": null,
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/failures?filters=CERT%3A%2214A761%22%20AND%20CITY%3A%22Cambridge%22%20AND%20CITYST%3A%22Cambridge%2C%20Maryland%22%20AND%20FAILYR%3A%5B%222015%22%20TO%20%222025%22%5D&fields=CERT,NAME,CITY,STNAME,FAILYR,FAILR,FAILRCD&sort_by=FAILYR&sort_order=DESC&limit=100&offset=0&format=json&filename=failures_report",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "failures"
                    ],
                    "query": [
                        {
                            "key": "filters",
                            "value": "CERT%3A%2214A761%22%20AND%20CITY%3A%22Cambridge%22%20AND%20CITYST%3A%22Cambridge%2C%20Maryland%22%20AND%20FAILYR%3A%5B%222015%22%20TO%20%222025%22%5D"
                        },
                        {
                            "key": "fields",
                            "value": "CERT,NAME,CITY,STNAME,FAILYR,FAILR,FAILRCD"
                        },
                        {
                            "key": "sort_by",
                            "value": "FAILYR"
                        },
                        {
                            "key": "sort_order",
                            "value": "DESC"
                        },
                        {
                            "key": "limit",
                            "value": "100"
                        },
                        {
                            "key": "offset",
                            "value": "0"
                        },
                        {
                            "key": "format",
                            "value": "json"
                        },
                        {
                            "key": "filename",
                            "value": "failures_report"
                        }
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 4xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(400, 499);",
                            "});"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.collectionVariables.set('getFailures.request.query_params.filters', 'CERT%3A%2214A761%22%20AND%20CITY%3A%22Cambridge%22%20AND%20CITYST%3A%22Cambridge%2C%20Maryland%22%20AND%20FAILYR%3A%5B%222015%22%20TO%20%222025%22%5D');",
                            "pm.collectionVariables.set('getFailures.request.query_params.fields', 'CERT,NAME,CITY,STNAME,FAILYR,FAILR,FAILRCD');",
                            "pm.collectionVariables.set('getFailures.request.query_params.sort_by', 'FAILYR');",
                            "pm.collectionVariables.set('getFailures.request.query_params.sort_order', 'DESC');",
                            "pm.collectionVariables.set('getFailures.request.query_params.limit', 100);",
                            "pm.collectionVariables.set('getFailures.request.query_params.offset', 0);",
                            "pm.collectionVariables.set('getFailures.request.query_params.format', 'json');",
                            "pm.collectionVariables.set('getFailures.request.query_params.filename', 'failures_report');"
                        ]
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "pm.environment.set('baseUrl', 'https://banks.data.fdic.gov/api');"
                ]
            }
        }
    ]
}