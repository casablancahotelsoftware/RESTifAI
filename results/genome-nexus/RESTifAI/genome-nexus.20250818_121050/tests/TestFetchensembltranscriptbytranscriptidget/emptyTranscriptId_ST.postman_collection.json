{
    "info": {
        "name": "emptyTranscriptId_ST",
        "description": "Change the `transcriptId` path parameter to an empty string, which violates the required non-empty string constraint, e.g., ''",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "fetchCanonicalEnsemblGeneIdByHugoSymbolGET",
            "request": {
                "method": "GET",
                "header": [],
                "body": null,
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/ensembl/canonical-gene/hgnc/:hugoSymbol",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "ensembl",
                        "canonical-gene",
                        "hgnc",
                        ":hugoSymbol"
                    ],
                    "variable": [
                        {
                            "key": "hugoSymbol",
                            "value": "TP53"
                        }
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 2xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(200, 299);",
                            "});",
                            "",
                            "try {",
                            "",
                            "   /**",
                            "    * Gets a value from a nested object using a flattened key path",
                            "    * @param {Object} obj - The object to extract from",
                            "    * @param {string} path - Flattened key path (e.g., 'users[1].role.id')",
                            "    * @return {*} The extracted value or undefined if not found",
                            "    */",
                            "   function getValueByPath(obj, path) {",
                            "       // Handle array notation by splitting correctly",
                            "       const parts = [];",
                            "       let currentPart = '';",
                            "       let inBracket = false;",
                            "",
                            "       // Parse the path maintaining array indexes",
                            "       for (let i = 0; i < path.length; i++) {",
                            "           const char = path[i];",
                            "           if (char === '.' && !inBracket) {",
                            "               if (currentPart) parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else if (char === '[') {",
                            "               inBracket = true;",
                            "               parts.push(currentPart);",
                            "               currentPart = '[';",
                            "           } else if (char === ']') {",
                            "               inBracket = false;",
                            "               currentPart += ']';",
                            "               parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else {",
                            "               currentPart += char;",
                            "           }",
                            "       }",
                            "       if (currentPart) parts.push(currentPart);",
                            "",
                            "       // Navigate through the object",
                            "       let current = obj;",
                            "       for (const part of parts) {",
                            "           if (!current) return undefined;",
                            "",
                            "           if (part.startsWith('[') && part.endsWith(']')) {",
                            "               // Handle array index",
                            "               const index = parseInt(part.substring(1, part.length - 1));",
                            "               if (!Array.isArray(current) || current.length <= index) {",
                            "                   return undefined;",
                            "               }",
                            "               current = current[index];",
                            "           } else {",
                            "               // Handle object property",
                            "               current = current[part];",
                            "           }",
                            "       }",
                            "       return current;",
                            "   }",
                            "",
                            "    // Extract response body values",
                            "    const responseJson = pm.response.json();",
                            "",
                            "    // Store expected body fields",
                            "    const x0 = getValueByPath(responseJson, 'geneId');",
                            "    if (x0 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblGeneIdByHugoSymbolGET.response.body.geneId', x0);",
                            "    }",
                            "    const x1 = getValueByPath(responseJson, 'hugoSymbol');",
                            "    if (x1 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblGeneIdByHugoSymbolGET.response.body.hugoSymbol', x1);",
                            "    }",
                            "    const x2 = getValueByPath(responseJson, 'synonyms[0]');",
                            "    if (x2 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblGeneIdByHugoSymbolGET.response.body.synonyms[0]', x2);",
                            "    }",
                            "    const x3 = getValueByPath(responseJson, 'synonyms[1]');",
                            "    if (x3 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblGeneIdByHugoSymbolGET.response.body.synonyms[1]', x3);",
                            "    }",
                            "    const x4 = getValueByPath(responseJson, 'entrezGeneId');",
                            "    if (x4 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblGeneIdByHugoSymbolGET.response.body.entrezGeneId', x4);",
                            "    }",
                            "",
                            "    // Store response headers",
                            "    pm.response.headers.each(function(header) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblGeneIdByHugoSymbolGET.response.headers.', header.value);",
                            "    });",
                            "",
                            "    // Store response cookies",
                            "    pm.response.cookies.each(function(cookie) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblGeneIdByHugoSymbolGET.response.cookies.', cookie.value);",
                            "    });",
                            "",
                            "    // Store status code",
                            "    pm.collectionVariables.set('fetchCanonicalEnsemblGeneIdByHugoSymbolGET.response.status_code', pm.response.code);",
                            "} catch (error) {",
                            "    console.error('Failed to process response:', error.message);",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.collectionVariables.set('fetchCanonicalEnsemblGeneIdByHugoSymbolGET.request.path_params.hugoSymbol', 'TP53');"
                        ]
                    }
                }
            ]
        },
        {
            "name": "fetchCanonicalEnsemblTranscriptByHugoSymbolGET",
            "request": {
                "method": "GET",
                "header": [],
                "body": null,
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/ensembl/canonical-transcript/hgnc/:hugoSymbol?isoformOverrideSource=uniprot",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "ensembl",
                        "canonical-transcript",
                        "hgnc",
                        ":hugoSymbol"
                    ],
                    "variable": [
                        {
                            "key": "hugoSymbol",
                            "value": "TP53"
                        }
                    ],
                    "query": [
                        {
                            "key": "isoformOverrideSource",
                            "value": "uniprot"
                        }
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 2xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(200, 299);",
                            "});",
                            "",
                            "try {",
                            "",
                            "   /**",
                            "    * Gets a value from a nested object using a flattened key path",
                            "    * @param {Object} obj - The object to extract from",
                            "    * @param {string} path - Flattened key path (e.g., 'users[1].role.id')",
                            "    * @return {*} The extracted value or undefined if not found",
                            "    */",
                            "   function getValueByPath(obj, path) {",
                            "       // Handle array notation by splitting correctly",
                            "       const parts = [];",
                            "       let currentPart = '';",
                            "       let inBracket = false;",
                            "",
                            "       // Parse the path maintaining array indexes",
                            "       for (let i = 0; i < path.length; i++) {",
                            "           const char = path[i];",
                            "           if (char === '.' && !inBracket) {",
                            "               if (currentPart) parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else if (char === '[') {",
                            "               inBracket = true;",
                            "               parts.push(currentPart);",
                            "               currentPart = '[';",
                            "           } else if (char === ']') {",
                            "               inBracket = false;",
                            "               currentPart += ']';",
                            "               parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else {",
                            "               currentPart += char;",
                            "           }",
                            "       }",
                            "       if (currentPart) parts.push(currentPart);",
                            "",
                            "       // Navigate through the object",
                            "       let current = obj;",
                            "       for (const part of parts) {",
                            "           if (!current) return undefined;",
                            "",
                            "           if (part.startsWith('[') && part.endsWith(']')) {",
                            "               // Handle array index",
                            "               const index = parseInt(part.substring(1, part.length - 1));",
                            "               if (!Array.isArray(current) || current.length <= index) {",
                            "                   return undefined;",
                            "               }",
                            "               current = current[index];",
                            "           } else {",
                            "               // Handle object property",
                            "               current = current[part];",
                            "           }",
                            "       }",
                            "       return current;",
                            "   }",
                            "",
                            "    // Extract response body values",
                            "    const responseJson = pm.response.json();",
                            "",
                            "    // Store expected body fields",
                            "    const x0 = getValueByPath(responseJson, 'transcriptId');",
                            "    if (x0 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.transcriptId', x0);",
                            "    }",
                            "    const x1 = getValueByPath(responseJson, 'geneId');",
                            "    if (x1 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.geneId', x1);",
                            "    }",
                            "    const x2 = getValueByPath(responseJson, 'refseqMrnaId');",
                            "    if (x2 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.refseqMrnaId', x2);",
                            "    }",
                            "    const x3 = getValueByPath(responseJson, 'ccdsId');",
                            "    if (x3 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.ccdsId', x3);",
                            "    }",
                            "    const x4 = getValueByPath(responseJson, 'hugoSymbols[0]');",
                            "    if (x4 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.hugoSymbols[0]', x4);",
                            "    }",
                            "    const x5 = getValueByPath(responseJson, 'proteinId');",
                            "    if (x5 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.proteinId', x5);",
                            "    }",
                            "    const x6 = getValueByPath(responseJson, 'proteinLength');",
                            "    if (x6 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.proteinLength', x6);",
                            "    }",
                            "    const x7 = getValueByPath(responseJson, 'pfamDomains[0].pfamDomainId');",
                            "    if (x7 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.pfamDomains[0].pfamDomainId', x7);",
                            "    }",
                            "    const x8 = getValueByPath(responseJson, 'pfamDomains[0].pfamDomainStart');",
                            "    if (x8 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.pfamDomains[0].pfamDomainStart', x8);",
                            "    }",
                            "    const x9 = getValueByPath(responseJson, 'pfamDomains[0].pfamDomainEnd');",
                            "    if (x9 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.pfamDomains[0].pfamDomainEnd', x9);",
                            "    }",
                            "    const x10 = getValueByPath(responseJson, 'pfamDomains[1].pfamDomainId');",
                            "    if (x10 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.pfamDomains[1].pfamDomainId', x10);",
                            "    }",
                            "    const x11 = getValueByPath(responseJson, 'pfamDomains[1].pfamDomainStart');",
                            "    if (x11 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.pfamDomains[1].pfamDomainStart', x11);",
                            "    }",
                            "    const x12 = getValueByPath(responseJson, 'pfamDomains[1].pfamDomainEnd');",
                            "    if (x12 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.pfamDomains[1].pfamDomainEnd', x12);",
                            "    }",
                            "    const x13 = getValueByPath(responseJson, 'pfamDomains[2].pfamDomainId');",
                            "    if (x13 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.pfamDomains[2].pfamDomainId', x13);",
                            "    }",
                            "    const x14 = getValueByPath(responseJson, 'pfamDomains[2].pfamDomainStart');",
                            "    if (x14 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.pfamDomains[2].pfamDomainStart', x14);",
                            "    }",
                            "    const x15 = getValueByPath(responseJson, 'pfamDomains[2].pfamDomainEnd');",
                            "    if (x15 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.pfamDomains[2].pfamDomainEnd', x15);",
                            "    }",
                            "    const x16 = getValueByPath(responseJson, 'exons[0].exonId');",
                            "    if (x16 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[0].exonId', x16);",
                            "    }",
                            "    const x17 = getValueByPath(responseJson, 'exons[0].exonStart');",
                            "    if (x17 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[0].exonStart', x17);",
                            "    }",
                            "    const x18 = getValueByPath(responseJson, 'exons[0].exonEnd');",
                            "    if (x18 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[0].exonEnd', x18);",
                            "    }",
                            "    const x19 = getValueByPath(responseJson, 'exons[0].rank');",
                            "    if (x19 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[0].rank', x19);",
                            "    }",
                            "    const x20 = getValueByPath(responseJson, 'exons[0].strand');",
                            "    if (x20 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[0].strand', x20);",
                            "    }",
                            "    const x21 = getValueByPath(responseJson, 'exons[0].version');",
                            "    if (x21 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[0].version', x21);",
                            "    }",
                            "    const x22 = getValueByPath(responseJson, 'exons[1].exonId');",
                            "    if (x22 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[1].exonId', x22);",
                            "    }",
                            "    const x23 = getValueByPath(responseJson, 'exons[1].exonStart');",
                            "    if (x23 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[1].exonStart', x23);",
                            "    }",
                            "    const x24 = getValueByPath(responseJson, 'exons[1].exonEnd');",
                            "    if (x24 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[1].exonEnd', x24);",
                            "    }",
                            "    const x25 = getValueByPath(responseJson, 'exons[1].rank');",
                            "    if (x25 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[1].rank', x25);",
                            "    }",
                            "    const x26 = getValueByPath(responseJson, 'exons[1].strand');",
                            "    if (x26 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[1].strand', x26);",
                            "    }",
                            "    const x27 = getValueByPath(responseJson, 'exons[1].version');",
                            "    if (x27 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[1].version', x27);",
                            "    }",
                            "    const x28 = getValueByPath(responseJson, 'exons[2].exonId');",
                            "    if (x28 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[2].exonId', x28);",
                            "    }",
                            "    const x29 = getValueByPath(responseJson, 'exons[2].exonStart');",
                            "    if (x29 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[2].exonStart', x29);",
                            "    }",
                            "    const x30 = getValueByPath(responseJson, 'exons[2].exonEnd');",
                            "    if (x30 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[2].exonEnd', x30);",
                            "    }",
                            "    const x31 = getValueByPath(responseJson, 'exons[2].rank');",
                            "    if (x31 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[2].rank', x31);",
                            "    }",
                            "    const x32 = getValueByPath(responseJson, 'exons[2].strand');",
                            "    if (x32 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[2].strand', x32);",
                            "    }",
                            "    const x33 = getValueByPath(responseJson, 'exons[2].version');",
                            "    if (x33 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[2].version', x33);",
                            "    }",
                            "    const x34 = getValueByPath(responseJson, 'exons[3].exonId');",
                            "    if (x34 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[3].exonId', x34);",
                            "    }",
                            "    const x35 = getValueByPath(responseJson, 'exons[3].exonStart');",
                            "    if (x35 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[3].exonStart', x35);",
                            "    }",
                            "    const x36 = getValueByPath(responseJson, 'exons[3].exonEnd');",
                            "    if (x36 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[3].exonEnd', x36);",
                            "    }",
                            "    const x37 = getValueByPath(responseJson, 'exons[3].rank');",
                            "    if (x37 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[3].rank', x37);",
                            "    }",
                            "    const x38 = getValueByPath(responseJson, 'exons[3].strand');",
                            "    if (x38 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[3].strand', x38);",
                            "    }",
                            "    const x39 = getValueByPath(responseJson, 'exons[3].version');",
                            "    if (x39 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[3].version', x39);",
                            "    }",
                            "    const x40 = getValueByPath(responseJson, 'exons[4].exonId');",
                            "    if (x40 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[4].exonId', x40);",
                            "    }",
                            "    const x41 = getValueByPath(responseJson, 'exons[4].exonStart');",
                            "    if (x41 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[4].exonStart', x41);",
                            "    }",
                            "    const x42 = getValueByPath(responseJson, 'exons[4].exonEnd');",
                            "    if (x42 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[4].exonEnd', x42);",
                            "    }",
                            "    const x43 = getValueByPath(responseJson, 'exons[4].rank');",
                            "    if (x43 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[4].rank', x43);",
                            "    }",
                            "    const x44 = getValueByPath(responseJson, 'exons[4].strand');",
                            "    if (x44 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[4].strand', x44);",
                            "    }",
                            "    const x45 = getValueByPath(responseJson, 'exons[4].version');",
                            "    if (x45 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[4].version', x45);",
                            "    }",
                            "    const x46 = getValueByPath(responseJson, 'exons[5].exonId');",
                            "    if (x46 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[5].exonId', x46);",
                            "    }",
                            "    const x47 = getValueByPath(responseJson, 'exons[5].exonStart');",
                            "    if (x47 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[5].exonStart', x47);",
                            "    }",
                            "    const x48 = getValueByPath(responseJson, 'exons[5].exonEnd');",
                            "    if (x48 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[5].exonEnd', x48);",
                            "    }",
                            "    const x49 = getValueByPath(responseJson, 'exons[5].rank');",
                            "    if (x49 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[5].rank', x49);",
                            "    }",
                            "    const x50 = getValueByPath(responseJson, 'exons[5].strand');",
                            "    if (x50 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[5].strand', x50);",
                            "    }",
                            "    const x51 = getValueByPath(responseJson, 'exons[5].version');",
                            "    if (x51 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[5].version', x51);",
                            "    }",
                            "    const x52 = getValueByPath(responseJson, 'exons[6].exonId');",
                            "    if (x52 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[6].exonId', x52);",
                            "    }",
                            "    const x53 = getValueByPath(responseJson, 'exons[6].exonStart');",
                            "    if (x53 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[6].exonStart', x53);",
                            "    }",
                            "    const x54 = getValueByPath(responseJson, 'exons[6].exonEnd');",
                            "    if (x54 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[6].exonEnd', x54);",
                            "    }",
                            "    const x55 = getValueByPath(responseJson, 'exons[6].rank');",
                            "    if (x55 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[6].rank', x55);",
                            "    }",
                            "    const x56 = getValueByPath(responseJson, 'exons[6].strand');",
                            "    if (x56 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[6].strand', x56);",
                            "    }",
                            "    const x57 = getValueByPath(responseJson, 'exons[6].version');",
                            "    if (x57 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[6].version', x57);",
                            "    }",
                            "    const x58 = getValueByPath(responseJson, 'exons[7].exonId');",
                            "    if (x58 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[7].exonId', x58);",
                            "    }",
                            "    const x59 = getValueByPath(responseJson, 'exons[7].exonStart');",
                            "    if (x59 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[7].exonStart', x59);",
                            "    }",
                            "    const x60 = getValueByPath(responseJson, 'exons[7].exonEnd');",
                            "    if (x60 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[7].exonEnd', x60);",
                            "    }",
                            "    const x61 = getValueByPath(responseJson, 'exons[7].rank');",
                            "    if (x61 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[7].rank', x61);",
                            "    }",
                            "    const x62 = getValueByPath(responseJson, 'exons[7].strand');",
                            "    if (x62 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[7].strand', x62);",
                            "    }",
                            "    const x63 = getValueByPath(responseJson, 'exons[7].version');",
                            "    if (x63 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[7].version', x63);",
                            "    }",
                            "    const x64 = getValueByPath(responseJson, 'exons[8].exonId');",
                            "    if (x64 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[8].exonId', x64);",
                            "    }",
                            "    const x65 = getValueByPath(responseJson, 'exons[8].exonStart');",
                            "    if (x65 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[8].exonStart', x65);",
                            "    }",
                            "    const x66 = getValueByPath(responseJson, 'exons[8].exonEnd');",
                            "    if (x66 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[8].exonEnd', x66);",
                            "    }",
                            "    const x67 = getValueByPath(responseJson, 'exons[8].rank');",
                            "    if (x67 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[8].rank', x67);",
                            "    }",
                            "    const x68 = getValueByPath(responseJson, 'exons[8].strand');",
                            "    if (x68 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[8].strand', x68);",
                            "    }",
                            "    const x69 = getValueByPath(responseJson, 'exons[8].version');",
                            "    if (x69 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[8].version', x69);",
                            "    }",
                            "    const x70 = getValueByPath(responseJson, 'exons[9].exonId');",
                            "    if (x70 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[9].exonId', x70);",
                            "    }",
                            "    const x71 = getValueByPath(responseJson, 'exons[9].exonStart');",
                            "    if (x71 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[9].exonStart', x71);",
                            "    }",
                            "    const x72 = getValueByPath(responseJson, 'exons[9].exonEnd');",
                            "    if (x72 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[9].exonEnd', x72);",
                            "    }",
                            "    const x73 = getValueByPath(responseJson, 'exons[9].rank');",
                            "    if (x73 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[9].rank', x73);",
                            "    }",
                            "    const x74 = getValueByPath(responseJson, 'exons[9].strand');",
                            "    if (x74 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[9].strand', x74);",
                            "    }",
                            "    const x75 = getValueByPath(responseJson, 'exons[9].version');",
                            "    if (x75 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[9].version', x75);",
                            "    }",
                            "    const x76 = getValueByPath(responseJson, 'exons[10].exonId');",
                            "    if (x76 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[10].exonId', x76);",
                            "    }",
                            "    const x77 = getValueByPath(responseJson, 'exons[10].exonStart');",
                            "    if (x77 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[10].exonStart', x77);",
                            "    }",
                            "    const x78 = getValueByPath(responseJson, 'exons[10].exonEnd');",
                            "    if (x78 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[10].exonEnd', x78);",
                            "    }",
                            "    const x79 = getValueByPath(responseJson, 'exons[10].rank');",
                            "    if (x79 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[10].rank', x79);",
                            "    }",
                            "    const x80 = getValueByPath(responseJson, 'exons[10].strand');",
                            "    if (x80 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[10].strand', x80);",
                            "    }",
                            "    const x81 = getValueByPath(responseJson, 'exons[10].version');",
                            "    if (x81 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.exons[10].version', x81);",
                            "    }",
                            "    const x82 = getValueByPath(responseJson, 'utrs[0].type');",
                            "    if (x82 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.utrs[0].type', x82);",
                            "    }",
                            "    const x83 = getValueByPath(responseJson, 'utrs[0].start');",
                            "    if (x83 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.utrs[0].start', x83);",
                            "    }",
                            "    const x84 = getValueByPath(responseJson, 'utrs[0].end');",
                            "    if (x84 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.utrs[0].end', x84);",
                            "    }",
                            "    const x85 = getValueByPath(responseJson, 'utrs[0].strand');",
                            "    if (x85 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.utrs[0].strand', x85);",
                            "    }",
                            "    const x86 = getValueByPath(responseJson, 'utrs[1].type');",
                            "    if (x86 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.utrs[1].type', x86);",
                            "    }",
                            "    const x87 = getValueByPath(responseJson, 'utrs[1].start');",
                            "    if (x87 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.utrs[1].start', x87);",
                            "    }",
                            "    const x88 = getValueByPath(responseJson, 'utrs[1].end');",
                            "    if (x88 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.utrs[1].end', x88);",
                            "    }",
                            "    const x89 = getValueByPath(responseJson, 'utrs[1].strand');",
                            "    if (x89 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.utrs[1].strand', x89);",
                            "    }",
                            "    const x90 = getValueByPath(responseJson, 'utrs[2].type');",
                            "    if (x90 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.utrs[2].type', x90);",
                            "    }",
                            "    const x91 = getValueByPath(responseJson, 'utrs[2].start');",
                            "    if (x91 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.utrs[2].start', x91);",
                            "    }",
                            "    const x92 = getValueByPath(responseJson, 'utrs[2].end');",
                            "    if (x92 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.utrs[2].end', x92);",
                            "    }",
                            "    const x93 = getValueByPath(responseJson, 'utrs[2].strand');",
                            "    if (x93 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.utrs[2].strand', x93);",
                            "    }",
                            "    const x94 = getValueByPath(responseJson, 'uniprotId');",
                            "    if (x94 !== undefined) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.body.uniprotId', x94);",
                            "    }",
                            "",
                            "    // Store response headers",
                            "    pm.response.headers.each(function(header) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.headers.', header.value);",
                            "    });",
                            "",
                            "    // Store response cookies",
                            "    pm.response.cookies.each(function(cookie) {",
                            "        pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.cookies.', cookie.value);",
                            "    });",
                            "",
                            "    // Store status code",
                            "    pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.response.status_code', pm.response.code);",
                            "} catch (error) {",
                            "    console.error('Failed to process response:', error.message);",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.request.path_params.hugoSymbol', 'TP53');",
                            "pm.collectionVariables.set('fetchCanonicalEnsemblTranscriptByHugoSymbolGET.request.query_params.isoformOverrideSource', 'uniprot');"
                        ]
                    }
                }
            ]
        },
        {
            "name": "fetchEnsemblTranscriptByTranscriptIdGET",
            "request": {
                "method": "GET",
                "header": [],
                "body": null,
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/ensembl/transcript/",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "ensembl",
                        "transcript",
                        ""
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 4xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(400, 499);",
                            "});"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.collectionVariables.set('fetchEnsemblTranscriptByTranscriptIdGET.request.path_params.transcriptId', '');"
                        ]
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "pm.environment.set('baseUrl', 'http://localhost:9000');"
                ]
            }
        }
    ]
}