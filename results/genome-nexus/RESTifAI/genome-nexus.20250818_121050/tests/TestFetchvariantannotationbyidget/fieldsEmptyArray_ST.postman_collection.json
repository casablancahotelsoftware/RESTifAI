{
    "info": {
        "name": "fieldsEmptyArray_ST",
        "description": "Set the query parameter `fields` to an empty array [], violating the minItems constraint if defined (array must have at least one item)",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "fetchVariantAnnotationByGenomicLocationPOST",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "[\n  {\n    \"chromosome\": \"17\",\n    \"start\": 43044295,\n    \"end\": 43044295,\n    \"referenceAllele\": \"C\",\n    \"variantAllele\": \"T\"\n  }\n]",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/annotation/genomic?isoformOverrideSource=uniprot&token=%7B%22source1%22%3A%22put-your-token1-here%22%2C%22source2%22%3A%22put-your-token2-here%22%7D&fields=[]",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "annotation",
                        "genomic"
                    ],
                    "query": [
                        {
                            "key": "isoformOverrideSource",
                            "value": "uniprot"
                        },
                        {
                            "key": "token",
                            "value": "%7B%22source1%22%3A%22put-your-token1-here%22%2C%22source2%22%3A%22put-your-token2-here%22%7D"
                        },
                        {
                            "key": "fields",
                            "value": "[]"
                        }
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 4xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(400, 499);",
                            "});"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.collectionVariables.set('fetchVariantAnnotationByGenomicLocationPOST.request.query_params.isoformOverrideSource', 'uniprot');",
                            "pm.collectionVariables.set('fetchVariantAnnotationByGenomicLocationPOST.request.query_params.token', '%7B%22source1%22%3A%22put-your-token1-here%22%2C%22source2%22%3A%22put-your-token2-here%22%7D');",
                            "pm.collectionVariables.set('fetchVariantAnnotationByGenomicLocationPOST.request.query_params.fields', []);",
                            "pm.collectionVariables.set('fetchVariantAnnotationByGenomicLocationPOST.request.headers.Content-Type', 'application/json');",
                            "pm.collectionVariables.set('fetchVariantAnnotationByGenomicLocationPOST.request.body.[0].chromosome', '17');",
                            "pm.collectionVariables.set('fetchVariantAnnotationByGenomicLocationPOST.request.body.[0].start', 43044295);",
                            "pm.collectionVariables.set('fetchVariantAnnotationByGenomicLocationPOST.request.body.[0].end', 43044295);",
                            "pm.collectionVariables.set('fetchVariantAnnotationByGenomicLocationPOST.request.body.[0].referenceAllele', 'C');",
                            "pm.collectionVariables.set('fetchVariantAnnotationByGenomicLocationPOST.request.body.[0].variantAllele', 'T');"
                        ]
                    }
                }
            ]
        },
        {
            "name": "fetchVariantAnnotationByIdGET",
            "request": {
                "method": "GET",
                "header": [],
                "body": null,
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/annotation/dbsnp/:variantId?isoformOverrideSource=uniprot&token=%7B%22source1%22%3A%22put-your-token1-here%22%2C%22source2%22%3A%22put-your-token2-here%22%7D&fields=annotation_summary",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "annotation",
                        "dbsnp",
                        ":variantId"
                    ],
                    "variable": [
                        {
                            "key": "variantId",
                            "value": "{{fetchVariantAnnotationByIdGET.request.path_params.variantId}}"
                        }
                    ],
                    "query": [
                        {
                            "key": "isoformOverrideSource",
                            "value": "uniprot"
                        },
                        {
                            "key": "token",
                            "value": "%7B%22source1%22%3A%22put-your-token1-here%22%2C%22source2%22%3A%22put-your-token2-here%22%7D"
                        },
                        {
                            "key": "fields",
                            "value": "annotation_summary"
                        }
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 2xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(200, 299);",
                            "});",
                            "",
                            "try {",
                            "",
                            "   /**",
                            "    * Gets a value from a nested object using a flattened key path",
                            "    * @param {Object} obj - The object to extract from",
                            "    * @param {string} path - Flattened key path (e.g., 'users[1].role.id')",
                            "    * @return {*} The extracted value or undefined if not found",
                            "    */",
                            "   function getValueByPath(obj, path) {",
                            "       // Handle array notation by splitting correctly",
                            "       const parts = [];",
                            "       let currentPart = '';",
                            "       let inBracket = false;",
                            "",
                            "       // Parse the path maintaining array indexes",
                            "       for (let i = 0; i < path.length; i++) {",
                            "           const char = path[i];",
                            "           if (char === '.' && !inBracket) {",
                            "               if (currentPart) parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else if (char === '[') {",
                            "               inBracket = true;",
                            "               parts.push(currentPart);",
                            "               currentPart = '[';",
                            "           } else if (char === ']') {",
                            "               inBracket = false;",
                            "               currentPart += ']';",
                            "               parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else {",
                            "               currentPart += char;",
                            "           }",
                            "       }",
                            "       if (currentPart) parts.push(currentPart);",
                            "",
                            "       // Navigate through the object",
                            "       let current = obj;",
                            "       for (const part of parts) {",
                            "           if (!current) return undefined;",
                            "",
                            "           if (part.startsWith('[') && part.endsWith(']')) {",
                            "               // Handle array index",
                            "               const index = parseInt(part.substring(1, part.length - 1));",
                            "               if (!Array.isArray(current) || current.length <= index) {",
                            "                   return undefined;",
                            "               }",
                            "               current = current[index];",
                            "           } else {",
                            "               // Handle object property",
                            "               current = current[part];",
                            "           }",
                            "       }",
                            "       return current;",
                            "   }",
                            "",
                            "    // Extract response body values",
                            "    const responseJson = pm.response.json();",
                            "",
                            "    // Store expected body fields",
                            "    const x0 = getValueByPath(responseJson, 'variant');",
                            "    if (x0 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.variant', x0);",
                            "    }",
                            "    const x1 = getValueByPath(responseJson, 'colocatedVariants[0].dbSnpId');",
                            "    if (x1 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.colocatedVariants[0].dbSnpId', x1);",
                            "    }",
                            "    const x2 = getValueByPath(responseJson, 'originalVariantQuery');",
                            "    if (x2 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.originalVariantQuery', x2);",
                            "    }",
                            "    const x3 = getValueByPath(responseJson, 'id');",
                            "    if (x3 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.id', x3);",
                            "    }",
                            "    const x4 = getValueByPath(responseJson, 'assembly_name');",
                            "    if (x4 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.assembly_name', x4);",
                            "    }",
                            "    const x5 = getValueByPath(responseJson, 'seq_region_name');",
                            "    if (x5 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.seq_region_name', x5);",
                            "    }",
                            "    const x6 = getValueByPath(responseJson, 'start');",
                            "    if (x6 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.start', x6);",
                            "    }",
                            "    const x7 = getValueByPath(responseJson, 'end');",
                            "    if (x7 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.end', x7);",
                            "    }",
                            "    const x8 = getValueByPath(responseJson, 'allele_string');",
                            "    if (x8 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.allele_string', x8);",
                            "    }",
                            "    const x9 = getValueByPath(responseJson, 'strand');",
                            "    if (x9 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.strand', x9);",
                            "    }",
                            "    const x10 = getValueByPath(responseJson, 'most_severe_consequence');",
                            "    if (x10 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.most_severe_consequence', x10);",
                            "    }",
                            "    const x11 = getValueByPath(responseJson, 'transcript_consequences[0].transcript_id');",
                            "    if (x11 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.transcript_consequences[0].transcript_id', x11);",
                            "    }",
                            "    const x12 = getValueByPath(responseJson, 'transcript_consequences[0].hgvsc');",
                            "    if (x12 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.transcript_consequences[0].hgvsc', x12);",
                            "    }",
                            "    const x13 = getValueByPath(responseJson, 'transcript_consequences[0].variant_allele');",
                            "    if (x13 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.transcript_consequences[0].variant_allele', x13);",
                            "    }",
                            "    const x14 = getValueByPath(responseJson, 'transcript_consequences[0].protein_id');",
                            "    if (x14 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.transcript_consequences[0].protein_id', x14);",
                            "    }",
                            "    const x15 = getValueByPath(responseJson, 'transcript_consequences[0].gene_symbol');",
                            "    if (x15 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.transcript_consequences[0].gene_symbol', x15);",
                            "    }",
                            "    const x16 = getValueByPath(responseJson, 'transcript_consequences[0].gene_id');",
                            "    if (x16 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.transcript_consequences[0].gene_id', x16);",
                            "    }",
                            "    const x17 = getValueByPath(responseJson, 'transcript_consequences[0].hgnc_id');",
                            "    if (x17 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.transcript_consequences[0].hgnc_id', x17);",
                            "    }",
                            "    const x18 = getValueByPath(responseJson, 'transcript_consequences[0].canonical');",
                            "    if (x18 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.transcript_consequences[0].canonical', x18);",
                            "    }",
                            "    const x19 = getValueByPath(responseJson, 'transcript_consequences[0].refseq_transcript_ids[0]');",
                            "    if (x19 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.transcript_consequences[0].refseq_transcript_ids[0]', x19);",
                            "    }",
                            "    const x20 = getValueByPath(responseJson, 'transcript_consequences[0].consequence_terms[0]');",
                            "    if (x20 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.transcript_consequences[0].consequence_terms[0]', x20);",
                            "    }",
                            "    const x21 = getValueByPath(responseJson, 'successfully_annotated');",
                            "    if (x21 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.successfully_annotated', x21);",
                            "    }",
                            "    const x22 = getValueByPath(responseJson, 'annotation_summary.variant');",
                            "    if (x22 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.variant', x22);",
                            "    }",
                            "    const x23 = getValueByPath(responseJson, 'annotation_summary.genomicLocation.chromosome');",
                            "    if (x23 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.genomicLocation.chromosome', x23);",
                            "    }",
                            "    const x24 = getValueByPath(responseJson, 'annotation_summary.genomicLocation.start');",
                            "    if (x24 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.genomicLocation.start', x24);",
                            "    }",
                            "    const x25 = getValueByPath(responseJson, 'annotation_summary.genomicLocation.end');",
                            "    if (x25 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.genomicLocation.end', x25);",
                            "    }",
                            "    const x26 = getValueByPath(responseJson, 'annotation_summary.genomicLocation.referenceAllele');",
                            "    if (x26 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.genomicLocation.referenceAllele', x26);",
                            "    }",
                            "    const x27 = getValueByPath(responseJson, 'annotation_summary.genomicLocation.variantAllele');",
                            "    if (x27 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.genomicLocation.variantAllele', x27);",
                            "    }",
                            "    const x28 = getValueByPath(responseJson, 'annotation_summary.strandSign');",
                            "    if (x28 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.strandSign', x28);",
                            "    }",
                            "    const x29 = getValueByPath(responseJson, 'annotation_summary.variantType');",
                            "    if (x29 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.variantType', x29);",
                            "    }",
                            "    const x30 = getValueByPath(responseJson, 'annotation_summary.assemblyName');",
                            "    if (x30 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.assemblyName', x30);",
                            "    }",
                            "    const x31 = getValueByPath(responseJson, 'annotation_summary.canonicalTranscriptId');",
                            "    if (x31 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.canonicalTranscriptId', x31);",
                            "    }",
                            "    const x32 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequences[0].transcriptId');",
                            "    if (x32 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequences[0].transcriptId', x32);",
                            "    }",
                            "    const x33 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequences[0].entrezGeneId');",
                            "    if (x33 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequences[0].entrezGeneId', x33);",
                            "    }",
                            "    const x34 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequences[0].consequenceTerms');",
                            "    if (x34 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequences[0].consequenceTerms', x34);",
                            "    }",
                            "    const x35 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequences[0].hugoGeneSymbol');",
                            "    if (x35 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequences[0].hugoGeneSymbol', x35);",
                            "    }",
                            "    const x36 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequences[0].hgvspShort');",
                            "    if (x36 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequences[0].hgvspShort', x36);",
                            "    }",
                            "    const x37 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequences[0].hgvsc');",
                            "    if (x37 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequences[0].hgvsc', x37);",
                            "    }",
                            "    const x38 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequences[0].refSeq');",
                            "    if (x38 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequences[0].refSeq', x38);",
                            "    }",
                            "    const x39 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequences[0].variantClassification');",
                            "    if (x39 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequences[0].variantClassification', x39);",
                            "    }",
                            "    const x40 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequences[0].uniprotId');",
                            "    if (x40 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequences[0].uniprotId', x40);",
                            "    }",
                            "    const x41 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummaries[0].transcriptId');",
                            "    if (x41 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummaries[0].transcriptId', x41);",
                            "    }",
                            "    const x42 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummaries[0].entrezGeneId');",
                            "    if (x42 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummaries[0].entrezGeneId', x42);",
                            "    }",
                            "    const x43 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummaries[0].consequenceTerms');",
                            "    if (x43 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummaries[0].consequenceTerms', x43);",
                            "    }",
                            "    const x44 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummaries[0].hugoGeneSymbol');",
                            "    if (x44 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummaries[0].hugoGeneSymbol', x44);",
                            "    }",
                            "    const x45 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummaries[0].hgvspShort');",
                            "    if (x45 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummaries[0].hgvspShort', x45);",
                            "    }",
                            "    const x46 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummaries[0].hgvsc');",
                            "    if (x46 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummaries[0].hgvsc', x46);",
                            "    }",
                            "    const x47 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummaries[0].refSeq');",
                            "    if (x47 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummaries[0].refSeq', x47);",
                            "    }",
                            "    const x48 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummaries[0].variantClassification');",
                            "    if (x48 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummaries[0].variantClassification', x48);",
                            "    }",
                            "    const x49 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummaries[0].uniprotId');",
                            "    if (x49 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummaries[0].uniprotId', x49);",
                            "    }",
                            "    const x50 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummary.transcriptId');",
                            "    if (x50 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummary.transcriptId', x50);",
                            "    }",
                            "    const x51 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummary.entrezGeneId');",
                            "    if (x51 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummary.entrezGeneId', x51);",
                            "    }",
                            "    const x52 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummary.consequenceTerms');",
                            "    if (x52 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummary.consequenceTerms', x52);",
                            "    }",
                            "    const x53 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummary.hugoGeneSymbol');",
                            "    if (x53 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummary.hugoGeneSymbol', x53);",
                            "    }",
                            "    const x54 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummary.hgvspShort');",
                            "    if (x54 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummary.hgvspShort', x54);",
                            "    }",
                            "    const x55 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummary.hgvsc');",
                            "    if (x55 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummary.hgvsc', x55);",
                            "    }",
                            "    const x56 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummary.refSeq');",
                            "    if (x56 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummary.refSeq', x56);",
                            "    }",
                            "    const x57 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummary.variantClassification');",
                            "    if (x57 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummary.variantClassification', x57);",
                            "    }",
                            "    const x58 = getValueByPath(responseJson, 'annotation_summary.transcriptConsequenceSummary.uniprotId');",
                            "    if (x58 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.body.annotation_summary.transcriptConsequenceSummary.uniprotId', x58);",
                            "    }",
                            "",
                            "    // Store response headers",
                            "    pm.response.headers.each(function(header) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.headers.', header.value);",
                            "    });",
                            "",
                            "    // Store response cookies",
                            "    pm.response.cookies.each(function(cookie) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.cookies.', cookie.value);",
                            "    });",
                            "",
                            "    // Store status code",
                            "    pm.collectionVariables.set('fetchVariantAnnotationByIdGET.response.status_code', pm.response.code);",
                            "} catch (error) {",
                            "    console.error('Failed to process response:', error.message);",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.collectionVariables.set('fetchVariantAnnotationByIdGET.request.path_params.variantId', pm.collectionVariables.get('fetchVariantAnnotationByGenomicLocationPOST.response.body[0].colocatedVariants[0].dbSnpId'));",
                            "pm.collectionVariables.set('fetchVariantAnnotationByIdGET.request.query_params.isoformOverrideSource', 'uniprot');",
                            "pm.collectionVariables.set('fetchVariantAnnotationByIdGET.request.query_params.token', '%7B%22source1%22%3A%22put-your-token1-here%22%2C%22source2%22%3A%22put-your-token2-here%22%7D');",
                            "pm.collectionVariables.set('fetchVariantAnnotationByIdGET.request.query_params.fields', 'annotation_summary');"
                        ]
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "pm.environment.set('baseUrl', 'http://localhost:9000');"
                ]
            }
        }
    ]
}