{
    "info": {
        "name": "validRequest",
        "description": "This test case tests the endpoint for valid data and expects a successful response from the service",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "fetchVersionGET",
            "request": {
                "method": "GET",
                "header": [],
                "body": null,
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/version",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "version"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 2xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(200, 299);",
                            "});",
                            "",
                            "try {",
                            "",
                            "   /**",
                            "    * Gets a value from a nested object using a flattened key path",
                            "    * @param {Object} obj - The object to extract from",
                            "    * @param {string} path - Flattened key path (e.g., 'users[1].role.id')",
                            "    * @return {*} The extracted value or undefined if not found",
                            "    */",
                            "   function getValueByPath(obj, path) {",
                            "       // Handle array notation by splitting correctly",
                            "       const parts = [];",
                            "       let currentPart = '';",
                            "       let inBracket = false;",
                            "",
                            "       // Parse the path maintaining array indexes",
                            "       for (let i = 0; i < path.length; i++) {",
                            "           const char = path[i];",
                            "           if (char === '.' && !inBracket) {",
                            "               if (currentPart) parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else if (char === '[') {",
                            "               inBracket = true;",
                            "               parts.push(currentPart);",
                            "               currentPart = '[';",
                            "           } else if (char === ']') {",
                            "               inBracket = false;",
                            "               currentPart += ']';",
                            "               parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else {",
                            "               currentPart += char;",
                            "           }",
                            "       }",
                            "       if (currentPart) parts.push(currentPart);",
                            "",
                            "       // Navigate through the object",
                            "       let current = obj;",
                            "       for (const part of parts) {",
                            "           if (!current) return undefined;",
                            "",
                            "           if (part.startsWith('[') && part.endsWith(']')) {",
                            "               // Handle array index",
                            "               const index = parseInt(part.substring(1, part.length - 1));",
                            "               if (!Array.isArray(current) || current.length <= index) {",
                            "                   return undefined;",
                            "               }",
                            "               current = current[index];",
                            "           } else {",
                            "               // Handle object property",
                            "               current = current[part];",
                            "           }",
                            "       }",
                            "       return current;",
                            "   }",
                            "",
                            "    // Extract response body values",
                            "    const responseJson = pm.response.json();",
                            "",
                            "    // Store expected body fields",
                            "    const x0 = getValueByPath(responseJson, 'genomeNexus.server.version');",
                            "    if (x0 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.genomeNexus.server.version', x0);",
                            "    }",
                            "    const x1 = getValueByPath(responseJson, 'genomeNexus.server.static');",
                            "    if (x1 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.genomeNexus.server.static', x1);",
                            "    }",
                            "    const x2 = getValueByPath(responseJson, 'genomeNexus.database.version');",
                            "    if (x2 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.genomeNexus.database.version', x2);",
                            "    }",
                            "    const x3 = getValueByPath(responseJson, 'genomeNexus.database.static');",
                            "    if (x3 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.genomeNexus.database.static', x3);",
                            "    }",
                            "    const x4 = getValueByPath(responseJson, 'vep.server.version');",
                            "    if (x4 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.vep.server.version', x4);",
                            "    }",
                            "    const x5 = getValueByPath(responseJson, 'vep.server.static');",
                            "    if (x5 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.vep.server.static', x5);",
                            "    }",
                            "    const x6 = getValueByPath(responseJson, 'vep.cache.version');",
                            "    if (x6 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.vep.cache.version', x6);",
                            "    }",
                            "    const x7 = getValueByPath(responseJson, 'vep.cache.static');",
                            "    if (x7 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.vep.cache.static', x7);",
                            "    }",
                            "    const x8 = getValueByPath(responseJson, 'vep.comment');",
                            "    if (x8 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.vep.comment', x8);",
                            "    }",
                            "    const x9 = getValueByPath(responseJson, 'annotationSourcesInfo[0].id');",
                            "    if (x9 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[0].id', x9);",
                            "    }",
                            "    const x10 = getValueByPath(responseJson, 'annotationSourcesInfo[0].name');",
                            "    if (x10 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[0].name', x10);",
                            "    }",
                            "    const x11 = getValueByPath(responseJson, 'annotationSourcesInfo[0].version');",
                            "    if (x11 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[0].version', x11);",
                            "    }",
                            "    const x12 = getValueByPath(responseJson, 'annotationSourcesInfo[0].type');",
                            "    if (x12 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[0].type', x12);",
                            "    }",
                            "    const x13 = getValueByPath(responseJson, 'annotationSourcesInfo[0].description');",
                            "    if (x13 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[0].description', x13);",
                            "    }",
                            "    const x14 = getValueByPath(responseJson, 'annotationSourcesInfo[0].url');",
                            "    if (x14 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[0].url', x14);",
                            "    }",
                            "    const x15 = getValueByPath(responseJson, 'annotationSourcesInfo[1].id');",
                            "    if (x15 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[1].id', x15);",
                            "    }",
                            "    const x16 = getValueByPath(responseJson, 'annotationSourcesInfo[1].name');",
                            "    if (x16 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[1].name', x16);",
                            "    }",
                            "    const x17 = getValueByPath(responseJson, 'annotationSourcesInfo[1].version');",
                            "    if (x17 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[1].version', x17);",
                            "    }",
                            "    const x18 = getValueByPath(responseJson, 'annotationSourcesInfo[1].type');",
                            "    if (x18 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[1].type', x18);",
                            "    }",
                            "    const x19 = getValueByPath(responseJson, 'annotationSourcesInfo[1].description');",
                            "    if (x19 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[1].description', x19);",
                            "    }",
                            "    const x20 = getValueByPath(responseJson, 'annotationSourcesInfo[1].url');",
                            "    if (x20 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[1].url', x20);",
                            "    }",
                            "    const x21 = getValueByPath(responseJson, 'annotationSourcesInfo[2].id');",
                            "    if (x21 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[2].id', x21);",
                            "    }",
                            "    const x22 = getValueByPath(responseJson, 'annotationSourcesInfo[2].name');",
                            "    if (x22 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[2].name', x22);",
                            "    }",
                            "    const x23 = getValueByPath(responseJson, 'annotationSourcesInfo[2].version');",
                            "    if (x23 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[2].version', x23);",
                            "    }",
                            "    const x24 = getValueByPath(responseJson, 'annotationSourcesInfo[2].type');",
                            "    if (x24 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[2].type', x24);",
                            "    }",
                            "    const x25 = getValueByPath(responseJson, 'annotationSourcesInfo[2].description');",
                            "    if (x25 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[2].description', x25);",
                            "    }",
                            "    const x26 = getValueByPath(responseJson, 'annotationSourcesInfo[2].url');",
                            "    if (x26 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[2].url', x26);",
                            "    }",
                            "    const x27 = getValueByPath(responseJson, 'annotationSourcesInfo[3].id');",
                            "    if (x27 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[3].id', x27);",
                            "    }",
                            "    const x28 = getValueByPath(responseJson, 'annotationSourcesInfo[3].name');",
                            "    if (x28 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[3].name', x28);",
                            "    }",
                            "    const x29 = getValueByPath(responseJson, 'annotationSourcesInfo[3].version');",
                            "    if (x29 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[3].version', x29);",
                            "    }",
                            "    const x30 = getValueByPath(responseJson, 'annotationSourcesInfo[3].type');",
                            "    if (x30 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[3].type', x30);",
                            "    }",
                            "    const x31 = getValueByPath(responseJson, 'annotationSourcesInfo[3].description');",
                            "    if (x31 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[3].description', x31);",
                            "    }",
                            "    const x32 = getValueByPath(responseJson, 'annotationSourcesInfo[3].url');",
                            "    if (x32 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[3].url', x32);",
                            "    }",
                            "    const x33 = getValueByPath(responseJson, 'annotationSourcesInfo[4].id');",
                            "    if (x33 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[4].id', x33);",
                            "    }",
                            "    const x34 = getValueByPath(responseJson, 'annotationSourcesInfo[4].name');",
                            "    if (x34 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[4].name', x34);",
                            "    }",
                            "    const x35 = getValueByPath(responseJson, 'annotationSourcesInfo[4].version');",
                            "    if (x35 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[4].version', x35);",
                            "    }",
                            "    const x36 = getValueByPath(responseJson, 'annotationSourcesInfo[4].type');",
                            "    if (x36 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[4].type', x36);",
                            "    }",
                            "    const x37 = getValueByPath(responseJson, 'annotationSourcesInfo[4].description');",
                            "    if (x37 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[4].description', x37);",
                            "    }",
                            "    const x38 = getValueByPath(responseJson, 'annotationSourcesInfo[4].url');",
                            "    if (x38 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[4].url', x38);",
                            "    }",
                            "    const x39 = getValueByPath(responseJson, 'annotationSourcesInfo[5].id');",
                            "    if (x39 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[5].id', x39);",
                            "    }",
                            "    const x40 = getValueByPath(responseJson, 'annotationSourcesInfo[5].name');",
                            "    if (x40 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[5].name', x40);",
                            "    }",
                            "    const x41 = getValueByPath(responseJson, 'annotationSourcesInfo[5].version');",
                            "    if (x41 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[5].version', x41);",
                            "    }",
                            "    const x42 = getValueByPath(responseJson, 'annotationSourcesInfo[5].type');",
                            "    if (x42 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[5].type', x42);",
                            "    }",
                            "    const x43 = getValueByPath(responseJson, 'annotationSourcesInfo[5].description');",
                            "    if (x43 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[5].description', x43);",
                            "    }",
                            "    const x44 = getValueByPath(responseJson, 'annotationSourcesInfo[5].url');",
                            "    if (x44 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[5].url', x44);",
                            "    }",
                            "    const x45 = getValueByPath(responseJson, 'annotationSourcesInfo[6].id');",
                            "    if (x45 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[6].id', x45);",
                            "    }",
                            "    const x46 = getValueByPath(responseJson, 'annotationSourcesInfo[6].name');",
                            "    if (x46 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[6].name', x46);",
                            "    }",
                            "    const x47 = getValueByPath(responseJson, 'annotationSourcesInfo[6].version');",
                            "    if (x47 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[6].version', x47);",
                            "    }",
                            "    const x48 = getValueByPath(responseJson, 'annotationSourcesInfo[6].type');",
                            "    if (x48 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[6].type', x48);",
                            "    }",
                            "    const x49 = getValueByPath(responseJson, 'annotationSourcesInfo[6].description');",
                            "    if (x49 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[6].description', x49);",
                            "    }",
                            "    const x50 = getValueByPath(responseJson, 'annotationSourcesInfo[6].url');",
                            "    if (x50 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.body.annotationSourcesInfo[6].url', x50);",
                            "    }",
                            "",
                            "    // Store response headers",
                            "    pm.response.headers.each(function(header) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.headers.', header.value);",
                            "    });",
                            "",
                            "    // Store response cookies",
                            "    pm.response.cookies.each(function(cookie) {",
                            "        pm.collectionVariables.set('fetchVersionGET.response.cookies.', cookie.value);",
                            "    });",
                            "",
                            "    // Store status code",
                            "    pm.collectionVariables.set('fetchVersionGET.response.status_code', pm.response.code);",
                            "} catch (error) {",
                            "    console.error('Failed to process response:', error.message);",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": []
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "pm.environment.set('baseUrl', 'http://localhost:9000');"
                ]
            }
        }
    ]
}