{
    "info": {
        "name": "tokenInvalidJsonString_ST",
        "description": "Set the query parameter `token` to a string that is not a valid JSON object, e.g., '{source1:token1, source2:token2}' (missing quotes)",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "fetchVariantAnnotationPOST",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "[\n  \"17:g.41242962_41242963insGA\",\n  \"NM_000546.5:c.215C>G\",\n  \"chr7:g.140453136A>T\"\n]",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/annotation?isoformOverrideSource=uniprot&token=%7Bsource1%3Atoken1%2C%20source2%3Atoken2%7D&fields=hotspots",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "annotation"
                    ],
                    "query": [
                        {
                            "key": "isoformOverrideSource",
                            "value": "uniprot"
                        },
                        {
                            "key": "token",
                            "value": "%7Bsource1%3Atoken1%2C%20source2%3Atoken2%7D"
                        },
                        {
                            "key": "fields",
                            "value": "hotspots"
                        }
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 4xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(400, 499);",
                            "});"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.collectionVariables.set('fetchVariantAnnotationPOST.request.query_params.isoformOverrideSource', 'uniprot');",
                            "pm.collectionVariables.set('fetchVariantAnnotationPOST.request.query_params.token', '%7Bsource1%3Atoken1%2C%20source2%3Atoken2%7D');",
                            "pm.collectionVariables.set('fetchVariantAnnotationPOST.request.query_params.fields', 'hotspots');",
                            "pm.collectionVariables.set('fetchVariantAnnotationPOST.request.headers.Content-Type', 'application/json');",
                            "pm.collectionVariables.set('fetchVariantAnnotationPOST.request.body.[0]', '17:g.41242962_41242963insGA');",
                            "pm.collectionVariables.set('fetchVariantAnnotationPOST.request.body.[1]', 'NM_000546.5:c.215C>G');",
                            "pm.collectionVariables.set('fetchVariantAnnotationPOST.request.body.[2]', 'chr7:g.140453136A>T');"
                        ]
                    }
                }
            ]
        },
        {
            "name": "fetchVariantAnnotationGET",
            "request": {
                "method": "GET",
                "header": [],
                "body": null,
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/annotation/:variant?isoformOverrideSource=uniprot&token=%7B%22source1%22%3A%22put-your-token1-here%22%2C%22source2%22%3A%22put-your-token2-here%22%7D&fields=hotspots",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "annotation",
                        ":variant"
                    ],
                    "variable": [
                        {
                            "key": "variant",
                            "value": "{{fetchVariantAnnotationGET.request.path_params.variant}}"
                        }
                    ],
                    "query": [
                        {
                            "key": "isoformOverrideSource",
                            "value": "uniprot"
                        },
                        {
                            "key": "token",
                            "value": "%7B%22source1%22%3A%22put-your-token1-here%22%2C%22source2%22%3A%22put-your-token2-here%22%7D"
                        },
                        {
                            "key": "fields",
                            "value": "hotspots"
                        }
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 2xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(200, 299);",
                            "});",
                            "",
                            "try {",
                            "",
                            "   /**",
                            "    * Gets a value from a nested object using a flattened key path",
                            "    * @param {Object} obj - The object to extract from",
                            "    * @param {string} path - Flattened key path (e.g., 'users[1].role.id')",
                            "    * @return {*} The extracted value or undefined if not found",
                            "    */",
                            "   function getValueByPath(obj, path) {",
                            "       // Handle array notation by splitting correctly",
                            "       const parts = [];",
                            "       let currentPart = '';",
                            "       let inBracket = false;",
                            "",
                            "       // Parse the path maintaining array indexes",
                            "       for (let i = 0; i < path.length; i++) {",
                            "           const char = path[i];",
                            "           if (char === '.' && !inBracket) {",
                            "               if (currentPart) parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else if (char === '[') {",
                            "               inBracket = true;",
                            "               parts.push(currentPart);",
                            "               currentPart = '[';",
                            "           } else if (char === ']') {",
                            "               inBracket = false;",
                            "               currentPart += ']';",
                            "               parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else {",
                            "               currentPart += char;",
                            "           }",
                            "       }",
                            "       if (currentPart) parts.push(currentPart);",
                            "",
                            "       // Navigate through the object",
                            "       let current = obj;",
                            "       for (const part of parts) {",
                            "           if (!current) return undefined;",
                            "",
                            "           if (part.startsWith('[') && part.endsWith(']')) {",
                            "               // Handle array index",
                            "               const index = parseInt(part.substring(1, part.length - 1));",
                            "               if (!Array.isArray(current) || current.length <= index) {",
                            "                   return undefined;",
                            "               }",
                            "               current = current[index];",
                            "           } else {",
                            "               // Handle object property",
                            "               current = current[part];",
                            "           }",
                            "       }",
                            "       return current;",
                            "   }",
                            "",
                            "    // Extract response body values",
                            "    const responseJson = pm.response.json();",
                            "",
                            "    // Store expected body fields",
                            "    const x0 = getValueByPath(responseJson, 'variant');",
                            "    if (x0 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.variant', x0);",
                            "    }",
                            "    const x1 = getValueByPath(responseJson, 'colocatedVariants[0].dbSnpId');",
                            "    if (x1 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.colocatedVariants[0].dbSnpId', x1);",
                            "    }",
                            "    const x2 = getValueByPath(responseJson, 'originalVariantQuery');",
                            "    if (x2 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.originalVariantQuery', x2);",
                            "    }",
                            "    const x3 = getValueByPath(responseJson, 'hgvsg');",
                            "    if (x3 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.hgvsg', x3);",
                            "    }",
                            "    const x4 = getValueByPath(responseJson, 'id');",
                            "    if (x4 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.id', x4);",
                            "    }",
                            "    const x5 = getValueByPath(responseJson, 'assembly_name');",
                            "    if (x5 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.assembly_name', x5);",
                            "    }",
                            "    const x6 = getValueByPath(responseJson, 'seq_region_name');",
                            "    if (x6 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.seq_region_name', x6);",
                            "    }",
                            "    const x7 = getValueByPath(responseJson, 'start');",
                            "    if (x7 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.start', x7);",
                            "    }",
                            "    const x8 = getValueByPath(responseJson, 'end');",
                            "    if (x8 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.end', x8);",
                            "    }",
                            "    const x9 = getValueByPath(responseJson, 'allele_string');",
                            "    if (x9 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.allele_string', x9);",
                            "    }",
                            "    const x10 = getValueByPath(responseJson, 'strand');",
                            "    if (x10 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.strand', x10);",
                            "    }",
                            "    const x11 = getValueByPath(responseJson, 'most_severe_consequence');",
                            "    if (x11 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.most_severe_consequence', x11);",
                            "    }",
                            "    const x12 = getValueByPath(responseJson, 'transcript_consequences[0].exon');",
                            "    if (x12 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].exon', x12);",
                            "    }",
                            "    const x13 = getValueByPath(responseJson, 'transcript_consequences[0].transcript_id');",
                            "    if (x13 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].transcript_id', x13);",
                            "    }",
                            "    const x14 = getValueByPath(responseJson, 'transcript_consequences[0].hgvsp');",
                            "    if (x14 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].hgvsp', x14);",
                            "    }",
                            "    const x15 = getValueByPath(responseJson, 'transcript_consequences[0].hgvsc');",
                            "    if (x15 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].hgvsc', x15);",
                            "    }",
                            "    const x16 = getValueByPath(responseJson, 'transcript_consequences[0].variant_allele');",
                            "    if (x16 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].variant_allele', x16);",
                            "    }",
                            "    const x17 = getValueByPath(responseJson, 'transcript_consequences[0].codons');",
                            "    if (x17 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].codons', x17);",
                            "    }",
                            "    const x18 = getValueByPath(responseJson, 'transcript_consequences[0].protein_id');",
                            "    if (x18 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].protein_id', x18);",
                            "    }",
                            "    const x19 = getValueByPath(responseJson, 'transcript_consequences[0].protein_start');",
                            "    if (x19 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].protein_start', x19);",
                            "    }",
                            "    const x20 = getValueByPath(responseJson, 'transcript_consequences[0].protein_end');",
                            "    if (x20 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].protein_end', x20);",
                            "    }",
                            "    const x21 = getValueByPath(responseJson, 'transcript_consequences[0].gene_symbol');",
                            "    if (x21 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].gene_symbol', x21);",
                            "    }",
                            "    const x22 = getValueByPath(responseJson, 'transcript_consequences[0].gene_id');",
                            "    if (x22 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].gene_id', x22);",
                            "    }",
                            "    const x23 = getValueByPath(responseJson, 'transcript_consequences[0].amino_acids');",
                            "    if (x23 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].amino_acids', x23);",
                            "    }",
                            "    const x24 = getValueByPath(responseJson, 'transcript_consequences[0].hgnc_id');",
                            "    if (x24 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].hgnc_id', x24);",
                            "    }",
                            "    const x25 = getValueByPath(responseJson, 'transcript_consequences[0].refseq_transcript_ids[0]');",
                            "    if (x25 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].refseq_transcript_ids[0]', x25);",
                            "    }",
                            "    const x26 = getValueByPath(responseJson, 'transcript_consequences[0].consequence_terms[0]');",
                            "    if (x26 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].consequence_terms[0]', x26);",
                            "    }",
                            "    const x27 = getValueByPath(responseJson, 'transcript_consequences[0].consequence_terms[1]');",
                            "    if (x27 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[0].consequence_terms[1]', x27);",
                            "    }",
                            "    const x28 = getValueByPath(responseJson, 'transcript_consequences[1].exon');",
                            "    if (x28 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].exon', x28);",
                            "    }",
                            "    const x29 = getValueByPath(responseJson, 'transcript_consequences[1].transcript_id');",
                            "    if (x29 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].transcript_id', x29);",
                            "    }",
                            "    const x30 = getValueByPath(responseJson, 'transcript_consequences[1].hgvsp');",
                            "    if (x30 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].hgvsp', x30);",
                            "    }",
                            "    const x31 = getValueByPath(responseJson, 'transcript_consequences[1].hgvsc');",
                            "    if (x31 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].hgvsc', x31);",
                            "    }",
                            "    const x32 = getValueByPath(responseJson, 'transcript_consequences[1].variant_allele');",
                            "    if (x32 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].variant_allele', x32);",
                            "    }",
                            "    const x33 = getValueByPath(responseJson, 'transcript_consequences[1].codons');",
                            "    if (x33 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].codons', x33);",
                            "    }",
                            "    const x34 = getValueByPath(responseJson, 'transcript_consequences[1].protein_id');",
                            "    if (x34 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].protein_id', x34);",
                            "    }",
                            "    const x35 = getValueByPath(responseJson, 'transcript_consequences[1].protein_start');",
                            "    if (x35 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].protein_start', x35);",
                            "    }",
                            "    const x36 = getValueByPath(responseJson, 'transcript_consequences[1].protein_end');",
                            "    if (x36 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].protein_end', x36);",
                            "    }",
                            "    const x37 = getValueByPath(responseJson, 'transcript_consequences[1].gene_symbol');",
                            "    if (x37 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].gene_symbol', x37);",
                            "    }",
                            "    const x38 = getValueByPath(responseJson, 'transcript_consequences[1].gene_id');",
                            "    if (x38 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].gene_id', x38);",
                            "    }",
                            "    const x39 = getValueByPath(responseJson, 'transcript_consequences[1].amino_acids');",
                            "    if (x39 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].amino_acids', x39);",
                            "    }",
                            "    const x40 = getValueByPath(responseJson, 'transcript_consequences[1].hgnc_id');",
                            "    if (x40 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].hgnc_id', x40);",
                            "    }",
                            "    const x41 = getValueByPath(responseJson, 'transcript_consequences[1].consequence_terms[0]');",
                            "    if (x41 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].consequence_terms[0]', x41);",
                            "    }",
                            "    const x42 = getValueByPath(responseJson, 'transcript_consequences[1].consequence_terms[1]');",
                            "    if (x42 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[1].consequence_terms[1]', x42);",
                            "    }",
                            "    const x43 = getValueByPath(responseJson, 'transcript_consequences[2].exon');",
                            "    if (x43 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].exon', x43);",
                            "    }",
                            "    const x44 = getValueByPath(responseJson, 'transcript_consequences[2].transcript_id');",
                            "    if (x44 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].transcript_id', x44);",
                            "    }",
                            "    const x45 = getValueByPath(responseJson, 'transcript_consequences[2].hgvsp');",
                            "    if (x45 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].hgvsp', x45);",
                            "    }",
                            "    const x46 = getValueByPath(responseJson, 'transcript_consequences[2].hgvsc');",
                            "    if (x46 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].hgvsc', x46);",
                            "    }",
                            "    const x47 = getValueByPath(responseJson, 'transcript_consequences[2].variant_allele');",
                            "    if (x47 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].variant_allele', x47);",
                            "    }",
                            "    const x48 = getValueByPath(responseJson, 'transcript_consequences[2].codons');",
                            "    if (x48 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].codons', x48);",
                            "    }",
                            "    const x49 = getValueByPath(responseJson, 'transcript_consequences[2].protein_id');",
                            "    if (x49 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].protein_id', x49);",
                            "    }",
                            "    const x50 = getValueByPath(responseJson, 'transcript_consequences[2].protein_start');",
                            "    if (x50 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].protein_start', x50);",
                            "    }",
                            "    const x51 = getValueByPath(responseJson, 'transcript_consequences[2].protein_end');",
                            "    if (x51 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].protein_end', x51);",
                            "    }",
                            "    const x52 = getValueByPath(responseJson, 'transcript_consequences[2].gene_symbol');",
                            "    if (x52 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].gene_symbol', x52);",
                            "    }",
                            "    const x53 = getValueByPath(responseJson, 'transcript_consequences[2].gene_id');",
                            "    if (x53 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].gene_id', x53);",
                            "    }",
                            "    const x54 = getValueByPath(responseJson, 'transcript_consequences[2].amino_acids');",
                            "    if (x54 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].amino_acids', x54);",
                            "    }",
                            "    const x55 = getValueByPath(responseJson, 'transcript_consequences[2].hgnc_id');",
                            "    if (x55 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].hgnc_id', x55);",
                            "    }",
                            "    const x56 = getValueByPath(responseJson, 'transcript_consequences[2].consequence_terms[0]');",
                            "    if (x56 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].consequence_terms[0]', x56);",
                            "    }",
                            "    const x57 = getValueByPath(responseJson, 'transcript_consequences[2].consequence_terms[1]');",
                            "    if (x57 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[2].consequence_terms[1]', x57);",
                            "    }",
                            "    const x58 = getValueByPath(responseJson, 'transcript_consequences[3].exon');",
                            "    if (x58 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].exon', x58);",
                            "    }",
                            "    const x59 = getValueByPath(responseJson, 'transcript_consequences[3].transcript_id');",
                            "    if (x59 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].transcript_id', x59);",
                            "    }",
                            "    const x60 = getValueByPath(responseJson, 'transcript_consequences[3].hgvsp');",
                            "    if (x60 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].hgvsp', x60);",
                            "    }",
                            "    const x61 = getValueByPath(responseJson, 'transcript_consequences[3].hgvsc');",
                            "    if (x61 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].hgvsc', x61);",
                            "    }",
                            "    const x62 = getValueByPath(responseJson, 'transcript_consequences[3].variant_allele');",
                            "    if (x62 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].variant_allele', x62);",
                            "    }",
                            "    const x63 = getValueByPath(responseJson, 'transcript_consequences[3].codons');",
                            "    if (x63 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].codons', x63);",
                            "    }",
                            "    const x64 = getValueByPath(responseJson, 'transcript_consequences[3].protein_id');",
                            "    if (x64 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].protein_id', x64);",
                            "    }",
                            "    const x65 = getValueByPath(responseJson, 'transcript_consequences[3].protein_start');",
                            "    if (x65 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].protein_start', x65);",
                            "    }",
                            "    const x66 = getValueByPath(responseJson, 'transcript_consequences[3].protein_end');",
                            "    if (x66 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].protein_end', x66);",
                            "    }",
                            "    const x67 = getValueByPath(responseJson, 'transcript_consequences[3].gene_symbol');",
                            "    if (x67 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].gene_symbol', x67);",
                            "    }",
                            "    const x68 = getValueByPath(responseJson, 'transcript_consequences[3].gene_id');",
                            "    if (x68 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].gene_id', x68);",
                            "    }",
                            "    const x69 = getValueByPath(responseJson, 'transcript_consequences[3].amino_acids');",
                            "    if (x69 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].amino_acids', x69);",
                            "    }",
                            "    const x70 = getValueByPath(responseJson, 'transcript_consequences[3].hgnc_id');",
                            "    if (x70 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].hgnc_id', x70);",
                            "    }",
                            "    const x71 = getValueByPath(responseJson, 'transcript_consequences[3].consequence_terms[0]');",
                            "    if (x71 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].consequence_terms[0]', x71);",
                            "    }",
                            "    const x72 = getValueByPath(responseJson, 'transcript_consequences[3].consequence_terms[1]');",
                            "    if (x72 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[3].consequence_terms[1]', x72);",
                            "    }",
                            "    const x73 = getValueByPath(responseJson, 'transcript_consequences[4].exon');",
                            "    if (x73 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].exon', x73);",
                            "    }",
                            "    const x74 = getValueByPath(responseJson, 'transcript_consequences[4].transcript_id');",
                            "    if (x74 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].transcript_id', x74);",
                            "    }",
                            "    const x75 = getValueByPath(responseJson, 'transcript_consequences[4].hgvsp');",
                            "    if (x75 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].hgvsp', x75);",
                            "    }",
                            "    const x76 = getValueByPath(responseJson, 'transcript_consequences[4].hgvsc');",
                            "    if (x76 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].hgvsc', x76);",
                            "    }",
                            "    const x77 = getValueByPath(responseJson, 'transcript_consequences[4].variant_allele');",
                            "    if (x77 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].variant_allele', x77);",
                            "    }",
                            "    const x78 = getValueByPath(responseJson, 'transcript_consequences[4].codons');",
                            "    if (x78 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].codons', x78);",
                            "    }",
                            "    const x79 = getValueByPath(responseJson, 'transcript_consequences[4].protein_id');",
                            "    if (x79 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].protein_id', x79);",
                            "    }",
                            "    const x80 = getValueByPath(responseJson, 'transcript_consequences[4].protein_start');",
                            "    if (x80 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].protein_start', x80);",
                            "    }",
                            "    const x81 = getValueByPath(responseJson, 'transcript_consequences[4].protein_end');",
                            "    if (x81 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].protein_end', x81);",
                            "    }",
                            "    const x82 = getValueByPath(responseJson, 'transcript_consequences[4].gene_symbol');",
                            "    if (x82 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].gene_symbol', x82);",
                            "    }",
                            "    const x83 = getValueByPath(responseJson, 'transcript_consequences[4].gene_id');",
                            "    if (x83 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].gene_id', x83);",
                            "    }",
                            "    const x84 = getValueByPath(responseJson, 'transcript_consequences[4].amino_acids');",
                            "    if (x84 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].amino_acids', x84);",
                            "    }",
                            "    const x85 = getValueByPath(responseJson, 'transcript_consequences[4].hgnc_id');",
                            "    if (x85 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].hgnc_id', x85);",
                            "    }",
                            "    const x86 = getValueByPath(responseJson, 'transcript_consequences[4].consequence_terms[0]');",
                            "    if (x86 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].consequence_terms[0]', x86);",
                            "    }",
                            "    const x87 = getValueByPath(responseJson, 'transcript_consequences[4].consequence_terms[1]');",
                            "    if (x87 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[4].consequence_terms[1]', x87);",
                            "    }",
                            "    const x88 = getValueByPath(responseJson, 'transcript_consequences[5].exon');",
                            "    if (x88 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].exon', x88);",
                            "    }",
                            "    const x89 = getValueByPath(responseJson, 'transcript_consequences[5].transcript_id');",
                            "    if (x89 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].transcript_id', x89);",
                            "    }",
                            "    const x90 = getValueByPath(responseJson, 'transcript_consequences[5].hgvsp');",
                            "    if (x90 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].hgvsp', x90);",
                            "    }",
                            "    const x91 = getValueByPath(responseJson, 'transcript_consequences[5].hgvsc');",
                            "    if (x91 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].hgvsc', x91);",
                            "    }",
                            "    const x92 = getValueByPath(responseJson, 'transcript_consequences[5].variant_allele');",
                            "    if (x92 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].variant_allele', x92);",
                            "    }",
                            "    const x93 = getValueByPath(responseJson, 'transcript_consequences[5].codons');",
                            "    if (x93 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].codons', x93);",
                            "    }",
                            "    const x94 = getValueByPath(responseJson, 'transcript_consequences[5].protein_id');",
                            "    if (x94 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].protein_id', x94);",
                            "    }",
                            "    const x95 = getValueByPath(responseJson, 'transcript_consequences[5].protein_start');",
                            "    if (x95 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].protein_start', x95);",
                            "    }",
                            "    const x96 = getValueByPath(responseJson, 'transcript_consequences[5].protein_end');",
                            "    if (x96 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].protein_end', x96);",
                            "    }",
                            "    const x97 = getValueByPath(responseJson, 'transcript_consequences[5].gene_symbol');",
                            "    if (x97 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].gene_symbol', x97);",
                            "    }",
                            "    const x98 = getValueByPath(responseJson, 'transcript_consequences[5].gene_id');",
                            "    if (x98 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].gene_id', x98);",
                            "    }",
                            "    const x99 = getValueByPath(responseJson, 'transcript_consequences[5].amino_acids');",
                            "    if (x99 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].amino_acids', x99);",
                            "    }",
                            "    const x100 = getValueByPath(responseJson, 'transcript_consequences[5].hgnc_id');",
                            "    if (x100 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].hgnc_id', x100);",
                            "    }",
                            "    const x101 = getValueByPath(responseJson, 'transcript_consequences[5].canonical');",
                            "    if (x101 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].canonical', x101);",
                            "    }",
                            "    const x102 = getValueByPath(responseJson, 'transcript_consequences[5].refseq_transcript_ids[0]');",
                            "    if (x102 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].refseq_transcript_ids[0]', x102);",
                            "    }",
                            "    const x103 = getValueByPath(responseJson, 'transcript_consequences[5].consequence_terms[0]');",
                            "    if (x103 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].consequence_terms[0]', x103);",
                            "    }",
                            "    const x104 = getValueByPath(responseJson, 'transcript_consequences[5].consequence_terms[1]');",
                            "    if (x104 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[5].consequence_terms[1]', x104);",
                            "    }",
                            "    const x105 = getValueByPath(responseJson, 'transcript_consequences[6].transcript_id');",
                            "    if (x105 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[6].transcript_id', x105);",
                            "    }",
                            "    const x106 = getValueByPath(responseJson, 'transcript_consequences[6].variant_allele');",
                            "    if (x106 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[6].variant_allele', x106);",
                            "    }",
                            "    const x107 = getValueByPath(responseJson, 'transcript_consequences[6].protein_id');",
                            "    if (x107 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[6].protein_id', x107);",
                            "    }",
                            "    const x108 = getValueByPath(responseJson, 'transcript_consequences[6].gene_symbol');",
                            "    if (x108 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[6].gene_symbol', x108);",
                            "    }",
                            "    const x109 = getValueByPath(responseJson, 'transcript_consequences[6].gene_id');",
                            "    if (x109 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[6].gene_id', x109);",
                            "    }",
                            "    const x110 = getValueByPath(responseJson, 'transcript_consequences[6].hgnc_id');",
                            "    if (x110 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[6].hgnc_id', x110);",
                            "    }",
                            "    const x111 = getValueByPath(responseJson, 'transcript_consequences[6].consequence_terms[0]');",
                            "    if (x111 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[6].consequence_terms[0]', x111);",
                            "    }",
                            "    const x112 = getValueByPath(responseJson, 'transcript_consequences[7].exon');",
                            "    if (x112 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[7].exon', x112);",
                            "    }",
                            "    const x113 = getValueByPath(responseJson, 'transcript_consequences[7].transcript_id');",
                            "    if (x113 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[7].transcript_id', x113);",
                            "    }",
                            "    const x114 = getValueByPath(responseJson, 'transcript_consequences[7].hgvsc');",
                            "    if (x114 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[7].hgvsc', x114);",
                            "    }",
                            "    const x115 = getValueByPath(responseJson, 'transcript_consequences[7].variant_allele');",
                            "    if (x115 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[7].variant_allele', x115);",
                            "    }",
                            "    const x116 = getValueByPath(responseJson, 'transcript_consequences[7].protein_id');",
                            "    if (x116 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[7].protein_id', x116);",
                            "    }",
                            "    const x117 = getValueByPath(responseJson, 'transcript_consequences[7].gene_symbol');",
                            "    if (x117 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[7].gene_symbol', x117);",
                            "    }",
                            "    const x118 = getValueByPath(responseJson, 'transcript_consequences[7].gene_id');",
                            "    if (x118 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[7].gene_id', x118);",
                            "    }",
                            "    const x119 = getValueByPath(responseJson, 'transcript_consequences[7].hgnc_id');",
                            "    if (x119 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[7].hgnc_id', x119);",
                            "    }",
                            "    const x120 = getValueByPath(responseJson, 'transcript_consequences[7].consequence_terms[0]');",
                            "    if (x120 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[7].consequence_terms[0]', x120);",
                            "    }",
                            "    const x121 = getValueByPath(responseJson, 'transcript_consequences[7].consequence_terms[1]');",
                            "    if (x121 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[7].consequence_terms[1]', x121);",
                            "    }",
                            "    const x122 = getValueByPath(responseJson, 'transcript_consequences[7].consequence_terms[2]');",
                            "    if (x122 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[7].consequence_terms[2]', x122);",
                            "    }",
                            "    const x123 = getValueByPath(responseJson, 'transcript_consequences[8].exon');",
                            "    if (x123 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].exon', x123);",
                            "    }",
                            "    const x124 = getValueByPath(responseJson, 'transcript_consequences[8].transcript_id');",
                            "    if (x124 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].transcript_id', x124);",
                            "    }",
                            "    const x125 = getValueByPath(responseJson, 'transcript_consequences[8].hgvsp');",
                            "    if (x125 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].hgvsp', x125);",
                            "    }",
                            "    const x126 = getValueByPath(responseJson, 'transcript_consequences[8].hgvsc');",
                            "    if (x126 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].hgvsc', x126);",
                            "    }",
                            "    const x127 = getValueByPath(responseJson, 'transcript_consequences[8].variant_allele');",
                            "    if (x127 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].variant_allele', x127);",
                            "    }",
                            "    const x128 = getValueByPath(responseJson, 'transcript_consequences[8].codons');",
                            "    if (x128 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].codons', x128);",
                            "    }",
                            "    const x129 = getValueByPath(responseJson, 'transcript_consequences[8].protein_id');",
                            "    if (x129 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].protein_id', x129);",
                            "    }",
                            "    const x130 = getValueByPath(responseJson, 'transcript_consequences[8].protein_start');",
                            "    if (x130 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].protein_start', x130);",
                            "    }",
                            "    const x131 = getValueByPath(responseJson, 'transcript_consequences[8].protein_end');",
                            "    if (x131 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].protein_end', x131);",
                            "    }",
                            "    const x132 = getValueByPath(responseJson, 'transcript_consequences[8].gene_symbol');",
                            "    if (x132 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].gene_symbol', x132);",
                            "    }",
                            "    const x133 = getValueByPath(responseJson, 'transcript_consequences[8].gene_id');",
                            "    if (x133 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].gene_id', x133);",
                            "    }",
                            "    const x134 = getValueByPath(responseJson, 'transcript_consequences[8].amino_acids');",
                            "    if (x134 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].amino_acids', x134);",
                            "    }",
                            "    const x135 = getValueByPath(responseJson, 'transcript_consequences[8].hgnc_id');",
                            "    if (x135 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].hgnc_id', x135);",
                            "    }",
                            "    const x136 = getValueByPath(responseJson, 'transcript_consequences[8].consequence_terms[0]');",
                            "    if (x136 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].consequence_terms[0]', x136);",
                            "    }",
                            "    const x137 = getValueByPath(responseJson, 'transcript_consequences[8].consequence_terms[1]');",
                            "    if (x137 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[8].consequence_terms[1]', x137);",
                            "    }",
                            "    const x138 = getValueByPath(responseJson, 'transcript_consequences[9].transcript_id');",
                            "    if (x138 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[9].transcript_id', x138);",
                            "    }",
                            "    const x139 = getValueByPath(responseJson, 'transcript_consequences[9].variant_allele');",
                            "    if (x139 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[9].variant_allele', x139);",
                            "    }",
                            "    const x140 = getValueByPath(responseJson, 'transcript_consequences[9].gene_symbol');",
                            "    if (x140 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[9].gene_symbol', x140);",
                            "    }",
                            "    const x141 = getValueByPath(responseJson, 'transcript_consequences[9].gene_id');",
                            "    if (x141 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[9].gene_id', x141);",
                            "    }",
                            "    const x142 = getValueByPath(responseJson, 'transcript_consequences[9].hgnc_id');",
                            "    if (x142 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[9].hgnc_id', x142);",
                            "    }",
                            "    const x143 = getValueByPath(responseJson, 'transcript_consequences[9].consequence_terms[0]');",
                            "    if (x143 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[9].consequence_terms[0]', x143);",
                            "    }",
                            "    const x144 = getValueByPath(responseJson, 'transcript_consequences[10].exon');",
                            "    if (x144 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].exon', x144);",
                            "    }",
                            "    const x145 = getValueByPath(responseJson, 'transcript_consequences[10].transcript_id');",
                            "    if (x145 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].transcript_id', x145);",
                            "    }",
                            "    const x146 = getValueByPath(responseJson, 'transcript_consequences[10].hgvsp');",
                            "    if (x146 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].hgvsp', x146);",
                            "    }",
                            "    const x147 = getValueByPath(responseJson, 'transcript_consequences[10].hgvsc');",
                            "    if (x147 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].hgvsc', x147);",
                            "    }",
                            "    const x148 = getValueByPath(responseJson, 'transcript_consequences[10].variant_allele');",
                            "    if (x148 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].variant_allele', x148);",
                            "    }",
                            "    const x149 = getValueByPath(responseJson, 'transcript_consequences[10].codons');",
                            "    if (x149 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].codons', x149);",
                            "    }",
                            "    const x150 = getValueByPath(responseJson, 'transcript_consequences[10].protein_id');",
                            "    if (x150 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].protein_id', x150);",
                            "    }",
                            "    const x151 = getValueByPath(responseJson, 'transcript_consequences[10].protein_start');",
                            "    if (x151 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].protein_start', x151);",
                            "    }",
                            "    const x152 = getValueByPath(responseJson, 'transcript_consequences[10].protein_end');",
                            "    if (x152 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].protein_end', x152);",
                            "    }",
                            "    const x153 = getValueByPath(responseJson, 'transcript_consequences[10].gene_symbol');",
                            "    if (x153 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].gene_symbol', x153);",
                            "    }",
                            "    const x154 = getValueByPath(responseJson, 'transcript_consequences[10].gene_id');",
                            "    if (x154 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].gene_id', x154);",
                            "    }",
                            "    const x155 = getValueByPath(responseJson, 'transcript_consequences[10].amino_acids');",
                            "    if (x155 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].amino_acids', x155);",
                            "    }",
                            "    const x156 = getValueByPath(responseJson, 'transcript_consequences[10].hgnc_id');",
                            "    if (x156 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].hgnc_id', x156);",
                            "    }",
                            "    const x157 = getValueByPath(responseJson, 'transcript_consequences[10].refseq_transcript_ids[0]');",
                            "    if (x157 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].refseq_transcript_ids[0]', x157);",
                            "    }",
                            "    const x158 = getValueByPath(responseJson, 'transcript_consequences[10].consequence_terms[0]');",
                            "    if (x158 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].consequence_terms[0]', x158);",
                            "    }",
                            "    const x159 = getValueByPath(responseJson, 'transcript_consequences[10].consequence_terms[1]');",
                            "    if (x159 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[10].consequence_terms[1]', x159);",
                            "    }",
                            "    const x160 = getValueByPath(responseJson, 'transcript_consequences[11].transcript_id');",
                            "    if (x160 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[11].transcript_id', x160);",
                            "    }",
                            "    const x161 = getValueByPath(responseJson, 'transcript_consequences[11].variant_allele');",
                            "    if (x161 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[11].variant_allele', x161);",
                            "    }",
                            "    const x162 = getValueByPath(responseJson, 'transcript_consequences[11].protein_id');",
                            "    if (x162 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[11].protein_id', x162);",
                            "    }",
                            "    const x163 = getValueByPath(responseJson, 'transcript_consequences[11].gene_symbol');",
                            "    if (x163 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[11].gene_symbol', x163);",
                            "    }",
                            "    const x164 = getValueByPath(responseJson, 'transcript_consequences[11].gene_id');",
                            "    if (x164 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[11].gene_id', x164);",
                            "    }",
                            "    const x165 = getValueByPath(responseJson, 'transcript_consequences[11].hgnc_id');",
                            "    if (x165 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[11].hgnc_id', x165);",
                            "    }",
                            "    const x166 = getValueByPath(responseJson, 'transcript_consequences[11].consequence_terms[0]');",
                            "    if (x166 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[11].consequence_terms[0]', x166);",
                            "    }",
                            "    const x167 = getValueByPath(responseJson, 'transcript_consequences[12].exon');",
                            "    if (x167 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].exon', x167);",
                            "    }",
                            "    const x168 = getValueByPath(responseJson, 'transcript_consequences[12].transcript_id');",
                            "    if (x168 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].transcript_id', x168);",
                            "    }",
                            "    const x169 = getValueByPath(responseJson, 'transcript_consequences[12].hgvsp');",
                            "    if (x169 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].hgvsp', x169);",
                            "    }",
                            "    const x170 = getValueByPath(responseJson, 'transcript_consequences[12].hgvsc');",
                            "    if (x170 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].hgvsc', x170);",
                            "    }",
                            "    const x171 = getValueByPath(responseJson, 'transcript_consequences[12].variant_allele');",
                            "    if (x171 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].variant_allele', x171);",
                            "    }",
                            "    const x172 = getValueByPath(responseJson, 'transcript_consequences[12].codons');",
                            "    if (x172 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].codons', x172);",
                            "    }",
                            "    const x173 = getValueByPath(responseJson, 'transcript_consequences[12].protein_id');",
                            "    if (x173 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].protein_id', x173);",
                            "    }",
                            "    const x174 = getValueByPath(responseJson, 'transcript_consequences[12].protein_start');",
                            "    if (x174 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].protein_start', x174);",
                            "    }",
                            "    const x175 = getValueByPath(responseJson, 'transcript_consequences[12].protein_end');",
                            "    if (x175 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].protein_end', x175);",
                            "    }",
                            "    const x176 = getValueByPath(responseJson, 'transcript_consequences[12].gene_symbol');",
                            "    if (x176 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].gene_symbol', x176);",
                            "    }",
                            "    const x177 = getValueByPath(responseJson, 'transcript_consequences[12].gene_id');",
                            "    if (x177 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].gene_id', x177);",
                            "    }",
                            "    const x178 = getValueByPath(responseJson, 'transcript_consequences[12].amino_acids');",
                            "    if (x178 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].amino_acids', x178);",
                            "    }",
                            "    const x179 = getValueByPath(responseJson, 'transcript_consequences[12].hgnc_id');",
                            "    if (x179 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].hgnc_id', x179);",
                            "    }",
                            "    const x180 = getValueByPath(responseJson, 'transcript_consequences[12].refseq_transcript_ids[0]');",
                            "    if (x180 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].refseq_transcript_ids[0]', x180);",
                            "    }",
                            "    const x181 = getValueByPath(responseJson, 'transcript_consequences[12].consequence_terms[0]');",
                            "    if (x181 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].consequence_terms[0]', x181);",
                            "    }",
                            "    const x182 = getValueByPath(responseJson, 'transcript_consequences[12].consequence_terms[1]');",
                            "    if (x182 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[12].consequence_terms[1]', x182);",
                            "    }",
                            "    const x183 = getValueByPath(responseJson, 'transcript_consequences[13].transcript_id');",
                            "    if (x183 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[13].transcript_id', x183);",
                            "    }",
                            "    const x184 = getValueByPath(responseJson, 'transcript_consequences[13].variant_allele');",
                            "    if (x184 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[13].variant_allele', x184);",
                            "    }",
                            "    const x185 = getValueByPath(responseJson, 'transcript_consequences[13].protein_id');",
                            "    if (x185 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[13].protein_id', x185);",
                            "    }",
                            "    const x186 = getValueByPath(responseJson, 'transcript_consequences[13].gene_symbol');",
                            "    if (x186 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[13].gene_symbol', x186);",
                            "    }",
                            "    const x187 = getValueByPath(responseJson, 'transcript_consequences[13].gene_id');",
                            "    if (x187 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[13].gene_id', x187);",
                            "    }",
                            "    const x188 = getValueByPath(responseJson, 'transcript_consequences[13].hgnc_id');",
                            "    if (x188 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[13].hgnc_id', x188);",
                            "    }",
                            "    const x189 = getValueByPath(responseJson, 'transcript_consequences[13].consequence_terms[0]');",
                            "    if (x189 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[13].consequence_terms[0]', x189);",
                            "    }",
                            "    const x190 = getValueByPath(responseJson, 'transcript_consequences[14].transcript_id');",
                            "    if (x190 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[14].transcript_id', x190);",
                            "    }",
                            "    const x191 = getValueByPath(responseJson, 'transcript_consequences[14].variant_allele');",
                            "    if (x191 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[14].variant_allele', x191);",
                            "    }",
                            "    const x192 = getValueByPath(responseJson, 'transcript_consequences[14].protein_id');",
                            "    if (x192 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[14].protein_id', x192);",
                            "    }",
                            "    const x193 = getValueByPath(responseJson, 'transcript_consequences[14].gene_symbol');",
                            "    if (x193 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[14].gene_symbol', x193);",
                            "    }",
                            "    const x194 = getValueByPath(responseJson, 'transcript_consequences[14].gene_id');",
                            "    if (x194 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[14].gene_id', x194);",
                            "    }",
                            "    const x195 = getValueByPath(responseJson, 'transcript_consequences[14].hgnc_id');",
                            "    if (x195 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[14].hgnc_id', x195);",
                            "    }",
                            "    const x196 = getValueByPath(responseJson, 'transcript_consequences[14].consequence_terms[0]');",
                            "    if (x196 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[14].consequence_terms[0]', x196);",
                            "    }",
                            "    const x197 = getValueByPath(responseJson, 'transcript_consequences[15].transcript_id');",
                            "    if (x197 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[15].transcript_id', x197);",
                            "    }",
                            "    const x198 = getValueByPath(responseJson, 'transcript_consequences[15].variant_allele');",
                            "    if (x198 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[15].variant_allele', x198);",
                            "    }",
                            "    const x199 = getValueByPath(responseJson, 'transcript_consequences[15].protein_id');",
                            "    if (x199 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[15].protein_id', x199);",
                            "    }",
                            "    const x200 = getValueByPath(responseJson, 'transcript_consequences[15].gene_symbol');",
                            "    if (x200 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[15].gene_symbol', x200);",
                            "    }",
                            "    const x201 = getValueByPath(responseJson, 'transcript_consequences[15].gene_id');",
                            "    if (x201 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[15].gene_id', x201);",
                            "    }",
                            "    const x202 = getValueByPath(responseJson, 'transcript_consequences[15].hgnc_id');",
                            "    if (x202 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[15].hgnc_id', x202);",
                            "    }",
                            "    const x203 = getValueByPath(responseJson, 'transcript_consequences[15].consequence_terms[0]');",
                            "    if (x203 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[15].consequence_terms[0]', x203);",
                            "    }",
                            "    const x204 = getValueByPath(responseJson, 'transcript_consequences[16].exon');",
                            "    if (x204 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].exon', x204);",
                            "    }",
                            "    const x205 = getValueByPath(responseJson, 'transcript_consequences[16].transcript_id');",
                            "    if (x205 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].transcript_id', x205);",
                            "    }",
                            "    const x206 = getValueByPath(responseJson, 'transcript_consequences[16].hgvsp');",
                            "    if (x206 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].hgvsp', x206);",
                            "    }",
                            "    const x207 = getValueByPath(responseJson, 'transcript_consequences[16].hgvsc');",
                            "    if (x207 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].hgvsc', x207);",
                            "    }",
                            "    const x208 = getValueByPath(responseJson, 'transcript_consequences[16].variant_allele');",
                            "    if (x208 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].variant_allele', x208);",
                            "    }",
                            "    const x209 = getValueByPath(responseJson, 'transcript_consequences[16].codons');",
                            "    if (x209 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].codons', x209);",
                            "    }",
                            "    const x210 = getValueByPath(responseJson, 'transcript_consequences[16].protein_id');",
                            "    if (x210 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].protein_id', x210);",
                            "    }",
                            "    const x211 = getValueByPath(responseJson, 'transcript_consequences[16].protein_start');",
                            "    if (x211 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].protein_start', x211);",
                            "    }",
                            "    const x212 = getValueByPath(responseJson, 'transcript_consequences[16].protein_end');",
                            "    if (x212 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].protein_end', x212);",
                            "    }",
                            "    const x213 = getValueByPath(responseJson, 'transcript_consequences[16].gene_symbol');",
                            "    if (x213 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].gene_symbol', x213);",
                            "    }",
                            "    const x214 = getValueByPath(responseJson, 'transcript_consequences[16].gene_id');",
                            "    if (x214 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].gene_id', x214);",
                            "    }",
                            "    const x215 = getValueByPath(responseJson, 'transcript_consequences[16].amino_acids');",
                            "    if (x215 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].amino_acids', x215);",
                            "    }",
                            "    const x216 = getValueByPath(responseJson, 'transcript_consequences[16].hgnc_id');",
                            "    if (x216 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].hgnc_id', x216);",
                            "    }",
                            "    const x217 = getValueByPath(responseJson, 'transcript_consequences[16].consequence_terms[0]');",
                            "    if (x217 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].consequence_terms[0]', x217);",
                            "    }",
                            "    const x218 = getValueByPath(responseJson, 'transcript_consequences[16].consequence_terms[1]');",
                            "    if (x218 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[16].consequence_terms[1]', x218);",
                            "    }",
                            "    const x219 = getValueByPath(responseJson, 'transcript_consequences[17].exon');",
                            "    if (x219 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].exon', x219);",
                            "    }",
                            "    const x220 = getValueByPath(responseJson, 'transcript_consequences[17].transcript_id');",
                            "    if (x220 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].transcript_id', x220);",
                            "    }",
                            "    const x221 = getValueByPath(responseJson, 'transcript_consequences[17].hgvsp');",
                            "    if (x221 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].hgvsp', x221);",
                            "    }",
                            "    const x222 = getValueByPath(responseJson, 'transcript_consequences[17].hgvsc');",
                            "    if (x222 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].hgvsc', x222);",
                            "    }",
                            "    const x223 = getValueByPath(responseJson, 'transcript_consequences[17].variant_allele');",
                            "    if (x223 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].variant_allele', x223);",
                            "    }",
                            "    const x224 = getValueByPath(responseJson, 'transcript_consequences[17].codons');",
                            "    if (x224 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].codons', x224);",
                            "    }",
                            "    const x225 = getValueByPath(responseJson, 'transcript_consequences[17].protein_id');",
                            "    if (x225 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].protein_id', x225);",
                            "    }",
                            "    const x226 = getValueByPath(responseJson, 'transcript_consequences[17].protein_start');",
                            "    if (x226 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].protein_start', x226);",
                            "    }",
                            "    const x227 = getValueByPath(responseJson, 'transcript_consequences[17].protein_end');",
                            "    if (x227 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].protein_end', x227);",
                            "    }",
                            "    const x228 = getValueByPath(responseJson, 'transcript_consequences[17].gene_symbol');",
                            "    if (x228 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].gene_symbol', x228);",
                            "    }",
                            "    const x229 = getValueByPath(responseJson, 'transcript_consequences[17].gene_id');",
                            "    if (x229 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].gene_id', x229);",
                            "    }",
                            "    const x230 = getValueByPath(responseJson, 'transcript_consequences[17].amino_acids');",
                            "    if (x230 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].amino_acids', x230);",
                            "    }",
                            "    const x231 = getValueByPath(responseJson, 'transcript_consequences[17].hgnc_id');",
                            "    if (x231 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].hgnc_id', x231);",
                            "    }",
                            "    const x232 = getValueByPath(responseJson, 'transcript_consequences[17].consequence_terms[0]');",
                            "    if (x232 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].consequence_terms[0]', x232);",
                            "    }",
                            "    const x233 = getValueByPath(responseJson, 'transcript_consequences[17].consequence_terms[1]');",
                            "    if (x233 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[17].consequence_terms[1]', x233);",
                            "    }",
                            "    const x234 = getValueByPath(responseJson, 'transcript_consequences[18].exon');",
                            "    if (x234 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].exon', x234);",
                            "    }",
                            "    const x235 = getValueByPath(responseJson, 'transcript_consequences[18].transcript_id');",
                            "    if (x235 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].transcript_id', x235);",
                            "    }",
                            "    const x236 = getValueByPath(responseJson, 'transcript_consequences[18].hgvsp');",
                            "    if (x236 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].hgvsp', x236);",
                            "    }",
                            "    const x237 = getValueByPath(responseJson, 'transcript_consequences[18].hgvsc');",
                            "    if (x237 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].hgvsc', x237);",
                            "    }",
                            "    const x238 = getValueByPath(responseJson, 'transcript_consequences[18].variant_allele');",
                            "    if (x238 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].variant_allele', x238);",
                            "    }",
                            "    const x239 = getValueByPath(responseJson, 'transcript_consequences[18].codons');",
                            "    if (x239 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].codons', x239);",
                            "    }",
                            "    const x240 = getValueByPath(responseJson, 'transcript_consequences[18].protein_id');",
                            "    if (x240 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].protein_id', x240);",
                            "    }",
                            "    const x241 = getValueByPath(responseJson, 'transcript_consequences[18].protein_start');",
                            "    if (x241 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].protein_start', x241);",
                            "    }",
                            "    const x242 = getValueByPath(responseJson, 'transcript_consequences[18].protein_end');",
                            "    if (x242 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].protein_end', x242);",
                            "    }",
                            "    const x243 = getValueByPath(responseJson, 'transcript_consequences[18].gene_symbol');",
                            "    if (x243 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].gene_symbol', x243);",
                            "    }",
                            "    const x244 = getValueByPath(responseJson, 'transcript_consequences[18].gene_id');",
                            "    if (x244 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].gene_id', x244);",
                            "    }",
                            "    const x245 = getValueByPath(responseJson, 'transcript_consequences[18].amino_acids');",
                            "    if (x245 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].amino_acids', x245);",
                            "    }",
                            "    const x246 = getValueByPath(responseJson, 'transcript_consequences[18].hgnc_id');",
                            "    if (x246 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].hgnc_id', x246);",
                            "    }",
                            "    const x247 = getValueByPath(responseJson, 'transcript_consequences[18].consequence_terms[0]');",
                            "    if (x247 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].consequence_terms[0]', x247);",
                            "    }",
                            "    const x248 = getValueByPath(responseJson, 'transcript_consequences[18].consequence_terms[1]');",
                            "    if (x248 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[18].consequence_terms[1]', x248);",
                            "    }",
                            "    const x249 = getValueByPath(responseJson, 'transcript_consequences[19].exon');",
                            "    if (x249 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].exon', x249);",
                            "    }",
                            "    const x250 = getValueByPath(responseJson, 'transcript_consequences[19].transcript_id');",
                            "    if (x250 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].transcript_id', x250);",
                            "    }",
                            "    const x251 = getValueByPath(responseJson, 'transcript_consequences[19].hgvsp');",
                            "    if (x251 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].hgvsp', x251);",
                            "    }",
                            "    const x252 = getValueByPath(responseJson, 'transcript_consequences[19].hgvsc');",
                            "    if (x252 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].hgvsc', x252);",
                            "    }",
                            "    const x253 = getValueByPath(responseJson, 'transcript_consequences[19].variant_allele');",
                            "    if (x253 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].variant_allele', x253);",
                            "    }",
                            "    const x254 = getValueByPath(responseJson, 'transcript_consequences[19].codons');",
                            "    if (x254 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].codons', x254);",
                            "    }",
                            "    const x255 = getValueByPath(responseJson, 'transcript_consequences[19].protein_id');",
                            "    if (x255 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].protein_id', x255);",
                            "    }",
                            "    const x256 = getValueByPath(responseJson, 'transcript_consequences[19].protein_start');",
                            "    if (x256 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].protein_start', x256);",
                            "    }",
                            "    const x257 = getValueByPath(responseJson, 'transcript_consequences[19].protein_end');",
                            "    if (x257 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].protein_end', x257);",
                            "    }",
                            "    const x258 = getValueByPath(responseJson, 'transcript_consequences[19].gene_symbol');",
                            "    if (x258 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].gene_symbol', x258);",
                            "    }",
                            "    const x259 = getValueByPath(responseJson, 'transcript_consequences[19].gene_id');",
                            "    if (x259 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].gene_id', x259);",
                            "    }",
                            "    const x260 = getValueByPath(responseJson, 'transcript_consequences[19].amino_acids');",
                            "    if (x260 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].amino_acids', x260);",
                            "    }",
                            "    const x261 = getValueByPath(responseJson, 'transcript_consequences[19].hgnc_id');",
                            "    if (x261 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].hgnc_id', x261);",
                            "    }",
                            "    const x262 = getValueByPath(responseJson, 'transcript_consequences[19].refseq_transcript_ids[0]');",
                            "    if (x262 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].refseq_transcript_ids[0]', x262);",
                            "    }",
                            "    const x263 = getValueByPath(responseJson, 'transcript_consequences[19].consequence_terms[0]');",
                            "    if (x263 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].consequence_terms[0]', x263);",
                            "    }",
                            "    const x264 = getValueByPath(responseJson, 'transcript_consequences[19].consequence_terms[1]');",
                            "    if (x264 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[19].consequence_terms[1]', x264);",
                            "    }",
                            "    const x265 = getValueByPath(responseJson, 'transcript_consequences[20].transcript_id');",
                            "    if (x265 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[20].transcript_id', x265);",
                            "    }",
                            "    const x266 = getValueByPath(responseJson, 'transcript_consequences[20].variant_allele');",
                            "    if (x266 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[20].variant_allele', x266);",
                            "    }",
                            "    const x267 = getValueByPath(responseJson, 'transcript_consequences[20].protein_id');",
                            "    if (x267 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[20].protein_id', x267);",
                            "    }",
                            "    const x268 = getValueByPath(responseJson, 'transcript_consequences[20].gene_symbol');",
                            "    if (x268 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[20].gene_symbol', x268);",
                            "    }",
                            "    const x269 = getValueByPath(responseJson, 'transcript_consequences[20].gene_id');",
                            "    if (x269 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[20].gene_id', x269);",
                            "    }",
                            "    const x270 = getValueByPath(responseJson, 'transcript_consequences[20].hgnc_id');",
                            "    if (x270 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[20].hgnc_id', x270);",
                            "    }",
                            "    const x271 = getValueByPath(responseJson, 'transcript_consequences[20].consequence_terms[0]');",
                            "    if (x271 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[20].consequence_terms[0]', x271);",
                            "    }",
                            "    const x272 = getValueByPath(responseJson, 'transcript_consequences[21].exon');",
                            "    if (x272 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].exon', x272);",
                            "    }",
                            "    const x273 = getValueByPath(responseJson, 'transcript_consequences[21].transcript_id');",
                            "    if (x273 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].transcript_id', x273);",
                            "    }",
                            "    const x274 = getValueByPath(responseJson, 'transcript_consequences[21].hgvsp');",
                            "    if (x274 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].hgvsp', x274);",
                            "    }",
                            "    const x275 = getValueByPath(responseJson, 'transcript_consequences[21].hgvsc');",
                            "    if (x275 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].hgvsc', x275);",
                            "    }",
                            "    const x276 = getValueByPath(responseJson, 'transcript_consequences[21].variant_allele');",
                            "    if (x276 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].variant_allele', x276);",
                            "    }",
                            "    const x277 = getValueByPath(responseJson, 'transcript_consequences[21].codons');",
                            "    if (x277 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].codons', x277);",
                            "    }",
                            "    const x278 = getValueByPath(responseJson, 'transcript_consequences[21].protein_id');",
                            "    if (x278 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].protein_id', x278);",
                            "    }",
                            "    const x279 = getValueByPath(responseJson, 'transcript_consequences[21].protein_start');",
                            "    if (x279 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].protein_start', x279);",
                            "    }",
                            "    const x280 = getValueByPath(responseJson, 'transcript_consequences[21].protein_end');",
                            "    if (x280 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].protein_end', x280);",
                            "    }",
                            "    const x281 = getValueByPath(responseJson, 'transcript_consequences[21].gene_symbol');",
                            "    if (x281 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].gene_symbol', x281);",
                            "    }",
                            "    const x282 = getValueByPath(responseJson, 'transcript_consequences[21].gene_id');",
                            "    if (x282 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].gene_id', x282);",
                            "    }",
                            "    const x283 = getValueByPath(responseJson, 'transcript_consequences[21].amino_acids');",
                            "    if (x283 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].amino_acids', x283);",
                            "    }",
                            "    const x284 = getValueByPath(responseJson, 'transcript_consequences[21].hgnc_id');",
                            "    if (x284 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].hgnc_id', x284);",
                            "    }",
                            "    const x285 = getValueByPath(responseJson, 'transcript_consequences[21].consequence_terms[0]');",
                            "    if (x285 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].consequence_terms[0]', x285);",
                            "    }",
                            "    const x286 = getValueByPath(responseJson, 'transcript_consequences[21].consequence_terms[1]');",
                            "    if (x286 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[21].consequence_terms[1]', x286);",
                            "    }",
                            "    const x287 = getValueByPath(responseJson, 'transcript_consequences[22].exon');",
                            "    if (x287 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].exon', x287);",
                            "    }",
                            "    const x288 = getValueByPath(responseJson, 'transcript_consequences[22].transcript_id');",
                            "    if (x288 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].transcript_id', x288);",
                            "    }",
                            "    const x289 = getValueByPath(responseJson, 'transcript_consequences[22].hgvsp');",
                            "    if (x289 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].hgvsp', x289);",
                            "    }",
                            "    const x290 = getValueByPath(responseJson, 'transcript_consequences[22].hgvsc');",
                            "    if (x290 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].hgvsc', x290);",
                            "    }",
                            "    const x291 = getValueByPath(responseJson, 'transcript_consequences[22].variant_allele');",
                            "    if (x291 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].variant_allele', x291);",
                            "    }",
                            "    const x292 = getValueByPath(responseJson, 'transcript_consequences[22].codons');",
                            "    if (x292 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].codons', x292);",
                            "    }",
                            "    const x293 = getValueByPath(responseJson, 'transcript_consequences[22].protein_id');",
                            "    if (x293 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].protein_id', x293);",
                            "    }",
                            "    const x294 = getValueByPath(responseJson, 'transcript_consequences[22].protein_start');",
                            "    if (x294 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].protein_start', x294);",
                            "    }",
                            "    const x295 = getValueByPath(responseJson, 'transcript_consequences[22].protein_end');",
                            "    if (x295 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].protein_end', x295);",
                            "    }",
                            "    const x296 = getValueByPath(responseJson, 'transcript_consequences[22].gene_symbol');",
                            "    if (x296 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].gene_symbol', x296);",
                            "    }",
                            "    const x297 = getValueByPath(responseJson, 'transcript_consequences[22].gene_id');",
                            "    if (x297 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].gene_id', x297);",
                            "    }",
                            "    const x298 = getValueByPath(responseJson, 'transcript_consequences[22].amino_acids');",
                            "    if (x298 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].amino_acids', x298);",
                            "    }",
                            "    const x299 = getValueByPath(responseJson, 'transcript_consequences[22].hgnc_id');",
                            "    if (x299 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].hgnc_id', x299);",
                            "    }",
                            "    const x300 = getValueByPath(responseJson, 'transcript_consequences[22].consequence_terms[0]');",
                            "    if (x300 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].consequence_terms[0]', x300);",
                            "    }",
                            "    const x301 = getValueByPath(responseJson, 'transcript_consequences[22].consequence_terms[1]');",
                            "    if (x301 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[22].consequence_terms[1]', x301);",
                            "    }",
                            "    const x302 = getValueByPath(responseJson, 'transcript_consequences[23].transcript_id');",
                            "    if (x302 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[23].transcript_id', x302);",
                            "    }",
                            "    const x303 = getValueByPath(responseJson, 'transcript_consequences[23].variant_allele');",
                            "    if (x303 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[23].variant_allele', x303);",
                            "    }",
                            "    const x304 = getValueByPath(responseJson, 'transcript_consequences[23].protein_id');",
                            "    if (x304 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[23].protein_id', x304);",
                            "    }",
                            "    const x305 = getValueByPath(responseJson, 'transcript_consequences[23].gene_symbol');",
                            "    if (x305 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[23].gene_symbol', x305);",
                            "    }",
                            "    const x306 = getValueByPath(responseJson, 'transcript_consequences[23].gene_id');",
                            "    if (x306 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[23].gene_id', x306);",
                            "    }",
                            "    const x307 = getValueByPath(responseJson, 'transcript_consequences[23].hgnc_id');",
                            "    if (x307 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[23].hgnc_id', x307);",
                            "    }",
                            "    const x308 = getValueByPath(responseJson, 'transcript_consequences[23].consequence_terms[0]');",
                            "    if (x308 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[23].consequence_terms[0]', x308);",
                            "    }",
                            "    const x309 = getValueByPath(responseJson, 'transcript_consequences[24].transcript_id');",
                            "    if (x309 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[24].transcript_id', x309);",
                            "    }",
                            "    const x310 = getValueByPath(responseJson, 'transcript_consequences[24].variant_allele');",
                            "    if (x310 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[24].variant_allele', x310);",
                            "    }",
                            "    const x311 = getValueByPath(responseJson, 'transcript_consequences[24].protein_id');",
                            "    if (x311 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[24].protein_id', x311);",
                            "    }",
                            "    const x312 = getValueByPath(responseJson, 'transcript_consequences[24].gene_symbol');",
                            "    if (x312 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[24].gene_symbol', x312);",
                            "    }",
                            "    const x313 = getValueByPath(responseJson, 'transcript_consequences[24].gene_id');",
                            "    if (x313 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[24].gene_id', x313);",
                            "    }",
                            "    const x314 = getValueByPath(responseJson, 'transcript_consequences[24].hgnc_id');",
                            "    if (x314 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[24].hgnc_id', x314);",
                            "    }",
                            "    const x315 = getValueByPath(responseJson, 'transcript_consequences[24].consequence_terms[0]');",
                            "    if (x315 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[24].consequence_terms[0]', x315);",
                            "    }",
                            "    const x316 = getValueByPath(responseJson, 'transcript_consequences[25].transcript_id');",
                            "    if (x316 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[25].transcript_id', x316);",
                            "    }",
                            "    const x317 = getValueByPath(responseJson, 'transcript_consequences[25].hgvsc');",
                            "    if (x317 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[25].hgvsc', x317);",
                            "    }",
                            "    const x318 = getValueByPath(responseJson, 'transcript_consequences[25].variant_allele');",
                            "    if (x318 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[25].variant_allele', x318);",
                            "    }",
                            "    const x319 = getValueByPath(responseJson, 'transcript_consequences[25].protein_id');",
                            "    if (x319 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[25].protein_id', x319);",
                            "    }",
                            "    const x320 = getValueByPath(responseJson, 'transcript_consequences[25].gene_symbol');",
                            "    if (x320 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[25].gene_symbol', x320);",
                            "    }",
                            "    const x321 = getValueByPath(responseJson, 'transcript_consequences[25].gene_id');",
                            "    if (x321 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[25].gene_id', x321);",
                            "    }",
                            "    const x322 = getValueByPath(responseJson, 'transcript_consequences[25].hgnc_id');",
                            "    if (x322 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[25].hgnc_id', x322);",
                            "    }",
                            "    const x323 = getValueByPath(responseJson, 'transcript_consequences[25].consequence_terms[0]');",
                            "    if (x323 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[25].consequence_terms[0]', x323);",
                            "    }",
                            "    const x324 = getValueByPath(responseJson, 'transcript_consequences[26].transcript_id');",
                            "    if (x324 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[26].transcript_id', x324);",
                            "    }",
                            "    const x325 = getValueByPath(responseJson, 'transcript_consequences[26].hgvsc');",
                            "    if (x325 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[26].hgvsc', x325);",
                            "    }",
                            "    const x326 = getValueByPath(responseJson, 'transcript_consequences[26].variant_allele');",
                            "    if (x326 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[26].variant_allele', x326);",
                            "    }",
                            "    const x327 = getValueByPath(responseJson, 'transcript_consequences[26].protein_id');",
                            "    if (x327 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[26].protein_id', x327);",
                            "    }",
                            "    const x328 = getValueByPath(responseJson, 'transcript_consequences[26].gene_symbol');",
                            "    if (x328 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[26].gene_symbol', x328);",
                            "    }",
                            "    const x329 = getValueByPath(responseJson, 'transcript_consequences[26].gene_id');",
                            "    if (x329 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[26].gene_id', x329);",
                            "    }",
                            "    const x330 = getValueByPath(responseJson, 'transcript_consequences[26].hgnc_id');",
                            "    if (x330 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[26].hgnc_id', x330);",
                            "    }",
                            "    const x331 = getValueByPath(responseJson, 'transcript_consequences[26].consequence_terms[0]');",
                            "    if (x331 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[26].consequence_terms[0]', x331);",
                            "    }",
                            "    const x332 = getValueByPath(responseJson, 'transcript_consequences[27].transcript_id');",
                            "    if (x332 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[27].transcript_id', x332);",
                            "    }",
                            "    const x333 = getValueByPath(responseJson, 'transcript_consequences[27].hgvsc');",
                            "    if (x333 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[27].hgvsc', x333);",
                            "    }",
                            "    const x334 = getValueByPath(responseJson, 'transcript_consequences[27].variant_allele');",
                            "    if (x334 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[27].variant_allele', x334);",
                            "    }",
                            "    const x335 = getValueByPath(responseJson, 'transcript_consequences[27].protein_id');",
                            "    if (x335 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[27].protein_id', x335);",
                            "    }",
                            "    const x336 = getValueByPath(responseJson, 'transcript_consequences[27].gene_symbol');",
                            "    if (x336 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[27].gene_symbol', x336);",
                            "    }",
                            "    const x337 = getValueByPath(responseJson, 'transcript_consequences[27].gene_id');",
                            "    if (x337 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[27].gene_id', x337);",
                            "    }",
                            "    const x338 = getValueByPath(responseJson, 'transcript_consequences[27].hgnc_id');",
                            "    if (x338 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[27].hgnc_id', x338);",
                            "    }",
                            "    const x339 = getValueByPath(responseJson, 'transcript_consequences[27].consequence_terms[0]');",
                            "    if (x339 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.transcript_consequences[27].consequence_terms[0]', x339);",
                            "    }",
                            "    const x340 = getValueByPath(responseJson, 'successfully_annotated');",
                            "    if (x340 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.successfully_annotated', x340);",
                            "    }",
                            "    const x341 = getValueByPath(responseJson, 'hotspots.license');",
                            "    if (x341 !== undefined) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.body.hotspots.license', x341);",
                            "    }",
                            "",
                            "    // Store response headers",
                            "    pm.response.headers.each(function(header) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.headers.', header.value);",
                            "    });",
                            "",
                            "    // Store response cookies",
                            "    pm.response.cookies.each(function(cookie) {",
                            "        pm.collectionVariables.set('fetchVariantAnnotationGET.response.cookies.', cookie.value);",
                            "    });",
                            "",
                            "    // Store status code",
                            "    pm.collectionVariables.set('fetchVariantAnnotationGET.response.status_code', pm.response.code);",
                            "} catch (error) {",
                            "    console.error('Failed to process response:', error.message);",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.collectionVariables.set('fetchVariantAnnotationGET.request.path_params.variant', pm.collectionVariables.get('fetchVariantAnnotationPOST.response.body[0].variant'));",
                            "pm.collectionVariables.set('fetchVariantAnnotationGET.request.query_params.isoformOverrideSource', 'uniprot');",
                            "pm.collectionVariables.set('fetchVariantAnnotationGET.request.query_params.token', '%7B%22source1%22%3A%22put-your-token1-here%22%2C%22source2%22%3A%22put-your-token2-here%22%7D');",
                            "pm.collectionVariables.set('fetchVariantAnnotationGET.request.query_params.fields', 'hotspots');"
                        ]
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "pm.environment.set('baseUrl', 'http://localhost:9000');"
                ]
            }
        }
    ]
}