{"all_cnt": 4, "all_request_sequence": [{"method": "POST", "api": "/elements/perimeter/ratio/groupBy/boundary", "url": "https://api.ohsome.org/v1/elements/perimeter/ratio/groupBy/boundary", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bboxes": "bbox_A7sD9q:8.6810,49.4160,8.6950,49.4300|bbox_B3tX9z:8.7,49.42,8.715,49.435", "bpolys": "poly_1:8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160|poly_2:8.7,49.42,8.715,49.42,8.715,49.435,8.7,49.435,8.7,49.42", "filter": "type=way and highway=primary", "format": "json"}, "payload_type": "application/json", "request_data": "method='POST' api='/elements/perimeter/ratio/groupBy/boundary' params={} payload={'bboxes': 'bbox_A7sD9q:8.6810,49.4160,8.6950,49.4300|bbox_B3tX9z:8.7,49.42,8.715,49.435', 'bpolys': 'poly_1:8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160|poly_2:8.7,49.42,8.715,49.42,8.715,49.435,8.7,49.435,8.7,49.42', 'filter': 'type=way and highway=primary', 'format': 'json'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T10:36:08.832672652\",\"status\":400,\"message\":\"Unknown parameter '{\\\"bboxes\\\": \\\"bbox_A7sD9q:8.6810,49.4160,8.6950,49.4300|bbox_B3tX9z:8.7,49.42,8.715,49.435\\\", \\\"bpolys\\\": \\\"poly_1:8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160|poly_2:8.7,49.42,8.715,49.42,8.715,49.435,8.7,49.435,8.7,49.42\\\", \\\"filter\\\": \\\"type' for this resource.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/perimeter/ratio/groupBy/boundary\"}"}, {"method": "POST", "api": "/elements/perimeter/ratio/groupBy/boundary", "url": "https://api.ohsome.org/v1/elements/perimeter/ratio/groupBy/boundary", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {"bpolys": "poly_1:8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160", "format": "json", "filter": "type=way and highway=primary"}, "payload": {}, "payload_type": "application/json", "request_data": "method='POST' api='/elements/perimeter/ratio/groupBy/boundary' params={'bpolys': 'poly_1:8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160', 'format': 'json', 'filter': 'type=way and highway=primary'} payload={}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T10:36:21.608193382\",\"status\":400,\"message\":\"Unknown parameter '{}' for this resource.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/perimeter/ratio/groupBy/boundary?bpolys=poly_1%3A8.6810%2C49.4160%2C8.6950%2C49.4160%2C8.6950%2C49.4300%2C8.6810%2C49.4300%2C8.6810%2C49.4160&format=json&filter=type%3Dway+and+highway%3Dprimary\"}"}, {"method": "POST", "api": "/elements/perimeter/ratio/groupBy/boundary", "url": "https://api.ohsome.org/v1/elements/perimeter/ratio/groupBy/boundary", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {"bpolys": "8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160", "filter": "type=way and highway=primary", "format": "json"}, "payload": {}, "payload_type": "application/json", "request_data": "method='POST' api='/elements/perimeter/ratio/groupBy/boundary' params={'bpolys': '8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160', 'filter': 'type=way and highway=primary', 'format': 'json'} payload={}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T10:36:33.422990672\",\"status\":400,\"message\":\"Unknown parameter '{}' for this resource.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/perimeter/ratio/groupBy/boundary?bpolys=8.6810%2C49.4160%2C8.6950%2C49.4160%2C8.6950%2C49.4300%2C8.6810%2C49.4300%2C8.6810%2C49.4160&filter=type%3Dway+and+highway%3Dprimary&format=json\"}"}, {"method": "POST", "api": "/elements/perimeter/ratio/groupBy/boundary", "url": "https://api.ohsome.org/v1/elements/perimeter/ratio/groupBy/boundary", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bpolys": "8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160", "filter": "type=way and highway=primary", "format": "json"}, "payload_type": "application/json", "request_data": "method='POST' api='/elements/perimeter/ratio/groupBy/boundary' params={} payload={'bpolys': '8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160', 'filter': 'type=way and highway=primary', 'format': 'json'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T10:36:51.798159714\",\"status\":400,\"message\":\"Unknown parameter '{\\\"bpolys\\\": \\\"8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160\\\", \\\"filter\\\": \\\"type' for this resource.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/perimeter/ratio/groupBy/boundary\"}"}], "right_results": [], "wrong_results": [{"request_info": "POST /elements/perimeter/ratio/groupBy/boundary with form-urlencoded body containing 'bboxes' and 'bpolys' parameters representing polygon boundaries and filter 'type=way and highway=primary'.", "oracle": "A 200 OK response containing a JSON object with perimeter ratio values grouped distinctly by each boundary polygon. Each ratio should be a positive decimal number, with no overlap or duplication across boundary groups.", "judge_reason": "The actual response returned a 400 Bad Request status with an error message indicating 'Unknown parameter' for 'bboxes' and 'bpolys'. This indicates the API rejected the multiple boundary parameters in the request and did not perform the expected ratio calculations. This is a significant deviation from the expected 200 OK success response with valid perimeter ratio data. The failure to recognize multiple valid boundary types in a single request impacts the core functionality tested here and does not align with the expected behavior.", "response": "HTTP 400 Bad Request with error message indicating unknown parameters 'bboxes' and 'bpolys', no valid perimeter ratio results returned."}, {"request_info": "POST /elements/perimeter/ratio/groupBy/boundary with 'bpolys' provided as a query parameter despite declared content-type 'application/x-www-form-urlencoded', filter 'type=way and highway=primary', and 'format=json'.", "oracle": "A 200 OK response containing a JSON object with perimeter ratio values grouped distinctly by each boundary polygon. Each ratio should be a positive decimal number, with no overlap or duplication across boundary groups.", "judge_reason": "The API returned a 400 Bad Request again, now with error message 'Unknown parameter {}'. This response means the request was not accepted, most likely due to parameter format or passing method issues. The endpoint does not seem to recognize or accept the provided 'bpolys' parameter as sent, preventing the perimeter ratio calculation from proceeding. This does not align with the expectation that the API accepts correctly formed polygon boundaries and returns perimeter ratio data successfully.", "response": "HTTP 400 Bad Request response with error message 'Unknown parameter {}'. No valid perimeter ratio computation or results returned."}, {"request_info": "POST /elements/perimeter/ratio/groupBy/boundary with 'bpolys' parameter in the query string with Content-Type 'application/x-www-form-urlencoded', along with filters and format=json.", "oracle": "A 200 OK response containing a JSON object with perimeter ratio values grouped distinctly by each boundary polygon. Each ratio should be a positive decimal number, with no overlap or duplication across boundary groups.", "judge_reason": "Repeated 400 Bad Request responses with 'Unknown parameter {}' error indicate the API is rejecting the 'bpolys' parameter and/or the request format. The endpoint does not appear to accept the polygon boundary parameter as sent, leading to failure to calculate or return perimeter ratio results. This behavior significantly deviates from the expected 200 OK successful response, showing the API does not currently align with the tested scenario requirements.", "response": "HTTP 400 Bad Request with error 'Unknown parameter {}'. No valid perimeter ratio computation or output."}, {"request_info": "POST /elements/perimeter/ratio/groupBy/boundary with 'bpolys', 'filter', and 'format' parameters sent as application/x-www-form-urlencoded payload dictionary.", "oracle": "A 200 OK response containing a JSON object with perimeter ratio values grouped distinctly by each boundary polygon. Each ratio should be a positive decimal number, with no overlap or duplication across boundary groups.", "judge_reason": "The API repeatedly returns 400 Bad Request with error messages indicating unknown parameters including the entire parameter dictionary. This suggests the API endpoint does not accept the parameters in the format as sent, likely expecting a different parameter structure or naming convention. Consequently, the API fails to process the valid polygon boundaries and does not compute the perimeter ratio results as expected. This is a significant deviation from the expected 200 OK response with valid perimeter ratio data.", "response": "HTTP 400 Bad Request with error 'Unknown parameter {\"bpolys\": ...'. No valid perimeter ratio computation or output."}], "test_scenario_response_message": "1. **Title:** Calculate Perimeter Ratio Grouped by Boundary with Valid Polygon and Boundary Types\n   - **API Endpoint:** POST /elements/perimeter/ratio/groupBy/boundary\n   - **Description:** Submit a spatial request containing multiple polygon boundaries of different types (e.g., bbox and bpoly) to calculate the ratio of the perimeter of OSM elements grouped by each specified boundary. This test verifies if the API can handle multiple valid boundary types in a single request while correctly associating the ratio results with appropriate boundaries.\n   - **Expected Response:** A 200 OK response containing a JSON object with perimeter ratio values grouped distinctly by each boundary polygon. Each ratio should be a positive decimal number, with no overlap or duplication across boundary groups.\n\n2. **Title:** Submit the Same Boundary Polygon Twice to Evaluate Idempotency and Response Consistency\n   - **API Endpoint:** POST /elements/perimeter/ratio/groupBy/boundary\n   - **Description:** Resend the identical request payload from step 1, repeating one or more boundary polygons twice within the grouping request. This step checks the API\u2019s idempotency and whether duplicated boundaries cause errors, duplicated results, or inconsistent perimeter ratio calculations.\n   - **Expected Response:** A 200 OK response with perimeter ratios identical to step 1, but without duplicated entries for repeated boundaries. The API should effectively de-duplicate repeated boundaries or handle them gracefully without error or inflated ratios.\n\n3. **Title:** Submit Malformed Geometry and Mixed Boundary Types to Trigger Validation Errors\n   - **API Endpoint:** POST /elements/perimeter/ratio/groupBy/boundary\n   - **Description:** Send a request with at least one malformed polygon geometry (e.g., self-intersecting, missing coordinates) and an unsupported boundary type included alongside valid boundaries. This evaluates system robustness and input validation error reporting when receiving invalid spatial inputs mixed with valid ones.\n   - **Expected Response:** A 400 Bad Request response with an error message clearly indicating which boundary polygons are invalid or incompatible and why (e.g., malformed geometry, unsupported boundary type). No perimeter ratio calculations should proceed for invalid boundaries.\n\n4. **Title:** Request Perimeter Ratio Grouping with Overlapping Boundaries to Confirm Correct Group Aggregation\n   - **API Endpoint:** POST /elements/perimeter/ratio/groupBy/boundary\n   - **Description:** Submit a request including polygons that spatially overlap partially or completely. This tests if the API correctly aggregates the perimeter ratios within each overlapping boundary independently without cross-boundary data leakage or incorrect summations.\n   - **Expected Response:** A 200 OK response correctly calculating separate perimeter ratio values for each overlapping boundary polygon. The results must not be aggregated cumulatively across boundaries, ensuring independent grouping and correct spatial filtering.\n\n5. **Title:** Concurrent Requests with Identical and Distinct Boundaries to Test Race Conditions and Data Consistency\n   - **API Endpoint:** POST /elements/perimeter/ratio/groupBy/boundary\n   - **Description:** Simultaneously issue multiple requests with both identical and different sets of boundary groups to simulate concurrent usage and potential race conditions in calculation and caching logic.\n   - **Expected Response:** All responses return valid 200 OK results with perimeter ratios matching the specific submitted boundary groups. There should be no data leaks or inconsistencies between responses, and no failures due to concurrency. Evaluate timing to confirm no unexpected delays or timeouts occur.\n\n**Summary:**  \nThis comprehensive test scenario exercises the POST /elements/perimeter/ratio/groupBy/boundary API through multiple realistic interactions including valid and duplicate requests, malformed inputs, overlapping polygons, and concurrent access. By mixing these operations, the scenario aims to uncover potential defects related to input validation, idempotency, spatial aggregation accuracy, error messaging clarity, and concurrency robustness, ensuring that perimeter ratio calculations grouped by diverse and complex boundaries behave reliably and consistently.", "usage": {"total_tokens": 154791, "total_cost": 0.0675216}, "unique_endpoints": {"200": [], "300": [], "400": ["POST /elements/perimeter"], "500": 0}, "total_true_result": 0, "total_false_result": 4}