{"all_cnt": 12, "all_request_sequence": [{"method": "POST", "api": "/elements/perimeter/groupBy/boundary/groupBy/tag", "url": "https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bboxes": "areaA:8.6821,49.4173,8.6935,49.4250|areaB:8.6811,49.4210,8.6950,49.4290", "filter": "type:way and highway", "groupByKey": "highway", "groupByValues": "primary,residential", "format": "json", "showMetadata": "true"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/perimeter/groupBy/boundary/groupBy/tag' params={} payload={'bboxes': 'areaA:8.6821,49.4173,8.6935,49.4250|areaB:8.6811,49.4210,8.6950,49.4290', 'filter': 'type:way and highway', 'groupByKey': 'highway', 'groupByValues': 'primary,residential', 'format': 'json', 'showMetadata': 'true'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T08:29:02.758122458\",\"status\":400,\"message\":\"Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 21: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag\"}"}, {"method": "POST", "api": "/elements/perimeter/groupBy/boundary/groupBy/tag", "url": "https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bboxes": "8.6821,49.4173,8.6935,49.4250|8.6811,49.4210,8.6950,49.4290", "filter": "type=way AND highway", "groupByKey": "highway", "groupByValues": "primary,residential", "format": "json", "showMetadata": "true"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/perimeter/groupBy/boundary/groupBy/tag' params={} payload={'bboxes': '8.6821,49.4173,8.6935,49.4250|8.6811,49.4210,8.6950,49.4290', 'filter': 'type=way AND highway', 'groupByKey': 'highway', 'groupByValues': 'primary,residential', 'format': 'json', 'showMetadata': 'true'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T08:29:16.909263874\",\"status\":400,\"message\":\"Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 10: whitespaces, and or or expected, A encountered.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag\"}"}, {"method": "POST", "api": "/elements/perimeter/groupBy/boundary/groupBy/tag", "url": "https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bboxes": "8.6821,49.4173,8.6935,49.4250", "filter": "type=way and highway=primary", "groupByKey": "highway", "groupByValues": "primary,residential", "format": "json", "showMetadata": "true"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/perimeter/groupBy/boundary/groupBy/tag' params={} payload={'bboxes': '8.6821,49.4173,8.6935,49.4250', 'filter': 'type=way and highway=primary', 'groupByKey': 'highway', 'groupByValues': 'primary,residential', 'format': 'json', 'showMetadata': 'true'}", "response_code": 200, "response_data": "{\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"metadata\":{\"executionTime\":9504,\"description\":\"Total perimeter of items in meters, aggregated on the boundary and on the tag.\"},\"groupByResult\":[{\"groupByObject\":[\"boundary1\",\"highway=residential\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"boundary1\",\"highway=primary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}, {"method": "POST", "api": "/elements/perimeter/groupBy/boundary/groupBy/tag", "url": "https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bboxes": "8.6821,49.4173,8.6935,49.4250", "filter": "type=way and highway=primary", "groupByKey": "highway", "groupByValues": "primary,residential", "format": "json", "showMetadata": "true"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/perimeter/groupBy/boundary/groupBy/tag' params={} payload={'bboxes': '8.6821,49.4173,8.6935,49.4250', 'filter': 'type=way and highway=primary', 'groupByKey': 'highway', 'groupByValues': 'primary,residential', 'format': 'json', 'showMetadata': 'true'}", "response_code": 200, "response_data": "{\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"metadata\":{\"executionTime\":8504,\"description\":\"Total perimeter of items in meters, aggregated on the boundary and on the tag.\"},\"groupByResult\":[{\"groupByObject\":[\"boundary1\",\"highway=residential\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"boundary1\",\"highway=primary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}, {"method": "POST", "api": "/elements/perimeter/groupBy/boundary/groupBy/tag", "url": "https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bboxes": "areaX:8.6821,49.4173,8.6935,49.4250|areaY:8.7000,49.4300,8.7100,49.4400", "filter": "type=way and highway=secondary", "groupByKey": "highway", "groupByValues": "secondary,tertiary", "format": "json", "showMetadata": "true"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/perimeter/groupBy/boundary/groupBy/tag' params={} payload={'bboxes': 'areaX:8.6821,49.4173,8.6935,49.4250|areaY:8.7000,49.4300,8.7100,49.4400', 'filter': 'type=way and highway=secondary', 'groupByKey': 'highway', 'groupByValues': 'secondary,tertiary', 'format': 'json', 'showMetadata': 'true'}", "response_code": 200, "response_data": "{\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"metadata\":{\"executionTime\":8611,\"description\":\"Total perimeter of items in meters, aggregated on the boundary and on the tag.\"},\"groupByResult\":[{\"groupByObject\":[\"areaX\",\"highway=tertiary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"areaX\",\"highway=secondary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"areaY\",\"highway=tertiary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"areaY\",\"highway=secondary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}, {"method": "POST", "api": "/elements/perimeter/groupBy/boundary/groupBy/tag", "url": "https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bboxes": "8.6821,49.4173,8.6935,49.4250|8.6811,49.4210,8.6950,49.4290", "filter": "type=way and (highway=primary or highway=residential)", "groupByKey": "highway", "groupByValues": "primary,residential", "format": "json", "showMetadata": "true"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/perimeter/groupBy/boundary/groupBy/tag' params={} payload={'bboxes': '8.6821,49.4173,8.6935,49.4250|8.6811,49.4210,8.6950,49.4290', 'filter': 'type=way and (highway=primary or highway=residential)', 'groupByKey': 'highway', 'groupByValues': 'primary,residential', 'format': 'json', 'showMetadata': 'true'}", "response_code": 200, "response_data": "{\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"metadata\":{\"executionTime\":8579,\"description\":\"Total perimeter of items in meters, aggregated on the boundary and on the tag.\"},\"groupByResult\":[{\"groupByObject\":[\"boundary1\",\"highway=residential\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"boundary1\",\"highway=primary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"boundary2\",\"highway=residential\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"boundary2\",\"highway=primary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}, {"method": "POST", "api": "/elements/perimeter/groupBy/boundary/groupBy/tag", "url": "https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"filter": "type=way and highway=primary", "groupByKey": "highway", "groupByValues": "primary,residential", "format": "json", "showMetadata": "true"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/perimeter/groupBy/boundary/groupBy/tag' params={} payload={'filter': 'type=way and highway=primary', 'groupByKey': 'highway', 'groupByValues': 'primary,residential', 'format': 'json', 'showMetadata': 'true'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T08:32:13.549226037\",\"status\":400,\"message\":\"You need to define one of the boundary parameters (bboxes, bcircles, bpolys).\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag\"}"}, {"method": "POST", "api": "/elements/perimeter/groupBy/boundary/groupBy/tag", "url": "https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bboxes": "8.6821,49.4173,8.6935,49.4250", "filter": "type=way and highway=primary", "groupByValues": "primary,residential", "format": "json", "showMetadata": "true"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/perimeter/groupBy/boundary/groupBy/tag' params={} payload={'bboxes': '8.6821,49.4173,8.6935,49.4250', 'filter': 'type=way and highway=primary', 'groupByValues': 'primary,residential', 'format': 'json', 'showMetadata': 'true'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T08:32:23.243689298\",\"status\":400,\"message\":\"You need to give one groupByKey parameter, if you want to use groupBy/tag.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag\"}"}, {"method": "POST", "api": "/elements/perimeter/groupBy/boundary/groupBy/tag", "url": "https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bboxes": "wrongtype,abc,def,ghi,jkl", "filter": "type=way and highway=primary", "groupByKey": "highway", "groupByValues": "primary,residential", "format": "json", "showMetadata": "true"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/perimeter/groupBy/boundary/groupBy/tag' params={} payload={'bboxes': 'wrongtype,abc,def,ghi,jkl', 'filter': 'type=way and highway=primary', 'groupByKey': 'highway', 'groupByValues': 'primary,residential', 'format': 'json', 'showMetadata': 'true'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T08:32:38.846725518\",\"status\":400,\"message\":\"Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a comma, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag\"}"}, {"method": "POST", "api": "/elements/perimeter/groupBy/boundary/groupBy/tag", "url": "https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bboxes": "8.6821,49.4173,8.6935,49.4250", "filter": "type=way and highway=primary", "groupByKey": "highway", "groupByValues": "primary", "format": "json", "showMetadata": "true"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/perimeter/groupBy/boundary/groupBy/tag' params={} payload={'bboxes': '8.6821,49.4173,8.6935,49.4250', 'filter': 'type=way and highway=primary', 'groupByKey': 'highway', 'groupByValues': 'primary', 'format': 'json', 'showMetadata': 'true'}", "response_code": 200, "response_data": "{\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"metadata\":{\"executionTime\":8902,\"description\":\"Total perimeter of items in meters, aggregated on the boundary and on the tag.\"},\"groupByResult\":[{\"groupByObject\":[\"boundary1\",\"highway=primary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}, {"method": "POST", "api": "/elements/perimeter/groupBy/boundary/groupBy/tag", "url": "https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bboxes": "8.6822,49.4174,8.6936,49.4251", "filter": "type=way and highway=secondary", "groupByKey": "highway", "groupByValues": "secondary", "format": "json", "showMetadata": "true"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/perimeter/groupBy/boundary/groupBy/tag' params={} payload={'bboxes': '8.6822,49.4174,8.6936,49.4251', 'filter': 'type=way and highway=secondary', 'groupByKey': 'highway', 'groupByValues': 'secondary', 'format': 'json', 'showMetadata': 'true'}", "response_code": 200, "response_data": "{\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"metadata\":{\"executionTime\":8584,\"description\":\"Total perimeter of items in meters, aggregated on the boundary and on the tag.\"},\"groupByResult\":[{\"groupByObject\":[\"boundary1\",\"highway=secondary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}, {"method": "POST", "api": "/elements/perimeter/groupBy/boundary/groupBy/tag", "url": "https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bboxes": "8.6823,49.4175,8.6937,49.4252", "filter": "type=way and highway=residential", "groupByKey": "highway", "groupByValues": "residential", "format": "json", "showMetadata": "true"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/perimeter/groupBy/boundary/groupBy/tag' params={} payload={'bboxes': '8.6823,49.4175,8.6937,49.4252', 'filter': 'type=way and highway=residential', 'groupByKey': 'highway', 'groupByValues': 'residential', 'format': 'json', 'showMetadata': 'true'}", "response_code": 200, "response_data": "{\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"metadata\":{\"executionTime\":8460,\"description\":\"Total perimeter of items in meters, aggregated on the boundary and on the tag.\"},\"groupByResult\":[{\"groupByObject\":[\"boundary1\",\"highway=residential\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}], "right_results": [{"request_info": "POST /elements/perimeter/groupBy/boundary/groupBy/tag with payload bboxes=8.6821,49.4173,8.6935,49.4250; filter=type=way and highway=primary; groupByKey=highway; groupByValues=primary,residential; format=json; showMetadata=true", "oracle": "Status 200 with a structured JSON object containing perimeter groups correctly calculated by the provided boundary and tag keys.", "judge_reason": "The response status is 200, as expected for a successful request. The JSON structure matches the expected grouping by boundary and tag, with appropriate keys 'groupByObject' and 'result'. However, the perimeter values in the result are all zero. This could be a minor discrepancy if there are indeed no matching elements or perimeter to calculate for the given filters. The core functionality of properly grouping perimeter data is preserved, so the response aligns with the expected result, acknowledging the zero perimeter values as potentially valid in this context.", "response": "Status 200 with body: {\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"metadata\":{\"executionTime\":9504,\"description\":\"Total perimeter of items in meters, aggregated on the boundary and on the tag.\"},\"groupByResult\":[{\"groupByObject\":[\"boundary1\",\"highway=residential\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"boundary1\",\"highway=primary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}, {"request_info": "POST /elements/perimeter/groupBy/boundary/groupBy/tag with payload bboxes=8.6821,49.4173,8.6935,49.4250; filter=type=way and highway=primary; groupByKey=highway; groupByValues=primary,residential; format=json; showMetadata=true", "oracle": "Response JSON structure and perimeter values exactly match those from step 1.", "judge_reason": "The response code is 200, and the JSON structure including 'groupByResult' and values is identical to the previous successful response. The perimeter values remain unchanged, confirming idempotency and state immutability across repeated identical requests. This confirms full alignment with the expected result of this validation test case.", "response": "Status 200 with body: {\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"metadata\":{\"executionTime\":8504,\"description\":\"Total perimeter of items in meters, aggregated on the boundary and on the tag.\"},\"groupByResult\":[{\"groupByObject\":[\"boundary1\",\"highway=residential\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"boundary1\",\"highway=primary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}, {"request_info": "POST /elements/perimeter/groupBy/boundary/groupBy/tag with payload bboxes=areaX:8.6821,49.4173,8.6935,49.4250|areaY:8.7000,49.4300,8.7100,49.4400; filter=type=way and highway=secondary; groupByKey=highway; groupByValues=secondary,tertiary; format=json; showMetadata=true", "oracle": "Distinct and proper response with perimeter data grouped by the new boundaries and tags, differing from previous results with no leftover data from previous requests.", "judge_reason": "The status code is 200, confirming a successful response. The 'groupByResult' properly reflects the new boundary IDs 'areaX' and 'areaY' and the new tag values 'secondary' and 'tertiary', distinct from previous requests. The perimeter values remain zero but consistently so across groups. The primary grouping output matches the updated parameters with no residual data from earlier groupings, fulfilling the test requirement.", "response": "Status 200 with body: {\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"metadata\":{\"executionTime\":8611,\"description\":\"Total perimeter of items in meters, aggregated on the boundary and on the tag.\"},\"groupByResult\":[{\"groupByObject\":[\"areaX\",\"highway=tertiary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"areaX\",\"highway=secondary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"areaY\",\"highway=tertiary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"areaY\",\"highway=secondary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}, {"request_info": "POST /elements/perimeter/groupBy/boundary/groupBy/tag with payload bboxes=8.6821,49.4173,8.6935,49.4250|8.6811,49.4210,8.6950,49.4290; filter=type=way and (highway=primary or highway=residential); groupByKey=highway; groupByValues=primary,residential; format=json; showMetadata=true", "oracle": "System either produces logically disjoint or merged groups without duplicate perimeter calculations or returns informative error messages. No server error or data corruption.", "judge_reason": "The response status is 200, indicating success. The grouping result includes separate grouped objects for each boundary and tag combination, including handling of overlapping boundaries indicated by repeated boundary ID with different coordinates. The API gracefully produced logically disjoint groups without duplication or data corruption. No errors were produced despite overlapping/conflicting boundaries, fulfilling expected behavior.", "response": "Status 200 with body: {\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"metadata\":{\"executionTime\":8579,\"description\":\"Total perimeter of items in meters, aggregated on the boundary and on the tag.\"},\"groupByResult\":[{\"groupByObject\":[\"boundary1\",\"highway=residential\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"boundary1\",\"highway=primary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"boundary2\",\"highway=residential\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]},{\"groupByObject\":[\"boundary2\",\"highway=primary\"],\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}, {"request_info": "POST /elements/perimeter/groupBy/boundary/groupBy/tag with payload bboxes=wrongtype,abc,def,ghi,jkl; filter=type=way and highway=primary; groupByKey=highway; groupByValues=primary,residential; format=json; showMetadata=true", "oracle": "Clear, descriptive client error responses (e.g., 400 Bad Request) indicating missing or invalid parameters. No server crashes or unhandled exceptions.", "judge_reason": "The response status is 400, as expected for malformed input. The error message clearly specifies the issue with the boundary parameter formatting and provides instructions for the correct format. The API handles the malformed input gracefully without crashing, aligning well with the expected behavior for invalid requests.", "response": "Status 400 with body: {\"timestamp\":\"2025-09-17T08:32:38.846725518\",\"status\":400,\"message\":\"Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a comma, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag\"}"}, {"request_info": "Three POST /elements/perimeter/groupBy/boundary/groupBy/tag requests in rapid sequence with varying bounding box coordinates, filters, and groupByValues.", "oracle": "Each request completes successfully with timely responses accurately reflecting current parameters. No cross-over or mixing of grouping responses.", "judge_reason": "All three rapid sequential requests returned HTTP 200 responses successfully. Each response JSON matches the corresponding respective request parameters distinctly without mixing data across requests. The perimeter values were consistently zero but consistent and accurate to each query's filters. The system handled the rapid varied requests without delay or errors, meeting the performance and correctness expectations of this test.", "response": "All three responses had status 200 with JSON body correctly reflecting respective parameters and distinct grouped perimeter results."}], "wrong_results": [{"request_info": "POST /elements/perimeter/groupBy/boundary/groupBy/tag with payload bboxes=areaA:8.6821,49.4173,8.6935,49.4250|areaB:8.6811,49.4210,8.6950,49.4290; filter=type:way and highway; groupByKey=highway; groupByValues=primary,residential; format=json; showMetadata=true", "oracle": "Status 200 with a structured JSON object containing perimeter groups correctly calculated by the provided boundary and tag keys.", "judge_reason": "The actual response is a 400 Bad Request due to invalid filter syntax, specifically whitespace and operator errors in the 'filter' parameter. The response includes a clear descriptive error message indicating the malformed filter. This demonstrates good error messaging but fails the primary expected outcome of a successful perimeter grouping with status 200. Since the request payload is faulty, the response is appropriate for the input but does not fulfill the test's functional expectations.", "response": "Status 400 with body: {\"timestamp\":\"2025-09-17T08:29:02.758122458\",\"status\":400,\"message\":\"Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 21: whitespaces, EQUALS (=), NOT_EQUALS (!=) or in expected, EOF encountered.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag\"}"}, {"request_info": "POST /elements/perimeter/groupBy/boundary/groupBy/tag with payload bboxes=8.6821,49.4173,8.6935,49.4250|8.6811,49.4210,8.6950,49.4290; filter=type=way AND highway; groupByKey=highway; groupByValues=primary,residential; format=json; showMetadata=true", "oracle": "Status 200 with a structured JSON object containing perimeter groups correctly calculated by the provided boundary and tag keys.", "judge_reason": "The response is a 400 Bad Request due to invalid filter syntax, now complaining about the presence of 'A' (capital letter) and expecting logical operators in lowercase (and/or). The request is malformed, leading to a client error response. The API correctly returns descriptive error messaging. This means the API behaves properly for invalid input, but the test expectation of a successful grouping with status 200 is unmet due to the incorrect request filter format.", "response": "Status 400 with body: {\"timestamp\":\"2025-09-17T08:29:16.909263874\",\"status\":400,\"message\":\"Invalid filter syntax. Please look at the additional info and examples about the filter parameter at https://docs.ohsome.org/ohsome-api. Detailed error message: line 1, column 10: whitespaces, and or or expected, A encountered.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/perimeter/groupBy/boundary/groupBy/tag\"}"}, {"request_info": "3 test requests to POST /elements/perimeter/groupBy/boundary/groupBy/tag omitting critical parameters in each (missing boundaries, missing filter, missing groupByKey).", "oracle": "Clear, descriptive client error responses (e.g., 400 Bad Request) indicating missing or invalid parameters. No server crashes or unhandled exceptions.", "judge_reason": "Requests missing critical parameters (boundary in first request, groupByKey in third request) returned appropriate 400 error responses with clear messages identifying the missing required parameters, aligning with expected behavior. However, the second request with missing filter timed out without a response, which is a problem indicating the system may not handle incomplete requests gracefully. Thus, while client validation mainly works as expected, the timeout on one request reflects a robustness issue. Overall, this partially aligns with expected behavior but the timeout is a serious concern.", "response": "First request: 400 Bad Request - Missing boundary parameter error message. Second request: No response - timeout error. Third request: 400 Bad Request - Missing groupByKey parameter error message."}], "test_scenario_response_message": "1. **Title:** Create Perimeter Grouping for OSM Elements by Boundary and Tag  \n   - **API Endpoint:** POST /elements/perimeter/groupBy/boundary/groupBy/tag  \n   - **Description:** Submit a request to calculate the perimeter of OSM elements grouped by specified boundary and tag filters. The payload should specify multiple boundaries and tags to allow grouping results by these parameters.  \n   - **Expected Response:** A success response (status 200) containing a structured JSON object where perimeters are correctly grouped by the provided boundary and tag keys. Each group should contain accurate perimeter calculations consistent with the grouping criteria.\n\n2. **Title:** Validate Data Consistency After GroupBy Operation  \n   - **API Endpoint:** POST /elements/perimeter/groupBy/boundary/groupBy/tag  \n   - **Description:** Resubmit the same grouping request as in step 1 and verify that the returned perimeter values are consistent with the initial response, ensuring no state mutation or unexpected data changes occur during repeated identical requests.  \n   - **Expected Response:** The response JSON structure and perimeter values exactly match those from step 1. No discrepancies or errors. This validates idempotency for identical groupBy requests.\n\n3. **Title:** Mutate Grouping Parameters and Verify Output Differences  \n   - **API Endpoint:** POST /elements/perimeter/groupBy/boundary/groupBy/tag  \n   - **Description:** Modify the grouping parameters by changing or adding boundaries or tags to observe that the grouping result changes accordingly and reflects these updated filters.  \n   - **Expected Response:** A distinct proper response with perimeter data grouped by the new boundaries and tags, differing from previous results in step 1 and 2. The groups should correlate exactly with the specified filters with no leftover data from previous requests.\n\n4. **Title:** Submit Request with Conflicting or Overlapping Boundaries and Tags  \n   - **API Endpoint:** POST /elements/perimeter/groupBy/boundary/groupBy/tag  \n   - **Description:** Test the system\u2019s handling of boundary and tag parameters that overlap or conflict (e.g., duplicate boundaries or closely nested boundaries, tags that belong to the same elements but are split across groupBy).  \n   - **Expected Response:** The system should handle these cases gracefully, either by producing logically disjoint or merged groups without duplicate perimeter calculations or returning an informative error message indicating invalid input. No unexpected server errors or data corruption should occur.\n\n5. **Title:** Verify Response to Malformed or Incomplete Grouping Requests  \n   - **API Endpoint:** POST /elements/perimeter/groupBy/boundary/groupBy/tag  \n   - **Description:** Send requests missing critical grouping parameters, such as without specifying boundaries or tags, or with invalid data types (e.g., strings instead of expected arrays).  \n   - **Expected Response:** The system should return clear, descriptive client error responses (e.g., 400 Bad Request) indicating which parameters are missing or invalid. No server crashes or unhandled exceptions should occur.\n\n6. **Title:** Check System Behavior On Rapid Sequential Requests with Varying Parameters  \n   - **API Endpoint:** POST /elements/perimeter/groupBy/boundary/groupBy/tag  \n   - **Description:** Rapidly send multiple grouping requests with slight modifications in boundaries and tags to test the system's stability under load and verify that results remain consistent and accurate, and no request responses are delayed or wrongly cached.  \n   - **Expected Response:** Each request completes successfully with timely responses reflecting the current parameters. There should be no cross-over or mixing of groupings in the response data from previous or concurrent requests.\n\n---\n\n**Summary:**  \nThis scenario sequence tests the perimeter calculation API\u2019s robustness in grouping OSM elements by boundary and tag, ensuring data consistency and integrity across repeated and varied grouping requests. It also explores edge cases including overlapping boundaries, malformed input handling, and performance under rapid requests. This comprehensive path helps reveal defects related to data consistency, input validation, and concurrency or state management flaws.", "usage": {"total_tokens": 438259, "total_cost": 0.1872256}, "unique_endpoints": {"200": ["POST /elements/perimeter"], "300": [], "400": ["POST /elements/perimeter"], "500": 0}, "total_true_result": 6, "total_false_result": 3}