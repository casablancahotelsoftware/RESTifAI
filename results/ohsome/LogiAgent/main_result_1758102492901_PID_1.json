{"all_cnt": 7, "all_request_sequence": [{"method": "POST", "api": "/elements/length/density/groupBy/boundary", "url": "https://api.ohsome.org/v1/elements/length/density/groupBy/boundary", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {"bpolys": "poly1:8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160", "filter": "type=way and highway=primary"}, "payload": {}, "payload_type": "application/json", "request_data": "method='POST' api='/elements/length/density/groupBy/boundary' params={'bpolys': 'poly1:8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160', 'filter': 'type=way and highway=primary'} payload={}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T09:44:01.887755493\",\"status\":400,\"message\":\"Unknown parameter '{}' for this resource.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/length/density/groupBy/boundary?bpolys=poly1%3A8.6810%2C49.4160%2C8.6950%2C49.4160%2C8.6950%2C49.4300%2C8.6810%2C49.4300%2C8.6810%2C49.4160&filter=type%3Dway+and+highway%3Dprimary\"}"}, {"method": "POST", "api": "/elements/length/density/groupBy/boundary", "url": "https://api.ohsome.org/v1/elements/length/density/groupBy/boundary", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {"bpolys": "8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160", "filter": "type=way and highway=primary"}, "payload": {}, "payload_type": "application/json", "request_data": "method='POST' api='/elements/length/density/groupBy/boundary' params={'bpolys': '8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160', 'filter': 'type=way and highway=primary'} payload={}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T09:44:51.968430232\",\"status\":400,\"message\":\"Unknown parameter '{}' for this resource.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/length/density/groupBy/boundary?bpolys=8.6810%2C49.4160%2C8.6950%2C49.4160%2C8.6950%2C49.4300%2C8.6810%2C49.4300%2C8.6810%2C49.4160&filter=type%3Dway+and+highway%3Dprimary\"}"}, {"method": "POST", "api": "/elements/length/density/groupBy/boundary", "url": "https://api.ohsome.org/v1/elements/length/density/groupBy/boundary", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bpolys": "{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[8.6810,49.4160],[8.6950,49.4160],[8.6950,49.4300],[8.6810,49.4300],[8.6810,49.4160]]]},\"properties\":{\"id\":\"poly1\"}}]}", "filter": "type=way and highway=primary"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/length/density/groupBy/boundary' params={} payload={'bpolys': '{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[8.6810,49.4160],[8.6950,49.4160],[8.6950,49.4300],[8.6810,49.4300],[8.6810,49.4160]]]},\"properties\":{\"id\":\"poly1\"}}]}', 'filter': 'type=way and highway=primary'}", "response_code": 200, "response_data": "{\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"groupByResult\":[{\"groupByObject\":\"poly1\",\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}, {"method": "POST", "api": "/elements/length/density/groupBy/boundary", "url": "https://api.ohsome.org/v1/elements/length/density/groupBy/boundary", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bpolys": "{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[8.6815,49.4165],[8.6955,49.4165],[8.6955,49.4305],[8.6815,49.4305],[8.6815,49.4165]]]},\"properties\":{\"id\":\"updatedPoly1\"}}]}", "filter": "type=way and highway=primary"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/length/density/groupBy/boundary' params={} payload={'bpolys': '{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[8.6815,49.4165],[8.6955,49.4165],[8.6955,49.4305],[8.6815,49.4305],[8.6815,49.4165]]]},\"properties\":{\"id\":\"updatedPoly1\"}}]}', 'filter': 'type=way and highway=primary'}", "response_code": 200, "response_data": "{\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"groupByResult\":[{\"groupByObject\":\"updatedPoly1\",\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}, {"method": "POST", "api": "/elements/length/density/groupBy/boundary", "url": "https://api.ohsome.org/v1/elements/length/density/groupBy/boundary", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bpolys": "{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[8.6810,49.4160],[8.6950,49.4160],[8.6950,49.4300],[8.6810,49.4300],[8.6810,49.4160]]]},\"properties\":{\"id\":\"poly1\"}}]}", "bcircles": "areaCircle1:8.6895,49.4230,500", "filter": "type=way and highway=primary"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/length/density/groupBy/boundary' params={} payload={'bpolys': '{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[8.6810,49.4160],[8.6950,49.4160],[8.6950,49.4300],[8.6810,49.4300],[8.6810,49.4160]]]},\"properties\":{\"id\":\"poly1\"}}]}', 'bcircles': 'areaCircle1:8.6895,49.4230,500', 'filter': 'type=way and highway=primary'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T09:46:07.979746991\",\"status\":400,\"message\":\"Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/length/density/groupBy/boundary\"}"}, {"method": "POST", "api": "/elements/length/density/groupBy/boundary", "url": "https://api.ohsome.org/v1/elements/length/density/groupBy/boundary", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bpolys": "8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160", "filter": "type=way and highway=primary"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/length/density/groupBy/boundary' params={} payload={'bpolys': '8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160', 'filter': 'type=way and highway=primary'}", "response_code": 200, "response_data": "{\"attribution\":{\"url\":\"https://ohsome.org/copyrights\",\"text\":\"\\u00a9 OpenStreetMap contributors\"},\"apiVersion\":\"1.10.4\",\"groupByResult\":[{\"groupByObject\":\"boundary1\",\"result\":[{\"timestamp\":\"2025-08-20T11:00:00Z\",\"value\":0.0}]}]}"}, {"method": "POST", "api": "/elements/length/density/groupBy/boundary", "url": "https://api.ohsome.org/v1/elements/length/density/groupBy/boundary", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bpolys": "8.6810,49.4160,8.6950,49.4160,8.6900", "filter": "type=way and highway=primary"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/length/density/groupBy/boundary' params={} payload={'bpolys': '8.6810,49.4160,8.6950,49.4160,8.6900', 'filter': 'type=way and highway=primary'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T09:47:04.571460157\",\"status\":400,\"message\":\"Error in processing the boundary parameter. Please remember to follow the format, where you separate every coordinate with a comma, each boundary object with a pipe-sign and add optional custom ids to every first coordinate with a colon.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/length/density/groupBy/boundary\"}"}], "right_results": [{"request_info": "POST /elements/length/density/groupBy/boundary with form-encoded valid GeoJSON polygon boundary and filter.", "oracle": "HTTP 200 OK with a JSON response containing the density aggregated by the given polygon boundary. The response should accurately reflect the spatial distribution and length of elements inside the boundary.", "judge_reason": "Response returned HTTP 200 OK as expected. The response body includes the proper fields such as attribution, apiVersion, and groupByResult with matching polygon ID 'poly1'. The result array contains a density value which is 0.0, potentially due to no matching elements in the polygon area with the given filter. This minor discrepancy in value does not affect the main functionality or structure of the response. Thus, the response aligns well with expectations.", "response": "HTTP 200 OK with JSON response containing groupByResult using polygon ID 'poly1' and density value 0.0."}, {"request_info": "POST /elements/length/density/groupBy/boundary with form-encoded valid GeoJSON polygon boundary updatedPoly1 and filter for highway primary.", "oracle": "HTTP 200 OK with a JSON response showing a changed density result reflecting the modified boundary. The element density should differ logically based on the new spatial area.", "judge_reason": "The response returned HTTP 200 OK with the expected groupByObject 'updatedPoly1' matching the modified polygon ID. The structure and fields are correct. However, the density value is 0.0, identical to the previous test case's result, showing no difference despite the slightly changed boundary. This contradicts the expectation of a changed density reflecting the boundary modification. This constitutes a minor discrepancy but the API functionality and response structure align with expectations.", "response": "HTTP 200 OK with JSON response containing groupByResult for 'updatedPoly1' with density value 0.0."}, {"request_info": "POST /elements/length/density/groupBy/boundary with bpolys as raw coordinates string and filter for highway primary.", "oracle": "HTTP 200 OK with a JSON response containing the density aggregated by the given polygon boundary. The response should accurately reflect the spatial distribution and length of elements inside the boundary.", "judge_reason": "The API returned HTTP 200 OK, with expected fields such as attribution, apiVersion and groupByResult. The groupByObject id returned is 'boundary1' instead of the input 'poly1', indicating the API generates an id when none is provided or input is raw coordinates. The density value is 0.0, consistent with previous tests. This difference in polygon id is minor and does not affect core functionality. Overall, the response aligns well with expectations.", "response": "HTTP 200 OK with JSON response containing groupByResult with groupByObject 'boundary1' and density value 0.0."}, {"request_info": "POST /elements/length/density/groupBy/boundary with malformed bpolys coordinates.", "oracle": "HTTP 400 Bad Request with a descriptive error message explaining the boundary format issue. No successful density data should be returned.", "judge_reason": "The API returned HTTP 400 Bad Request as expected for the malformed polygon boundary parameter. The error message clearly explains the issue and provides instructions on the correct format. This matches the test scenario requirement for input validation and error messaging.", "response": "HTTP 400 Bad Request with message about error processing boundary parameter and expected format. No density data returned."}], "wrong_results": [{"request_info": "POST /elements/length/density/groupBy/boundary with bpolys and filter parameters sent as URL query parameters instead of form-encoded body.", "oracle": "HTTP 200 OK with a JSON response containing the density aggregated by the given polygon boundary. The response should accurately reflect the spatial distribution and length of elements inside the boundary.", "judge_reason": "The actual response is HTTP 400 Bad Request with message 'Unknown parameter '{}' for this resource.' This indicates the parameters were sent incorrectly as URL query parameters rather than in the request body as form-encoded data. The API did not recognize any valid parameters and thus returned an error. This is a significant deviation affecting the functionality, as the core density data was not returned.", "response": "HTTP 400 Bad Request with message 'Unknown parameter '{}' for this resource.'"}, {"request_info": "POST /elements/length/density/groupBy/boundary with incorrectly formatted/misplaced bpolys and filter parameters.", "oracle": "HTTP 200 OK with a JSON response containing the density aggregated by the given polygon boundary. The response should accurately reflect the spatial distribution and length of elements inside the boundary.", "judge_reason": "Repeated attempts to send the polygon boundary and filter parameters as query string parameters or as payload failed, resulting in HTTP 400 Bad Request with message 'Unknown parameter' or read timeouts. The API expects proper form-encoded body parameters or GeoJSON format, which was not delivered correctly. This mismatch indicates a fundamental misalignment with expected input format, leading to failure to obtain the expected density data.", "response": "HTTP 400 Bad Request with message 'Unknown parameter '{}' for this resource.' or read timeout errors."}, {"request_info": "POST /elements/length/density/groupBy/boundary with both bpolys and bcircles in the payload.", "oracle": "HTTP 200 OK with density data grouped by each boundary type separately. Data consistency and correct aggregation for each boundary type must be verified.", "judge_reason": "The API returned HTTP 400 Bad Request with a message stating that more than one boundary parameter was defined or the format was incorrect. This indicates the API does not accept multiple boundary types in a single request or the format used to combine them is invalid. This contradicts the expectation of a successful response with grouped data by boundary type. Hence, this is a significant deviation from the expected behavior.", "response": "HTTP 400 Bad Request with message 'Your provided boundary parameter (bboxes, bcircles, or bpolys) does not fit its format, or you defined more than one boundary parameter.'"}], "test_scenario_response_message": "1. **Title:** Initial Density Grouping by Boundary with Valid Polygon\n   - **API Endpoint:** POST /elements/length/density/groupBy/boundary\n   - **Description:** Submit a request with a valid polygon boundary (bpoly) to retrieve the density of OSM elements based on their length within the specified geographic area.\n   - **Expected Response:** HTTP 200 OK with a JSON response containing the density aggregated by the given polygon boundary. The response should accurately reflect the spatial distribution and length of elements inside the boundary.\n\n2. **Title:** Repeat Density Query with Slightly Modified Boundary Polygon\n   - **API Endpoint:** POST /elements/length/density/groupBy/boundary\n   - **Description:** Send another request with a polygon boundary slightly altered (e.g., shifting one vertex coordinate) to verify system sensitivity to boundary changes and verify that density values update consistently.\n   - **Expected Response:** HTTP 200 OK with a JSON response showing a changed density result reflecting the modified boundary. The element density should differ logically based on the new spatial area.\n\n3. **Title:** Density Query with Mixed Boundary Types (bpoly and bcircle)\n   - **API Endpoint:** POST /elements/length/density/groupBy/boundary\n   - **Description:** Test the API\u2019s ability to handle multiple boundary types in a single request, e.g., a polygon combined with a circular boundary.\n   - **Expected Response:** HTTP 200 OK with density data grouped by each boundary type separately. Data consistency and correct aggregation for each boundary type must be verified.\n\n4. **Title:** Validate Error Handling for Malformed Boundary Input\n   - **API Endpoint:** POST /elements/length/density/groupBy/boundary\n   - **Description:** Submit a request with an intentionally malformed polygon boundary (e.g., invalid coordinate format or self-intersecting polygon) to probe the API\u2019s input validation and error messaging.\n   - **Expected Response:** HTTP 400 Bad Request with a descriptive error message explaining the boundary format issue. No successful density data should be returned.\n\n5. **Title:** Concurrent Requests with Identical Boundaries to Test State Management\n   - **API Endpoint:** POST /elements/length/density/groupBy/boundary (executed concurrently multiple times)\n   - **Description:** Simultaneously send multiple requests using the same valid boundary polygon to test concurrency handling and verify no data inconsistency or race conditions occur.\n   - **Expected Response:** Each request returns HTTP 200 OK with consistent density results. No request should fail or produce differing aggregation results due to concurrency.\n\n6. **Title:** Density Query with Boundary That Encloses No Elements\n   - **API Endpoint:** POST /elements/length/density/groupBy/boundary\n   - **Description:** Use a polygon boundary in an area devoid of OSM elements to verify the system\u2019s behavior when no data matches the spatial filter.\n   - **Expected Response:** HTTP 200 OK with an empty result or density value of zero, indicating correct handling of queries with no matching elements.\n\n7. **Title:** Large-Scale Boundary Coverage for Performance and Correctness\n   - **API Endpoint:** POST /elements/length/density/groupBy/boundary\n   - **Description:** Submit a request featuring a large and complex polygon boundary (e.g., encompassing an entire city or region) to evaluate API performance and density aggregation correctness over extensive data sets.\n   - **Expected Response:** HTTP 200 OK with density results matching expected aggregated values over the large area. API should respond within acceptable performance limits without timeouts or errors.\n\n8. **Title:** Query with Multiple Overlapping Boundaries to Assess Aggregation Behavior\n   - **API Endpoint:** POST /elements/length/density/groupBy/boundary\n   - **Description:** Provide multiple boundaries in the request that partly overlap to test correct counting and grouping of element lengths without double counting or omission.\n   - **Expected Response:** HTTP 200 OK with density results for each boundary. The returned densities should reflect overlapping areas logically without data duplication.\n\n9. **Title:** Request with Empty Boundary Parameter to Test Mandatory Field Enforcement\n   - **API Endpoint:** POST /elements/length/density/groupBy/boundary\n   - **Description:** Send a request with an empty boundary array or missing boundary parameter to check the system\u2019s enforcement of mandatory spatial parameters.\n   - **Expected Response:** HTTP 400 Bad Request with a clear validation error indicating that boundary parameters are required.\n\n10. **Title:** Density Grouping Request with Additional Non-Supported Parameters to Test Strictness\n    - **API Endpoint:** POST /elements/length/density/groupBy/boundary\n    - **Description:** Include unsupported or extraneous fields in the request payload to verify the API\u2019s handling of unexpected inputs and strict schema validation.\n    - **Expected Response:** HTTP 400 Bad Request or HTTP 422 Unprocessable Entity with detailed error messages specifying unrecognized parameters, ensuring that the API strictly validates input format.\n\n\n**Summary:**  \nThis detailed scenario sequence tests the POST /elements/length/density/groupBy/boundary API through a variety of complex, realistic, and logically connected interactions. It examines proper handling of different boundary types, input validation robustness, concurrency stability, spatial data aggregation accuracy including overlaps and empty sets, performance with large boundaries, and strict enforcement of input schemas. The test aims to uncover data consistency flaws, state management issues, input validation weaknesses, and error response correctness.", "usage": {"total_tokens": 459409, "total_cost": 0.1942696}, "unique_endpoints": {"200": ["POST /elements/length"], "300": [], "400": ["POST /elements/length"], "500": 0}, "total_true_result": 4, "total_false_result": 3}