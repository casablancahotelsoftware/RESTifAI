{"all_cnt": 2, "all_request_sequence": [{"method": "POST", "api": "/users/count/groupBy/tag", "url": "https://api.ohsome.org/v1/users/count/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"filter": "highway=primary or building=yes or emergency=yes or tourism=museum", "groupByKey": "highway,building,emergency,tourism"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/users/count/groupBy/tag' params={} payload={'filter': 'highway=primary or building=yes or emergency=yes or tourism=museum', 'groupByKey': 'highway,building,emergency,tourism'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T08:36:06.996751874\",\"status\":400,\"message\":\"You need to give one groupByKey parameter, if you want to use groupBy/tag.\",\"requestUrl\":\"https://api.ohsome.org/v1/users/count/groupBy/tag\"}"}, {"method": "POST", "api": "/users/count/groupBy/tag", "url": "https://api.ohsome.org/v1/users/count/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"filter": "highway=primary or building=yes or emergency=yes or tourism=museum", "groupByKey": "highway"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/users/count/groupBy/tag' params={} payload={'filter': 'highway=primary or building=yes or emergency=yes or tourism=museum', 'groupByKey': 'highway'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T08:36:20.647799025\",\"status\":400,\"message\":\"You need to define one of the boundary parameters (bboxes, bcircles, bpolys).\",\"requestUrl\":\"https://api.ohsome.org/v1/users/count/groupBy/tag\"}"}], "right_results": [], "wrong_results": [{"request_info": "POST /users/count/groupBy/tag with payload {filter:'highway=primary or building=yes or emergency=yes or tourism=museum', groupByKey:'highway,building,emergency,tourism'} and Content-Type: application/x-www-form-urlencoded", "oracle": "A 200 OK response containing a JSON object showing counts grouped correctly by each requested tag, ensuring that counts for all provided tags are present, non-negative, and consistent with OSM user data.", "judge_reason": "The response status code is 400 Bad Request with an error message indicating that only one 'groupByKey' parameter should be provided, which means the request format with multiple keys separated by commas is invalid. This prevents the API from returning the expected grouping counts and fails to test multiple tag grouping as intended. This is a significant deviation from the expected 200 response and proper grouped output.", "response": "Status Code: 400, Body: {\"timestamp\":\"2025-09-17T08:36:06.996751874\",\"status\":400,\"message\":\"You need to give one groupByKey parameter, if you want to use groupBy/tag.\",\"requestUrl\":\"https://api.ohsome.org/v1/users/count/groupBy/tag\"}"}, {"request_info": "POST /users/count/groupBy/tag with payload {filter:'highway=primary or building=yes or emergency=yes or tourism=museum', groupByKey:'highway'} and Content-Type: application/x-www-form-urlencoded", "oracle": "A 200 OK response containing a JSON object showing counts grouped correctly by each requested tag, ensuring that counts for all provided tags are present, non-negative, and consistent with OSM user data.", "judge_reason": "The API returned a 400 Bad Request with an error message stating a required boundary parameter (bboxes, bcircles, or bpolys) is missing. This is a mandatory parameter for the request, and its absence prevents the API from processing the request successfully. Therefore, the response does not align with the expected successful 200 response.", "response": "Status Code: 400, Body: {\"timestamp\":\"2025-09-17T08:36:20.647799025\",\"status\":400,\"message\":\"You need to define one of the boundary parameters (bboxes, bcircles, bpolys).\",\"requestUrl\":\"https://api.ohsome.org/v1/users/count/groupBy/tag\"}"}], "test_scenario_response_message": "1. **Title:** Count OSM Users Grouped by Tag with Multiple Tag Filters\n   - **API Endpoint:** POST /users/count/groupBy/tag\n   - **Description:** Make a request to count the number of OSM users grouped by a set of specified tags. Provide a payload containing multiple tag filters, including both common tags (e.g., \"highway\", \"building\") and less common tags (e.g., \"emergency\", \"tourism\"). This tests the API\u2019s ability to group counts accurately when handling multiple tags simultaneously.\n   - **Expected Response:** A 200 OK response containing a JSON object showing counts grouped correctly by each requested tag, ensuring that counts for all provided tags are present, non-negative, and consistent with OSM user data.\n\n2. **Title:** Repeated GroupBy Tag Requests to Detect State Mutation or Caching Issues\n   - **API Endpoint:** POST /users/count/groupBy/tag\n   - **Description:** Repeat the same request payload from Step 1 several times in quick succession to verify the API returns consistent user counts without unexpected variations or errors, which could indicate stateful caching issues or concurrency bugs.\n   - **Expected Response:** Each response should consistently return the same grouping counts with no discrepancy. There should be no server or client errors, and response time should remain stable.\n\n3. **Title:** Count OSM Users Grouped by Nested Tags with Invalid Tag Syntax\n   - **API Endpoint:** POST /users/count/groupBy/tag\n   - **Description:** Submit a request with an invalid tag syntax (e.g., malformed tag keys or empty tag values) alongside valid tags to check the API\u2019s validation and error handling mechanisms.\n   - **Expected Response:** The API should return a 400 Bad Request with descriptive error messages indicating which tag(s) are invalid. The response must not process any partial grouping counts or silently ignore invalid tags.\n\n4. **Title:** Count OSM Users Grouped by Large Number of Tags to Test Scalability\n   - **API Endpoint:** POST /users/count/groupBy/tag\n   - **Description:** Send a request including an unusually large list of different tags (e.g., 50+ tags) to assess the API\u2019s ability to handle large inputs efficiently without performance degradation or timeouts.\n   - **Expected Response:** A successful 200 OK response with counts grouped by all the provided tags. Response time should be reasonable, no server timeouts or memory errors should occur, and the output should contain all requested tags.\n\n5. **Title:** Count Users Grouped by Tag with Boundary Filters to Check Unexpected Dependencies\n   - **API Endpoint:** POST /users/count/groupBy/tag\n   - **Description:** Include geo-boundary filters or spatial constraints (if supported) along with tag grouping parameters to verify if the API properly restricts user counting according to spatial context, or returns appropriate errors if such parameters are unsupported.\n   - **Expected Response:** If spatial filtering is supported, the response should only count users within the specified boundaries grouped by tags. If unsupported, the API should return a clear error message or ignore boundary parameters without impacting tag grouping results.\n\n6. **Title:** Verify Data Consistency by Comparing Counts of Single Tags versus Combined Tags\n   - **API Endpoint:** POST /users/count/groupBy/tag\n   - **Description:** First, make separate requests for counts grouped by individual tags (e.g., \"highway\" only, then \"building\" only). Then send a combined request with these tags together and compare aggregated results for consistency across single and combined tag queries.\n   - **Expected Response:** Counts from the combined tag request should be consistent and logically coherent with counts from individual tag requests (e.g., combined counts should not be less than individual counts), verifying no mismatches or aggregation bugs.\n\n**Summary:**  \nThis scenario tests the POST /users/count/groupBy/tag endpoint extensively by validating correct counting behavior over multiple tags, response consistency under repeated calls, robust validation for tag inputs, performance under heavy load, interaction with spatial filters, and logical consistency between individual and combined tag groupings. This helps identify potential bugs in parameter handling, state management, input validation, and data aggregation logic.", "usage": {"total_tokens": 57434, "total_cost": 0.027218}, "unique_endpoints": {"200": [], "300": [], "400": ["POST /users/count"], "500": 0}, "total_true_result": 0, "total_false_result": 2}