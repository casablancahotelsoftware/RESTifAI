{"all_cnt": 1, "all_request_sequence": [{"method": "POST", "api": "/elements/length/groupBy/tag", "url": "https://api.ohsome.org/v1/elements/length/groupBy/tag", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"groupByKey": "highway,waterway", "format": "json"}, "payload_type": "application/x-www-form-urlencoded", "request_data": "method='POST' api='/elements/length/groupBy/tag' params={} payload={'groupByKey': 'highway,waterway', 'format': 'json'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T10:09:09.937070427\",\"status\":400,\"message\":\"You need to give one groupByKey parameter, if you want to use groupBy/tag.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/length/groupBy/tag\"}"}], "right_results": [], "wrong_results": [{"request_info": "POST /elements/length/groupBy/tag with payload groupByKey=highway,waterway and format=json", "oracle": "HTTP 200 OK with a JSON response containing length values grouped correctly by each requested tag. The response should include expected tag keys and non-negative numeric length values.", "judge_reason": "Response status code 400 indicates a bad request, which is not aligned with the expected 200 OK. The error message specifies that exactly one groupByKey parameter must be provided, implying that submitting multiple tags concatenated as 'highway,waterway' is not supported. This violates the test expectation of processing multiple valid tags in one request. However, the API correctly validates input and returns a clear error message, avoiding server errors, which partially aligns with robustness expectations.", "response": "HTTP 400 with message: \"You need to give one groupByKey parameter, if you want to use groupBy/tag.\""}], "test_scenario_response_message": "1. **Title:** Submit Length Query Grouped by Tag with Valid Tags\n    - **API Endpoint:** POST /elements/length/groupBy/tag\n    - **Description:** Submit a request to compute the length of OSM elements grouped by multiple valid tags (e.g., [\"highway\", \"waterway\"]) in a well-formed JSON payload. This initial call verifies basic correctness of aggregation behavior.\n    - **Expected Response:** HTTP 200 OK with a JSON response containing length values grouped correctly by each requested tag. The response should include expected tag keys and non-negative numeric length values.\n\n2. **Title:** Submit Length Query with Mixed Valid and Invalid Tags\n    - **API Endpoint:** POST /elements/length/groupBy/tag\n    - **Description:** Submit another request that mixes valid tags and invalid/unrecognized tags (e.g., [\"highway\", \"invalidTag123\"]). This tests how the system handles partially invalid input within the tag grouping logic.\n    - **Expected Response:** HTTP 200 OK or HTTP 207 Multi-Status (if supported). The response should validly include results for recognized tags (\"highway\") and either exclude or provide explicit error or empty results for invalid tags, avoiding overall request failure. No 500 errors should be returned.\n\n3. **Title:** Submit Length Query with Empty Tag Array\n    - **API Endpoint:** POST /elements/length/groupBy/tag\n    - **Description:** Submit a request with an empty tag array in the payload to test input validation and response correctness in the case where no tags are provided to group by.\n    - **Expected Response:** Expected a validation error response with HTTP 400 Bad Request and an informative error message indicating that at least one tag must be provided. No processing or data aggregation should occur.\n\n4. **Title:** Submit Concurrent Length Queries with Overlapping Tags to Test Consistency\n    - **API Endpoint:** POST /elements/length/groupBy/tag (multiple concurrent requests)\n    - **Description:** Fire multiple concurrent POST requests with overlapping tag lists (e.g., [\"highway\", \"waterway\"], [\"waterway\", \"boundary\"]) to assess concurrency handling, data consistency, and system stability under load.\n    - **Expected Response:** All responses should return HTTP 200 OK with consistent aggregation results for shared tags (\"waterway\"). No race conditions, stale data issues, or partial failures should occur.\n\n5. **Title:** Submit Length Query with Tags Including Special Characters and Unicode\n    - **API Endpoint:** POST /elements/length/groupBy/tag\n    - **Description:** Submit a request with tags containing special characters and Unicode text (e.g., [\"amenity\", \"\u540d\u79f0\", \"highway#1\"]) to test input sanitation, encoding handling, and robustness against unusual tag inputs.\n    - **Expected Response:** The API should handle Unicode and special characters gracefully, returning HTTP 200 OK with results for recognized valid tags and ignoring or safely handling invalid/unrecognized tags. No encoding or parsing errors should occur.\n\n6. **Title:** Submit Length Query with Large Number of Tags Exceeding Typical Limits\n    - **API Endpoint:** POST /elements/length/groupBy/tag\n    - **Description:** Submit a payload containing an excessively large array of tags (hundreds or thousands), including valid and invalid tags, to test payload size limits, system performance, and error handling for oversized requests.\n    - **Expected Response:** The system should either process the request with partial results and no errors or return a clear 413 Payload Too Large or 400 Bad Request error with an appropriate message. The system should not crash or hang.\n\n7. **Title:** Submit Sequential Requests: Create Baseline, Modify Tags, Validate Data Consistency\n    - **API Endpoint:** POST /elements/length/groupBy/tag (sequential calls)\n    - **Description:** First, submit a request with a baseline set of tags. Then, submit a subsequent request with a modified tag list (removing some tags, adding new ones). Verify that results reflect the updated tag grouping correctly and no previously included tags erroneously appear.\n    - **Expected Response:** Both responses should return HTTP 200 OK with accurate grouping of lengths. The second response should only include tags currently requested and not retain or mix previous call data, ensuring no state leakage between calls.\n\n8. **Title:** Submit Malformed JSON Payload to Test Input Validation\n    - **API Endpoint:** POST /elements/length/groupBy/tag\n    - **Description:** Send a request with intentionally malformed JSON (e.g., missing brackets, wrong data types) to verify the robustness of JSON parsing and error reporting of the API.\n    - **Expected Response:** API should respond with HTTP 400 Bad Request and a clear error message indicating invalid JSON syntax or malformed payload without crashing or returning 500 errors.\n\n9. **Title:** Submit Request With Unsupported HTTP Method to Verify Method Enforcement\n    - **API Endpoint:** GET /elements/length/groupBy/tag\n    - **Description:** Attempt to access the endpoint using GET instead of POST to verify correct HTTP method enforcement on this endpoint.\n    - **Expected Response:** API should respond with HTTP 405 Method Not Allowed or equivalent error, clearly indicating that POST is the supported method, and no data processing should occur.\n\nSummary:  \nThis scenario sequence rigorously evaluates POST /elements/length/groupBy/tag across diverse valid, invalid, boundary, concurrency, and malformed input cases. It validates correct aggregation results, input validation, error handling, concurrency stability, and method enforcement, exposing issues in request handling, data consistency, and API robustness for length grouping by tag operations.", "usage": {"total_tokens": 64997, "total_cost": 0.0303596}, "unique_endpoints": {"200": [], "300": [], "400": ["POST /elements/length"], "500": 0}, "total_true_result": 0, "total_false_result": 1}