{"all_cnt": 7, "all_request_sequence": [{"method": "POST", "api": "/elements/length/ratio", "url": "https://api.ohsome.org/v1/elements/length/ratio", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {"bpolys": "8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160", "filter": "type=way and highway in (motorway, trunk, primary, secondary, tertiary, unclassified)", "filter2": "type=way and highway=primary", "format": "json"}, "payload": {}, "payload_type": "application/json", "request_data": "method='POST' api='/elements/length/ratio' params={'bpolys': '8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160', 'filter': 'type=way and highway in (motorway, trunk, primary, secondary, tertiary, unclassified)', 'filter2': 'type=way and highway=primary', 'format': 'json'} payload={}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T10:10:39.949327096\",\"status\":400,\"message\":\"Unknown parameter '{}' for this resource.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/length/ratio?bpolys=8.6810%2C49.4160%2C8.6950%2C49.4160%2C8.6950%2C49.4300%2C8.6810%2C49.4300%2C8.6810%2C49.4160&filter=type%3Dway+and+highway+in+%28motorway%2C+trunk%2C+primary%2C+secondary%2C+tertiary%2C+unclassified%29&filter2=type%3Dway+and+highway%3Dprimary&format=json\"}"}, {"method": "POST", "api": "/elements/length/ratio", "url": "https://api.ohsome.org/v1/elements/length/ratio", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bpolys": "8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160", "filter": "type=way and highway in (motorway, trunk, primary, secondary, tertiary, unclassified)", "filter2": "type=way and highway=primary", "format": "json"}, "payload_type": "application/json", "request_data": "method='POST' api='/elements/length/ratio' params={} payload={'bpolys': '8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160', 'filter': 'type=way and highway in (motorway, trunk, primary, secondary, tertiary, unclassified)', 'filter2': 'type=way and highway=primary', 'format': 'json'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T10:10:52.590975492\",\"status\":400,\"message\":\"Unknown parameter '{\\\"bpolys\\\": \\\"8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160\\\", \\\"filter\\\": \\\"type' for this resource.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/length/ratio\"}"}, {"method": "POST", "api": "/elements/length/ratio", "url": "https://api.ohsome.org/v1/elements/length/ratio", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bpolys": "8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160", "filter": "type=way and highway in (motorway, trunk, primary, secondary, tertiary, unclassified)", "filter2": "type=way and highway=primary", "format": "json"}, "payload_type": "application/json", "request_data": "method='POST' api='/elements/length/ratio' params={} payload={'bpolys': '8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160', 'filter': 'type=way and highway in (motorway, trunk, primary, secondary, tertiary, unclassified)', 'filter2': 'type=way and highway=primary', 'format': 'json'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T10:11:04.062049963\",\"status\":400,\"message\":\"Unknown parameter '{\\\"bpolys\\\": \\\"8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160\\\", \\\"filter\\\": \\\"type' for this resource.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/length/ratio\"}"}, {"method": "POST", "api": "/elements/length/ratio", "url": "https://api.ohsome.org/v1/elements/length/ratio", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bpolys": "8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160", "filter": "type=way and highway in (motorway, trunk, primary, secondary, tertiary, unclassified)", "filter2": "type=way and highway=primary", "format": "json"}, "payload_type": "application/json", "request_data": "method='POST' api='/elements/length/ratio' params={} payload={'bpolys': '8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160', 'filter': 'type=way and highway in (motorway, trunk, primary, secondary, tertiary, unclassified)', 'filter2': 'type=way and highway=primary', 'format': 'json'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T10:11:18.370052726\",\"status\":400,\"message\":\"Unknown parameter '{\\\"bpolys\\\": \\\"8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160\\\", \\\"filter\\\": \\\"type' for this resource.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/length/ratio\"}"}, {"method": "POST", "api": "/elements/length/ratio", "url": "https://api.ohsome.org/v1/elements/length/ratio", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bpolys": "8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160", "filter": "type=way and highway in (motorway, trunk, primary, secondary, tertiary, unclassified)", "filter2": "type=way and highway=primary", "format": "json"}, "payload_type": "application/json", "request_data": "method='POST' api='/elements/length/ratio' params={} payload={'bpolys': '8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160', 'filter': 'type=way and highway in (motorway, trunk, primary, secondary, tertiary, unclassified)', 'filter2': 'type=way and highway=primary', 'format': 'json'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T10:11:32.326820047\",\"status\":400,\"message\":\"Unknown parameter '{\\\"bpolys\\\": \\\"8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160\\\", \\\"filter\\\": \\\"type' for this resource.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/length/ratio\"}"}, {"method": "POST", "api": "/elements/length/ratio", "url": "https://api.ohsome.org/v1/elements/length/ratio", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bpolys": "8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160", "filter": "type=way and waterway=river", "filter2": "type=way and railway=rail", "format": "json"}, "payload_type": "application/json", "request_data": "method='POST' api='/elements/length/ratio' params={} payload={'bpolys': '8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160', 'filter': 'type=way and waterway=river', 'filter2': 'type=way and railway=rail', 'format': 'json'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T10:11:45.652266251\",\"status\":400,\"message\":\"Unknown parameter '{\\\"bpolys\\\": \\\"8.6810,49.4160,8.6950,49.4160,8.6950,49.4300,8.6810,49.4300,8.6810,49.4160\\\", \\\"filter\\\": \\\"type' for this resource.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/length/ratio\"}"}, {"method": "POST", "api": "/elements/length/ratio", "url": "https://api.ohsome.org/v1/elements/length/ratio", "headers": {"Content-Type": "application/x-www-form-urlencoded"}, "params": {}, "payload": {"bpolys": "bad input polygon string", "filter": "type=way and highway=primary", "filter2": "type=way and highway=secondary", "format": "json"}, "payload_type": "application/json", "request_data": "method='POST' api='/elements/length/ratio' params={} payload={'bpolys': 'bad input polygon string', 'filter': 'type=way and highway=primary', 'filter2': 'type=way and highway=secondary', 'format': 'json'}", "response_code": 400, "response_data": "{\"timestamp\":\"2025-09-17T10:11:55.280830198\",\"status\":400,\"message\":\"Unknown parameter '{\\\"bpolys\\\": \\\"bad input polygon string\\\", \\\"filter\\\": \\\"type' for this resource.\",\"requestUrl\":\"https://api.ohsome.org/v1/elements/length/ratio\"}"}], "right_results": [], "wrong_results": [{"request_info": "POST /elements/length/ratio with filters for highways and primary roads and polygon boundary; parameters incorrectly sent as query parameters instead of form fields with x-www-form-urlencoded content-type.", "oracle": "HTTP 200 with a numerical ratio > 0 and <= 1; response confirms that filter2 elements are subset of filter1 within the polygon.", "judge_reason": "The actual response returned HTTP 400 with an error message about 'Unknown parameter' indicating that the parameters were mis-sent as query parameters rather than form data as required. This caused the API to reject the request even though the filters and polygon were logically correct. This format error is significant as it prevented the API from processing and returning the expected ratio result.", "response": "HTTP 400 with message: 'Unknown parameter '{}' for this resource.'"}, {"request_info": "POST /elements/length/ratio with proper Content-Type but payload sent as dictionary resulting in API misinterpretation of parameters.", "oracle": "HTTP 200 with a numerical ratio > 0 and <= 1; response confirms that filter2 elements are subset of filter1 within the polygon.", "judge_reason": "The API returned HTTP 400 again with 'Unknown parameter...' message indicating that it does not accept the payload as a JSON/dict object for this resource and expects form-url encoded key-value pairs instead. The format of sending parameters is causing the request to fail although the filters and polygon are logically valid. This format issue prevents the API from returning the expected success result.", "response": "HTTP 400 with message about unknown parameter including JSON-like string of parameters."}, {"request_info": "POST /elements/length/ratio with filters and polygon using 'application/x-www-form-urlencoded' header but parameters still sent in unsupported format resulting in 400 error.", "oracle": "HTTP 200 with a numerical ratio > 0 and <= 1; response confirms that filter2 elements are subset of filter1 within the polygon.", "judge_reason": "Repeated attempts to send the required parameters as form-url-encoded data have failed with HTTP 400 errors stating 'Unknown parameter...' followed by parameters in a JSON string representation. This indicates the client is sending parameters incorrectly (as JSON or entire objects) instead of key-value form fields as required. This is a format/serialization issue preventing the API from processing the request correctly and blocking proper validation.", "response": "HTTP 400 with 'Unknown parameter' error containing JSON-like parameter string."}, {"request_info": "POST /elements/length/ratio with polygon and filters sent in incorrect format as a JSON object serialized as single parameter, causing API to reject with 400 error.", "oracle": "HTTP 200 with a numerical ratio > 0 and <= 1; response confirms that filter2 elements are subset of filter1 within the polygon.", "judge_reason": "The API consistently returns HTTP 400 errors due to receiving the entire parameter set serialized as JSON within a single unknown parameter, instead of properly separated form-urlencoded key-value pairs. This indicates the current testing environment does not support or properly encode 'application/x-www-form-urlencoded' POST bodies. While the filters and polygon are logically valid, the request format is not accepted causing failure to obtain the expected successful response. This is a fundamental issue with request formatting preventing functional validation.", "response": "HTTP 400 with message 'Unknown parameter ... for this resource' indicating parameter format issue."}, {"request_info": "POST /elements/length/ratio with filters and polygon; parameters sent as JSON string resulting in 400 response.", "oracle": "HTTP 200 with ratio >= previous ratio; consistent ratio values on repeated requests; no errors or value variation.", "judge_reason": "The API continues to reject requests with HTTP 400 and error messages about 'Unknown parameter' due to parameters being sent in an unsupported format (serialized JSON string instead of form-urlencoded key-value pairs). Thus, the functional verification for filter change, ratio increase, and consistency cannot be performed. This fundamental request format error prevents test success or proper validation.", "response": "HTTP 400 with message about unknown parameter including JSON string of parameters."}, {"request_info": "POST /elements/length/ratio with filters for waterways and railway tracks and polygon; parameters sent as JSON-like string instead of form-urlencoded fields.", "oracle": "HTTP 200 success with ratio exactly zero or minimal value indicating no overlap; no errors in response.", "judge_reason": "The API returned HTTP 400 with an error about 'Unknown parameter' due to receiving parameters serialized as a JSON string instead of individual form-urlencoded keys. This prevents correct processing of the request and blocks verification of the expected zero ratio for non-overlapping filters. The issue is a fundamental request format problem, not the logical filters.", "response": "HTTP 400 with error message about unknown parameter containing JSON string of parameters."}, {"request_info": "POST /elements/length/ratio with invalid polygon string but parameters sent in wrong format (JSON string as parameter).", "oracle": "HTTP 4xx error (e.g., 400 Bad Request) with clear messages like 'Invalid filter format', 'Missing filter1 parameter', or 'Malformed polygon geometry'; no server errors or crashes.", "judge_reason": "The API returned HTTP 400 with an 'Unknown parameter' error that includes a JSON string of all parameters, indicating the parameters were sent as a single JSON payload rather than as individual form-urlencoded key-value pairs. This prevented the request from being processed correctly and blocked testing for proper error handling of malformed inputs. The failure is due to request format, not API behavior on invalid data.", "response": "HTTP 400 with 'Unknown parameter' message containing JSON string of parameters."}], "test_scenario_response_message": "1. **Title:** Validate Ratio Calculation with Nested Filters and Boundary Overlaps\n    - **API Endpoint:** POST /elements/length/ratio\n    - **Description:** \n      - Step 1: Submit a POST request with a broad filter (filter1) selecting a large set of OSM elements (e.g., highways) and a second filter (filter2) targeting a known subset within the first filter (e.g., highways tagged as primary roads) within a polygon boundary defining a complex urban area.\n      - Step 2: Confirm that the ratio calculated corresponds logically to the number of elements matching filter2 relative to filter1 in that area.\n    \n    - **Expected Response:** \n      - A success response (HTTP 200) with a numerical ratio greater than zero and less than or equal to one.\n      - The response data should confirm that filter2 elements are a subset of filter1 elements within the polygon.\n\n2. **Title:** Verify Behavior on Filter Change and Data Consistency\n    - **API Endpoint:** POST /elements/length/ratio\n    - **Description:** \n      - Step 3: Immediately after Step 1, repeat the POST request but change filter2 to a different but overlapping tag set (e.g., primary and secondary roads combined).\n      - Step 4: Validate that the new ratio is equal to or higher than the previous ratio since the filter2 set is expanded.\n      - Step 5: Check that successive repeated requests with the same filters return consistent ratio values, confirming stable state management without unintended side effects.\n    \n    - **Expected Response:** \n      - HTTP 200 success with a ratio potentially higher or equal to the previous one.\n      - Consistent ratio values in multiple repeated calls with the same filters and polygon.\n      - No unexpected errors or variation in values suggesting instability or cache inconsistency.\n\n3. **Title:** Test Edge Case with Non-Overlapping Filters and Empty Result Sets\n    - **API Endpoint:** POST /elements/length/ratio\n    - **Description:** \n      - Step 6: Submit a POST request where filter1 selects a category of OSM elements (e.g., waterways) and filter2 specifies a completely non-overlapping category (e.g., railway track tags that do not intersect waterways) within the same polygon.\n      - Step 7: Validate that the ratio returned is zero or appropriately indicates no overlap.\n    \n    - **Expected Response:** \n      - HTTP 200 success.\n      - Ratio value exactly zero or an explicitly defined minimal value indicating no filtered overlap.\n      - No error messages or misrepresentations in the response.\n\n4. **Title:** Validate Error Handling with Invalid Filter Formats and Missing Parameters\n    - **API Endpoint:** POST /elements/length/ratio\n    - **Description:** \n      - Step 8: Submit requests with malformed filter parameters (e.g., invalid JSON structure, missing keys in filters) and observe error responses.\n      - Step 9: Send a request omitting one of the mandatory filters to check mandatory field validation.\n      - Step 10: Submit a request with an invalid or malformed polygon boundary string or parameter.\n    \n    - **Expected Response:** \n      - Appropriate HTTP 4xx client error codes (400 Bad Request).\n      - Clear error messages describing the issue (e.g., \"Invalid filter format,\" \"Missing filter1 parameter,\" \"Malformed polygon geometry\").\n      - No server-side errors or crashes.\n\n5. **Title:** Stress Test with Large Complex Boundary and Concurrent Requests\n    - **API Endpoint:** POST /elements/length/ratio\n    - **Description:** \n      - Step 11: Submit concurrent POST requests with the same large complex polygon boundary but varying filter1 and filter2 values to test concurrency handling and potential race conditions.\n      - Step 12: Include a very large polygon with thousands of vertices and complex nested filters in one request to test processing limits and performance.\n      - Step 13: Verify consistent, accurate ratio responses, and system stability during and after high-load scenarios.\n    \n    - **Expected Response:** \n      - All responses return HTTP 200 with plausible ratio values.\n      - No timeouts, failures, or partial data responses.\n      - Ratios across concurrent calls reflect appropriate data for each filter variant.\n      - No data corruption or state leakage between requests.\n\nSummary:  \nThis complex end-to-end scenario tests the POST /elements/length/ratio API\u2019s ability to compute element ratios under nested, overlapping, non-overlapping filters within polygon boundaries, validating response accuracy, error handling, input validation, and concurrency robustness. It also ensures repeatability and data consistency, uncovering potential defects related to state management, parsing, filtering logic, and performance under load.", "usage": {"total_tokens": 281030, "total_cost": 0.12041240000000002}, "unique_endpoints": {"200": [], "300": [], "400": ["POST /elements/length"], "500": 0}, "total_true_result": 0, "total_false_result": 7}