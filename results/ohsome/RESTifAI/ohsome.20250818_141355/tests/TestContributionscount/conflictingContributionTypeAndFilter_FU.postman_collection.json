{
    "info": {
        "name": "conflictingContributionTypeAndFilter_FU",
        "description": "Set the `contributionType` parameter to a valid type 'creation' but combine it with a `filter` that logically excludes all creations, e.g., 'type:node and highway=*' when no nodes with highway tags exist in the bbox.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "count_2",
            "request": {
                "method": "GET",
                "header": [],
                "body": null,
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/users/count?bboxes=8.67,49.39,8.71,49.42&contributionType=creation,deletion&filter=type%3Away%20and%20natural%3D%2A&format=json&showMetadata=false&time=2014-01-01/2017-01-01&timeout=30",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "users",
                        "count"
                    ],
                    "query": [
                        {
                            "key": "bboxes",
                            "value": "8.67,49.39,8.71,49.42"
                        },
                        {
                            "key": "contributionType",
                            "value": "creation,deletion"
                        },
                        {
                            "key": "filter",
                            "value": "type%3Away%20and%20natural%3D%2A"
                        },
                        {
                            "key": "format",
                            "value": "json"
                        },
                        {
                            "key": "showMetadata",
                            "value": "false"
                        },
                        {
                            "key": "time",
                            "value": "2014-01-01/2017-01-01"
                        },
                        {
                            "key": "timeout",
                            "value": "30"
                        }
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 2xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(200, 299);",
                            "});",
                            "",
                            "try {",
                            "",
                            "   /**",
                            "    * Gets a value from a nested object using a flattened key path",
                            "    * @param {Object} obj - The object to extract from",
                            "    * @param {string} path - Flattened key path (e.g., 'users[1].role.id')",
                            "    * @return {*} The extracted value or undefined if not found",
                            "    */",
                            "   function getValueByPath(obj, path) {",
                            "       // Handle array notation by splitting correctly",
                            "       const parts = [];",
                            "       let currentPart = '';",
                            "       let inBracket = false;",
                            "",
                            "       // Parse the path maintaining array indexes",
                            "       for (let i = 0; i < path.length; i++) {",
                            "           const char = path[i];",
                            "           if (char === '.' && !inBracket) {",
                            "               if (currentPart) parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else if (char === '[') {",
                            "               inBracket = true;",
                            "               parts.push(currentPart);",
                            "               currentPart = '[';",
                            "           } else if (char === ']') {",
                            "               inBracket = false;",
                            "               currentPart += ']';",
                            "               parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else {",
                            "               currentPart += char;",
                            "           }",
                            "       }",
                            "       if (currentPart) parts.push(currentPart);",
                            "",
                            "       // Navigate through the object",
                            "       let current = obj;",
                            "       for (const part of parts) {",
                            "           if (!current) return undefined;",
                            "",
                            "           if (part.startsWith('[') && part.endsWith(']')) {",
                            "               // Handle array index",
                            "               const index = parseInt(part.substring(1, part.length - 1));",
                            "               if (!Array.isArray(current) || current.length <= index) {",
                            "                   return undefined;",
                            "               }",
                            "               current = current[index];",
                            "           } else {",
                            "               // Handle object property",
                            "               current = current[part];",
                            "           }",
                            "       }",
                            "       return current;",
                            "   }",
                            "",
                            "    // Extract response body values",
                            "    const responseJson = pm.response.json();",
                            "",
                            "    // Store expected body fields",
                            "    const x0 = getValueByPath(responseJson, 'attribution.url');",
                            "    if (x0 !== undefined) {",
                            "        pm.collectionVariables.set('count_2.response.body.attribution.url', x0);",
                            "    }",
                            "    const x1 = getValueByPath(responseJson, 'attribution.text');",
                            "    if (x1 !== undefined) {",
                            "        pm.collectionVariables.set('count_2.response.body.attribution.text', x1);",
                            "    }",
                            "    const x2 = getValueByPath(responseJson, 'apiVersion');",
                            "    if (x2 !== undefined) {",
                            "        pm.collectionVariables.set('count_2.response.body.apiVersion', x2);",
                            "    }",
                            "    const x3 = getValueByPath(responseJson, 'result[0].fromTimestamp');",
                            "    if (x3 !== undefined) {",
                            "        pm.collectionVariables.set('count_2.response.body.result[0].fromTimestamp', x3);",
                            "    }",
                            "    const x4 = getValueByPath(responseJson, 'result[0].toTimestamp');",
                            "    if (x4 !== undefined) {",
                            "        pm.collectionVariables.set('count_2.response.body.result[0].toTimestamp', x4);",
                            "    }",
                            "    const x5 = getValueByPath(responseJson, 'result[0].value');",
                            "    if (x5 !== undefined) {",
                            "        pm.collectionVariables.set('count_2.response.body.result[0].value', x5);",
                            "    }",
                            "",
                            "    // Store response headers",
                            "    pm.response.headers.each(function(header) {",
                            "        pm.collectionVariables.set('count_2.response.headers.', header.value);",
                            "    });",
                            "",
                            "    // Store response cookies",
                            "    pm.response.cookies.each(function(cookie) {",
                            "        pm.collectionVariables.set('count_2.response.cookies.', cookie.value);",
                            "    });",
                            "",
                            "    // Store status code",
                            "    pm.collectionVariables.set('count_2.response.status_code', pm.response.code);",
                            "} catch (error) {",
                            "    console.error('Failed to process response:', error.message);",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.collectionVariables.set('count_2.request.query_params.bboxes', '8.67,49.39,8.71,49.42');",
                            "pm.collectionVariables.set('count_2.request.query_params.contributionType', 'creation,deletion');",
                            "pm.collectionVariables.set('count_2.request.query_params.filter', 'type%3Away%20and%20natural%3D%2A');",
                            "pm.collectionVariables.set('count_2.request.query_params.format', 'json');",
                            "pm.collectionVariables.set('count_2.request.query_params.showMetadata', 'false');",
                            "pm.collectionVariables.set('count_2.request.query_params.time', '2014-01-01/2017-01-01');",
                            "pm.collectionVariables.set('count_2.request.query_params.timeout', '30');"
                        ]
                    }
                }
            ]
        },
        {
            "name": "contributionsCount",
            "request": {
                "method": "GET",
                "header": [],
                "body": null,
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/contributions/count?bboxes=8.67,49.39,8.71,49.42&contributionType=creation&filter=type%3Anode%20and%20highway%3D%2A&format=json&showMetadata=false&time=2014-01-01/2017-01-01&timeout=30",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "contributions",
                        "count"
                    ],
                    "query": [
                        {
                            "key": "bboxes",
                            "value": "8.67,49.39,8.71,49.42"
                        },
                        {
                            "key": "contributionType",
                            "value": "creation"
                        },
                        {
                            "key": "filter",
                            "value": "type%3Anode%20and%20highway%3D%2A"
                        },
                        {
                            "key": "format",
                            "value": "json"
                        },
                        {
                            "key": "showMetadata",
                            "value": "false"
                        },
                        {
                            "key": "time",
                            "value": "2014-01-01/2017-01-01"
                        },
                        {
                            "key": "timeout",
                            "value": "30"
                        }
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 4xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(400, 499);",
                            "});"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.collectionVariables.set('contributionsCount.request.query_params.bboxes', '8.67,49.39,8.71,49.42');",
                            "pm.collectionVariables.set('contributionsCount.request.query_params.contributionType', 'creation');",
                            "pm.collectionVariables.set('contributionsCount.request.query_params.filter', 'type%3Anode%20and%20highway%3D%2A');",
                            "pm.collectionVariables.set('contributionsCount.request.query_params.format', 'json');",
                            "pm.collectionVariables.set('contributionsCount.request.query_params.showMetadata', 'false');",
                            "pm.collectionVariables.set('contributionsCount.request.query_params.time', '2014-01-01/2017-01-01');",
                            "pm.collectionVariables.set('contributionsCount.request.query_params.timeout', '30');"
                        ]
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "pm.environment.set('baseUrl', 'https://api.ohsome.org/v1');"
                ]
            }
        }
    ]
}