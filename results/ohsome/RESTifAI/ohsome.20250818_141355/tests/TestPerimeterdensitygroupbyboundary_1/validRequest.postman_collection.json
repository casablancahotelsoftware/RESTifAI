{
    "info": {
        "name": "validRequest",
        "description": "This test case tests the endpoint for valid data and expects a successful response from the service",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "perimeterDensityGroupByBoundary_1",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/x-www-form-urlencoded"
                    }
                ],
                "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                        {
                            "key": "bboxes",
                            "value": "8.67,49.39,8.71,49.42|8.68,49.40,8.72,49.43",
                            "type": "text"
                        },
                        {
                            "key": "filter",
                            "value": "type:way and natural=forest",
                            "type": "text"
                        },
                        {
                            "key": "format",
                            "value": "geojson",
                            "type": "text"
                        },
                        {
                            "key": "showMetadata",
                            "value": "true",
                            "type": "text"
                        },
                        {
                            "key": "time",
                            "value": "2015-01-01/2016-01-01/P1M",
                            "type": "text"
                        },
                        {
                            "key": "timeout",
                            "value": "30",
                            "type": "text"
                        }
                    ]
                },
                "cookies": [],
                "url": {
                    "raw": "{{baseUrl}}/elements/perimeter/density/groupBy/boundary",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "elements",
                        "perimeter",
                        "density",
                        "groupBy",
                        "boundary"
                    ]
                }
            },
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test('Response status code is 2xx', function () {",
                            "    pm.expect(pm.response.code || pm.response.status).to.be.within(200, 299);",
                            "});",
                            "",
                            "try {",
                            "",
                            "   /**",
                            "    * Gets a value from a nested object using a flattened key path",
                            "    * @param {Object} obj - The object to extract from",
                            "    * @param {string} path - Flattened key path (e.g., 'users[1].role.id')",
                            "    * @return {*} The extracted value or undefined if not found",
                            "    */",
                            "   function getValueByPath(obj, path) {",
                            "       // Handle array notation by splitting correctly",
                            "       const parts = [];",
                            "       let currentPart = '';",
                            "       let inBracket = false;",
                            "",
                            "       // Parse the path maintaining array indexes",
                            "       for (let i = 0; i < path.length; i++) {",
                            "           const char = path[i];",
                            "           if (char === '.' && !inBracket) {",
                            "               if (currentPart) parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else if (char === '[') {",
                            "               inBracket = true;",
                            "               parts.push(currentPart);",
                            "               currentPart = '[';",
                            "           } else if (char === ']') {",
                            "               inBracket = false;",
                            "               currentPart += ']';",
                            "               parts.push(currentPart);",
                            "               currentPart = '';",
                            "           } else {",
                            "               currentPart += char;",
                            "           }",
                            "       }",
                            "       if (currentPart) parts.push(currentPart);",
                            "",
                            "       // Navigate through the object",
                            "       let current = obj;",
                            "       for (const part of parts) {",
                            "           if (!current) return undefined;",
                            "",
                            "           if (part.startsWith('[') && part.endsWith(']')) {",
                            "               // Handle array index",
                            "               const index = parseInt(part.substring(1, part.length - 1));",
                            "               if (!Array.isArray(current) || current.length <= index) {",
                            "                   return undefined;",
                            "               }",
                            "               current = current[index];",
                            "           } else {",
                            "               // Handle object property",
                            "               current = current[part];",
                            "           }",
                            "       }",
                            "       return current;",
                            "   }",
                            "",
                            "    // Extract response body values",
                            "    const responseJson = pm.response.json();",
                            "",
                            "    // Store expected body fields",
                            "    const x0 = getValueByPath(responseJson, 'attribution.url');",
                            "    if (x0 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.attribution.url', x0);",
                            "    }",
                            "    const x1 = getValueByPath(responseJson, 'attribution.text');",
                            "    if (x1 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.attribution.text', x1);",
                            "    }",
                            "    const x2 = getValueByPath(responseJson, 'apiVersion');",
                            "    if (x2 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.apiVersion', x2);",
                            "    }",
                            "    const x3 = getValueByPath(responseJson, 'metadata.executionTime');",
                            "    if (x3 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.metadata.executionTime', x3);",
                            "    }",
                            "    const x4 = getValueByPath(responseJson, 'metadata.description');",
                            "    if (x4 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.metadata.description', x4);",
                            "    }",
                            "    const x5 = getValueByPath(responseJson, 'type');",
                            "    if (x5 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.type', x5);",
                            "    }",
                            "    const x6 = getValueByPath(responseJson, 'features[0].type');",
                            "    if (x6 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].type', x6);",
                            "    }",
                            "    const x7 = getValueByPath(responseJson, 'features[0].properties.groupByBoundaryId');",
                            "    if (x7 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].properties.groupByBoundaryId', x7);",
                            "    }",
                            "    const x8 = getValueByPath(responseJson, 'features[0].properties.value');",
                            "    if (x8 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].properties.value', x8);",
                            "    }",
                            "    const x9 = getValueByPath(responseJson, 'features[0].properties.timestamp');",
                            "    if (x9 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].properties.timestamp', x9);",
                            "    }",
                            "    const x10 = getValueByPath(responseJson, 'features[0].geometry.type');",
                            "    if (x10 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].geometry.type', x10);",
                            "    }",
                            "    const x11 = getValueByPath(responseJson, 'features[0].geometry.coordinates[0][0][0]');",
                            "    if (x11 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].geometry.coordinates[0][0][0]', x11);",
                            "    }",
                            "    const x12 = getValueByPath(responseJson, 'features[0].geometry.coordinates[0][0][1]');",
                            "    if (x12 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].geometry.coordinates[0][0][1]', x12);",
                            "    }",
                            "    const x13 = getValueByPath(responseJson, 'features[0].geometry.coordinates[0][1][0]');",
                            "    if (x13 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].geometry.coordinates[0][1][0]', x13);",
                            "    }",
                            "    const x14 = getValueByPath(responseJson, 'features[0].geometry.coordinates[0][1][1]');",
                            "    if (x14 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].geometry.coordinates[0][1][1]', x14);",
                            "    }",
                            "    const x15 = getValueByPath(responseJson, 'features[0].geometry.coordinates[0][2][0]');",
                            "    if (x15 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].geometry.coordinates[0][2][0]', x15);",
                            "    }",
                            "    const x16 = getValueByPath(responseJson, 'features[0].geometry.coordinates[0][2][1]');",
                            "    if (x16 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].geometry.coordinates[0][2][1]', x16);",
                            "    }",
                            "    const x17 = getValueByPath(responseJson, 'features[0].geometry.coordinates[0][3][0]');",
                            "    if (x17 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].geometry.coordinates[0][3][0]', x17);",
                            "    }",
                            "    const x18 = getValueByPath(responseJson, 'features[0].geometry.coordinates[0][3][1]');",
                            "    if (x18 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].geometry.coordinates[0][3][1]', x18);",
                            "    }",
                            "    const x19 = getValueByPath(responseJson, 'features[0].geometry.coordinates[0][4][0]');",
                            "    if (x19 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].geometry.coordinates[0][4][0]', x19);",
                            "    }",
                            "    const x20 = getValueByPath(responseJson, 'features[0].geometry.coordinates[0][4][1]');",
                            "    if (x20 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].geometry.coordinates[0][4][1]', x20);",
                            "    }",
                            "    const x21 = getValueByPath(responseJson, 'features[0].id');",
                            "    if (x21 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[0].id', x21);",
                            "    }",
                            "    const x22 = getValueByPath(responseJson, 'features[1].type');",
                            "    if (x22 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].type', x22);",
                            "    }",
                            "    const x23 = getValueByPath(responseJson, 'features[1].properties.groupByBoundaryId');",
                            "    if (x23 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].properties.groupByBoundaryId', x23);",
                            "    }",
                            "    const x24 = getValueByPath(responseJson, 'features[1].properties.value');",
                            "    if (x24 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].properties.value', x24);",
                            "    }",
                            "    const x25 = getValueByPath(responseJson, 'features[1].properties.timestamp');",
                            "    if (x25 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].properties.timestamp', x25);",
                            "    }",
                            "    const x26 = getValueByPath(responseJson, 'features[1].geometry.type');",
                            "    if (x26 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].geometry.type', x26);",
                            "    }",
                            "    const x27 = getValueByPath(responseJson, 'features[1].geometry.coordinates[0][0][0]');",
                            "    if (x27 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].geometry.coordinates[0][0][0]', x27);",
                            "    }",
                            "    const x28 = getValueByPath(responseJson, 'features[1].geometry.coordinates[0][0][1]');",
                            "    if (x28 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].geometry.coordinates[0][0][1]', x28);",
                            "    }",
                            "    const x29 = getValueByPath(responseJson, 'features[1].geometry.coordinates[0][1][0]');",
                            "    if (x29 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].geometry.coordinates[0][1][0]', x29);",
                            "    }",
                            "    const x30 = getValueByPath(responseJson, 'features[1].geometry.coordinates[0][1][1]');",
                            "    if (x30 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].geometry.coordinates[0][1][1]', x30);",
                            "    }",
                            "    const x31 = getValueByPath(responseJson, 'features[1].geometry.coordinates[0][2][0]');",
                            "    if (x31 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].geometry.coordinates[0][2][0]', x31);",
                            "    }",
                            "    const x32 = getValueByPath(responseJson, 'features[1].geometry.coordinates[0][2][1]');",
                            "    if (x32 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].geometry.coordinates[0][2][1]', x32);",
                            "    }",
                            "    const x33 = getValueByPath(responseJson, 'features[1].geometry.coordinates[0][3][0]');",
                            "    if (x33 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].geometry.coordinates[0][3][0]', x33);",
                            "    }",
                            "    const x34 = getValueByPath(responseJson, 'features[1].geometry.coordinates[0][3][1]');",
                            "    if (x34 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].geometry.coordinates[0][3][1]', x34);",
                            "    }",
                            "    const x35 = getValueByPath(responseJson, 'features[1].geometry.coordinates[0][4][0]');",
                            "    if (x35 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].geometry.coordinates[0][4][0]', x35);",
                            "    }",
                            "    const x36 = getValueByPath(responseJson, 'features[1].geometry.coordinates[0][4][1]');",
                            "    if (x36 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].geometry.coordinates[0][4][1]', x36);",
                            "    }",
                            "    const x37 = getValueByPath(responseJson, 'features[1].id');",
                            "    if (x37 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[1].id', x37);",
                            "    }",
                            "    const x38 = getValueByPath(responseJson, 'features[2].type');",
                            "    if (x38 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].type', x38);",
                            "    }",
                            "    const x39 = getValueByPath(responseJson, 'features[2].properties.groupByBoundaryId');",
                            "    if (x39 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].properties.groupByBoundaryId', x39);",
                            "    }",
                            "    const x40 = getValueByPath(responseJson, 'features[2].properties.value');",
                            "    if (x40 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].properties.value', x40);",
                            "    }",
                            "    const x41 = getValueByPath(responseJson, 'features[2].properties.timestamp');",
                            "    if (x41 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].properties.timestamp', x41);",
                            "    }",
                            "    const x42 = getValueByPath(responseJson, 'features[2].geometry.type');",
                            "    if (x42 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].geometry.type', x42);",
                            "    }",
                            "    const x43 = getValueByPath(responseJson, 'features[2].geometry.coordinates[0][0][0]');",
                            "    if (x43 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].geometry.coordinates[0][0][0]', x43);",
                            "    }",
                            "    const x44 = getValueByPath(responseJson, 'features[2].geometry.coordinates[0][0][1]');",
                            "    if (x44 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].geometry.coordinates[0][0][1]', x44);",
                            "    }",
                            "    const x45 = getValueByPath(responseJson, 'features[2].geometry.coordinates[0][1][0]');",
                            "    if (x45 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].geometry.coordinates[0][1][0]', x45);",
                            "    }",
                            "    const x46 = getValueByPath(responseJson, 'features[2].geometry.coordinates[0][1][1]');",
                            "    if (x46 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].geometry.coordinates[0][1][1]', x46);",
                            "    }",
                            "    const x47 = getValueByPath(responseJson, 'features[2].geometry.coordinates[0][2][0]');",
                            "    if (x47 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].geometry.coordinates[0][2][0]', x47);",
                            "    }",
                            "    const x48 = getValueByPath(responseJson, 'features[2].geometry.coordinates[0][2][1]');",
                            "    if (x48 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].geometry.coordinates[0][2][1]', x48);",
                            "    }",
                            "    const x49 = getValueByPath(responseJson, 'features[2].geometry.coordinates[0][3][0]');",
                            "    if (x49 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].geometry.coordinates[0][3][0]', x49);",
                            "    }",
                            "    const x50 = getValueByPath(responseJson, 'features[2].geometry.coordinates[0][3][1]');",
                            "    if (x50 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].geometry.coordinates[0][3][1]', x50);",
                            "    }",
                            "    const x51 = getValueByPath(responseJson, 'features[2].geometry.coordinates[0][4][0]');",
                            "    if (x51 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].geometry.coordinates[0][4][0]', x51);",
                            "    }",
                            "    const x52 = getValueByPath(responseJson, 'features[2].geometry.coordinates[0][4][1]');",
                            "    if (x52 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].geometry.coordinates[0][4][1]', x52);",
                            "    }",
                            "    const x53 = getValueByPath(responseJson, 'features[2].id');",
                            "    if (x53 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[2].id', x53);",
                            "    }",
                            "    const x54 = getValueByPath(responseJson, 'features[3].type');",
                            "    if (x54 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].type', x54);",
                            "    }",
                            "    const x55 = getValueByPath(responseJson, 'features[3].properties.groupByBoundaryId');",
                            "    if (x55 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].properties.groupByBoundaryId', x55);",
                            "    }",
                            "    const x56 = getValueByPath(responseJson, 'features[3].properties.value');",
                            "    if (x56 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].properties.value', x56);",
                            "    }",
                            "    const x57 = getValueByPath(responseJson, 'features[3].properties.timestamp');",
                            "    if (x57 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].properties.timestamp', x57);",
                            "    }",
                            "    const x58 = getValueByPath(responseJson, 'features[3].geometry.type');",
                            "    if (x58 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].geometry.type', x58);",
                            "    }",
                            "    const x59 = getValueByPath(responseJson, 'features[3].geometry.coordinates[0][0][0]');",
                            "    if (x59 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].geometry.coordinates[0][0][0]', x59);",
                            "    }",
                            "    const x60 = getValueByPath(responseJson, 'features[3].geometry.coordinates[0][0][1]');",
                            "    if (x60 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].geometry.coordinates[0][0][1]', x60);",
                            "    }",
                            "    const x61 = getValueByPath(responseJson, 'features[3].geometry.coordinates[0][1][0]');",
                            "    if (x61 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].geometry.coordinates[0][1][0]', x61);",
                            "    }",
                            "    const x62 = getValueByPath(responseJson, 'features[3].geometry.coordinates[0][1][1]');",
                            "    if (x62 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].geometry.coordinates[0][1][1]', x62);",
                            "    }",
                            "    const x63 = getValueByPath(responseJson, 'features[3].geometry.coordinates[0][2][0]');",
                            "    if (x63 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].geometry.coordinates[0][2][0]', x63);",
                            "    }",
                            "    const x64 = getValueByPath(responseJson, 'features[3].geometry.coordinates[0][2][1]');",
                            "    if (x64 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].geometry.coordinates[0][2][1]', x64);",
                            "    }",
                            "    const x65 = getValueByPath(responseJson, 'features[3].geometry.coordinates[0][3][0]');",
                            "    if (x65 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].geometry.coordinates[0][3][0]', x65);",
                            "    }",
                            "    const x66 = getValueByPath(responseJson, 'features[3].geometry.coordinates[0][3][1]');",
                            "    if (x66 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].geometry.coordinates[0][3][1]', x66);",
                            "    }",
                            "    const x67 = getValueByPath(responseJson, 'features[3].geometry.coordinates[0][4][0]');",
                            "    if (x67 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].geometry.coordinates[0][4][0]', x67);",
                            "    }",
                            "    const x68 = getValueByPath(responseJson, 'features[3].geometry.coordinates[0][4][1]');",
                            "    if (x68 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].geometry.coordinates[0][4][1]', x68);",
                            "    }",
                            "    const x69 = getValueByPath(responseJson, 'features[3].id');",
                            "    if (x69 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[3].id', x69);",
                            "    }",
                            "    const x70 = getValueByPath(responseJson, 'features[4].type');",
                            "    if (x70 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].type', x70);",
                            "    }",
                            "    const x71 = getValueByPath(responseJson, 'features[4].properties.groupByBoundaryId');",
                            "    if (x71 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].properties.groupByBoundaryId', x71);",
                            "    }",
                            "    const x72 = getValueByPath(responseJson, 'features[4].properties.value');",
                            "    if (x72 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].properties.value', x72);",
                            "    }",
                            "    const x73 = getValueByPath(responseJson, 'features[4].properties.timestamp');",
                            "    if (x73 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].properties.timestamp', x73);",
                            "    }",
                            "    const x74 = getValueByPath(responseJson, 'features[4].geometry.type');",
                            "    if (x74 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].geometry.type', x74);",
                            "    }",
                            "    const x75 = getValueByPath(responseJson, 'features[4].geometry.coordinates[0][0][0]');",
                            "    if (x75 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].geometry.coordinates[0][0][0]', x75);",
                            "    }",
                            "    const x76 = getValueByPath(responseJson, 'features[4].geometry.coordinates[0][0][1]');",
                            "    if (x76 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].geometry.coordinates[0][0][1]', x76);",
                            "    }",
                            "    const x77 = getValueByPath(responseJson, 'features[4].geometry.coordinates[0][1][0]');",
                            "    if (x77 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].geometry.coordinates[0][1][0]', x77);",
                            "    }",
                            "    const x78 = getValueByPath(responseJson, 'features[4].geometry.coordinates[0][1][1]');",
                            "    if (x78 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].geometry.coordinates[0][1][1]', x78);",
                            "    }",
                            "    const x79 = getValueByPath(responseJson, 'features[4].geometry.coordinates[0][2][0]');",
                            "    if (x79 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].geometry.coordinates[0][2][0]', x79);",
                            "    }",
                            "    const x80 = getValueByPath(responseJson, 'features[4].geometry.coordinates[0][2][1]');",
                            "    if (x80 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].geometry.coordinates[0][2][1]', x80);",
                            "    }",
                            "    const x81 = getValueByPath(responseJson, 'features[4].geometry.coordinates[0][3][0]');",
                            "    if (x81 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].geometry.coordinates[0][3][0]', x81);",
                            "    }",
                            "    const x82 = getValueByPath(responseJson, 'features[4].geometry.coordinates[0][3][1]');",
                            "    if (x82 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].geometry.coordinates[0][3][1]', x82);",
                            "    }",
                            "    const x83 = getValueByPath(responseJson, 'features[4].geometry.coordinates[0][4][0]');",
                            "    if (x83 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].geometry.coordinates[0][4][0]', x83);",
                            "    }",
                            "    const x84 = getValueByPath(responseJson, 'features[4].geometry.coordinates[0][4][1]');",
                            "    if (x84 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].geometry.coordinates[0][4][1]', x84);",
                            "    }",
                            "    const x85 = getValueByPath(responseJson, 'features[4].id');",
                            "    if (x85 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[4].id', x85);",
                            "    }",
                            "    const x86 = getValueByPath(responseJson, 'features[5].type');",
                            "    if (x86 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].type', x86);",
                            "    }",
                            "    const x87 = getValueByPath(responseJson, 'features[5].properties.groupByBoundaryId');",
                            "    if (x87 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].properties.groupByBoundaryId', x87);",
                            "    }",
                            "    const x88 = getValueByPath(responseJson, 'features[5].properties.value');",
                            "    if (x88 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].properties.value', x88);",
                            "    }",
                            "    const x89 = getValueByPath(responseJson, 'features[5].properties.timestamp');",
                            "    if (x89 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].properties.timestamp', x89);",
                            "    }",
                            "    const x90 = getValueByPath(responseJson, 'features[5].geometry.type');",
                            "    if (x90 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].geometry.type', x90);",
                            "    }",
                            "    const x91 = getValueByPath(responseJson, 'features[5].geometry.coordinates[0][0][0]');",
                            "    if (x91 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].geometry.coordinates[0][0][0]', x91);",
                            "    }",
                            "    const x92 = getValueByPath(responseJson, 'features[5].geometry.coordinates[0][0][1]');",
                            "    if (x92 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].geometry.coordinates[0][0][1]', x92);",
                            "    }",
                            "    const x93 = getValueByPath(responseJson, 'features[5].geometry.coordinates[0][1][0]');",
                            "    if (x93 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].geometry.coordinates[0][1][0]', x93);",
                            "    }",
                            "    const x94 = getValueByPath(responseJson, 'features[5].geometry.coordinates[0][1][1]');",
                            "    if (x94 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].geometry.coordinates[0][1][1]', x94);",
                            "    }",
                            "    const x95 = getValueByPath(responseJson, 'features[5].geometry.coordinates[0][2][0]');",
                            "    if (x95 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].geometry.coordinates[0][2][0]', x95);",
                            "    }",
                            "    const x96 = getValueByPath(responseJson, 'features[5].geometry.coordinates[0][2][1]');",
                            "    if (x96 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].geometry.coordinates[0][2][1]', x96);",
                            "    }",
                            "    const x97 = getValueByPath(responseJson, 'features[5].geometry.coordinates[0][3][0]');",
                            "    if (x97 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].geometry.coordinates[0][3][0]', x97);",
                            "    }",
                            "    const x98 = getValueByPath(responseJson, 'features[5].geometry.coordinates[0][3][1]');",
                            "    if (x98 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].geometry.coordinates[0][3][1]', x98);",
                            "    }",
                            "    const x99 = getValueByPath(responseJson, 'features[5].geometry.coordinates[0][4][0]');",
                            "    if (x99 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].geometry.coordinates[0][4][0]', x99);",
                            "    }",
                            "    const x100 = getValueByPath(responseJson, 'features[5].geometry.coordinates[0][4][1]');",
                            "    if (x100 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].geometry.coordinates[0][4][1]', x100);",
                            "    }",
                            "    const x101 = getValueByPath(responseJson, 'features[5].id');",
                            "    if (x101 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[5].id', x101);",
                            "    }",
                            "    const x102 = getValueByPath(responseJson, 'features[6].type');",
                            "    if (x102 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].type', x102);",
                            "    }",
                            "    const x103 = getValueByPath(responseJson, 'features[6].properties.groupByBoundaryId');",
                            "    if (x103 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].properties.groupByBoundaryId', x103);",
                            "    }",
                            "    const x104 = getValueByPath(responseJson, 'features[6].properties.value');",
                            "    if (x104 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].properties.value', x104);",
                            "    }",
                            "    const x105 = getValueByPath(responseJson, 'features[6].properties.timestamp');",
                            "    if (x105 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].properties.timestamp', x105);",
                            "    }",
                            "    const x106 = getValueByPath(responseJson, 'features[6].geometry.type');",
                            "    if (x106 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].geometry.type', x106);",
                            "    }",
                            "    const x107 = getValueByPath(responseJson, 'features[6].geometry.coordinates[0][0][0]');",
                            "    if (x107 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].geometry.coordinates[0][0][0]', x107);",
                            "    }",
                            "    const x108 = getValueByPath(responseJson, 'features[6].geometry.coordinates[0][0][1]');",
                            "    if (x108 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].geometry.coordinates[0][0][1]', x108);",
                            "    }",
                            "    const x109 = getValueByPath(responseJson, 'features[6].geometry.coordinates[0][1][0]');",
                            "    if (x109 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].geometry.coordinates[0][1][0]', x109);",
                            "    }",
                            "    const x110 = getValueByPath(responseJson, 'features[6].geometry.coordinates[0][1][1]');",
                            "    if (x110 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].geometry.coordinates[0][1][1]', x110);",
                            "    }",
                            "    const x111 = getValueByPath(responseJson, 'features[6].geometry.coordinates[0][2][0]');",
                            "    if (x111 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].geometry.coordinates[0][2][0]', x111);",
                            "    }",
                            "    const x112 = getValueByPath(responseJson, 'features[6].geometry.coordinates[0][2][1]');",
                            "    if (x112 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].geometry.coordinates[0][2][1]', x112);",
                            "    }",
                            "    const x113 = getValueByPath(responseJson, 'features[6].geometry.coordinates[0][3][0]');",
                            "    if (x113 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].geometry.coordinates[0][3][0]', x113);",
                            "    }",
                            "    const x114 = getValueByPath(responseJson, 'features[6].geometry.coordinates[0][3][1]');",
                            "    if (x114 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].geometry.coordinates[0][3][1]', x114);",
                            "    }",
                            "    const x115 = getValueByPath(responseJson, 'features[6].geometry.coordinates[0][4][0]');",
                            "    if (x115 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].geometry.coordinates[0][4][0]', x115);",
                            "    }",
                            "    const x116 = getValueByPath(responseJson, 'features[6].geometry.coordinates[0][4][1]');",
                            "    if (x116 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].geometry.coordinates[0][4][1]', x116);",
                            "    }",
                            "    const x117 = getValueByPath(responseJson, 'features[6].id');",
                            "    if (x117 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[6].id', x117);",
                            "    }",
                            "    const x118 = getValueByPath(responseJson, 'features[7].type');",
                            "    if (x118 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].type', x118);",
                            "    }",
                            "    const x119 = getValueByPath(responseJson, 'features[7].properties.groupByBoundaryId');",
                            "    if (x119 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].properties.groupByBoundaryId', x119);",
                            "    }",
                            "    const x120 = getValueByPath(responseJson, 'features[7].properties.value');",
                            "    if (x120 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].properties.value', x120);",
                            "    }",
                            "    const x121 = getValueByPath(responseJson, 'features[7].properties.timestamp');",
                            "    if (x121 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].properties.timestamp', x121);",
                            "    }",
                            "    const x122 = getValueByPath(responseJson, 'features[7].geometry.type');",
                            "    if (x122 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].geometry.type', x122);",
                            "    }",
                            "    const x123 = getValueByPath(responseJson, 'features[7].geometry.coordinates[0][0][0]');",
                            "    if (x123 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].geometry.coordinates[0][0][0]', x123);",
                            "    }",
                            "    const x124 = getValueByPath(responseJson, 'features[7].geometry.coordinates[0][0][1]');",
                            "    if (x124 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].geometry.coordinates[0][0][1]', x124);",
                            "    }",
                            "    const x125 = getValueByPath(responseJson, 'features[7].geometry.coordinates[0][1][0]');",
                            "    if (x125 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].geometry.coordinates[0][1][0]', x125);",
                            "    }",
                            "    const x126 = getValueByPath(responseJson, 'features[7].geometry.coordinates[0][1][1]');",
                            "    if (x126 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].geometry.coordinates[0][1][1]', x126);",
                            "    }",
                            "    const x127 = getValueByPath(responseJson, 'features[7].geometry.coordinates[0][2][0]');",
                            "    if (x127 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].geometry.coordinates[0][2][0]', x127);",
                            "    }",
                            "    const x128 = getValueByPath(responseJson, 'features[7].geometry.coordinates[0][2][1]');",
                            "    if (x128 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].geometry.coordinates[0][2][1]', x128);",
                            "    }",
                            "    const x129 = getValueByPath(responseJson, 'features[7].geometry.coordinates[0][3][0]');",
                            "    if (x129 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].geometry.coordinates[0][3][0]', x129);",
                            "    }",
                            "    const x130 = getValueByPath(responseJson, 'features[7].geometry.coordinates[0][3][1]');",
                            "    if (x130 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].geometry.coordinates[0][3][1]', x130);",
                            "    }",
                            "    const x131 = getValueByPath(responseJson, 'features[7].geometry.coordinates[0][4][0]');",
                            "    if (x131 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].geometry.coordinates[0][4][0]', x131);",
                            "    }",
                            "    const x132 = getValueByPath(responseJson, 'features[7].geometry.coordinates[0][4][1]');",
                            "    if (x132 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].geometry.coordinates[0][4][1]', x132);",
                            "    }",
                            "    const x133 = getValueByPath(responseJson, 'features[7].id');",
                            "    if (x133 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[7].id', x133);",
                            "    }",
                            "    const x134 = getValueByPath(responseJson, 'features[8].type');",
                            "    if (x134 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].type', x134);",
                            "    }",
                            "    const x135 = getValueByPath(responseJson, 'features[8].properties.groupByBoundaryId');",
                            "    if (x135 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].properties.groupByBoundaryId', x135);",
                            "    }",
                            "    const x136 = getValueByPath(responseJson, 'features[8].properties.value');",
                            "    if (x136 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].properties.value', x136);",
                            "    }",
                            "    const x137 = getValueByPath(responseJson, 'features[8].properties.timestamp');",
                            "    if (x137 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].properties.timestamp', x137);",
                            "    }",
                            "    const x138 = getValueByPath(responseJson, 'features[8].geometry.type');",
                            "    if (x138 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].geometry.type', x138);",
                            "    }",
                            "    const x139 = getValueByPath(responseJson, 'features[8].geometry.coordinates[0][0][0]');",
                            "    if (x139 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].geometry.coordinates[0][0][0]', x139);",
                            "    }",
                            "    const x140 = getValueByPath(responseJson, 'features[8].geometry.coordinates[0][0][1]');",
                            "    if (x140 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].geometry.coordinates[0][0][1]', x140);",
                            "    }",
                            "    const x141 = getValueByPath(responseJson, 'features[8].geometry.coordinates[0][1][0]');",
                            "    if (x141 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].geometry.coordinates[0][1][0]', x141);",
                            "    }",
                            "    const x142 = getValueByPath(responseJson, 'features[8].geometry.coordinates[0][1][1]');",
                            "    if (x142 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].geometry.coordinates[0][1][1]', x142);",
                            "    }",
                            "    const x143 = getValueByPath(responseJson, 'features[8].geometry.coordinates[0][2][0]');",
                            "    if (x143 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].geometry.coordinates[0][2][0]', x143);",
                            "    }",
                            "    const x144 = getValueByPath(responseJson, 'features[8].geometry.coordinates[0][2][1]');",
                            "    if (x144 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].geometry.coordinates[0][2][1]', x144);",
                            "    }",
                            "    const x145 = getValueByPath(responseJson, 'features[8].geometry.coordinates[0][3][0]');",
                            "    if (x145 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].geometry.coordinates[0][3][0]', x145);",
                            "    }",
                            "    const x146 = getValueByPath(responseJson, 'features[8].geometry.coordinates[0][3][1]');",
                            "    if (x146 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].geometry.coordinates[0][3][1]', x146);",
                            "    }",
                            "    const x147 = getValueByPath(responseJson, 'features[8].geometry.coordinates[0][4][0]');",
                            "    if (x147 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].geometry.coordinates[0][4][0]', x147);",
                            "    }",
                            "    const x148 = getValueByPath(responseJson, 'features[8].geometry.coordinates[0][4][1]');",
                            "    if (x148 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].geometry.coordinates[0][4][1]', x148);",
                            "    }",
                            "    const x149 = getValueByPath(responseJson, 'features[8].id');",
                            "    if (x149 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[8].id', x149);",
                            "    }",
                            "    const x150 = getValueByPath(responseJson, 'features[9].type');",
                            "    if (x150 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].type', x150);",
                            "    }",
                            "    const x151 = getValueByPath(responseJson, 'features[9].properties.groupByBoundaryId');",
                            "    if (x151 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].properties.groupByBoundaryId', x151);",
                            "    }",
                            "    const x152 = getValueByPath(responseJson, 'features[9].properties.value');",
                            "    if (x152 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].properties.value', x152);",
                            "    }",
                            "    const x153 = getValueByPath(responseJson, 'features[9].properties.timestamp');",
                            "    if (x153 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].properties.timestamp', x153);",
                            "    }",
                            "    const x154 = getValueByPath(responseJson, 'features[9].geometry.type');",
                            "    if (x154 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].geometry.type', x154);",
                            "    }",
                            "    const x155 = getValueByPath(responseJson, 'features[9].geometry.coordinates[0][0][0]');",
                            "    if (x155 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].geometry.coordinates[0][0][0]', x155);",
                            "    }",
                            "    const x156 = getValueByPath(responseJson, 'features[9].geometry.coordinates[0][0][1]');",
                            "    if (x156 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].geometry.coordinates[0][0][1]', x156);",
                            "    }",
                            "    const x157 = getValueByPath(responseJson, 'features[9].geometry.coordinates[0][1][0]');",
                            "    if (x157 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].geometry.coordinates[0][1][0]', x157);",
                            "    }",
                            "    const x158 = getValueByPath(responseJson, 'features[9].geometry.coordinates[0][1][1]');",
                            "    if (x158 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].geometry.coordinates[0][1][1]', x158);",
                            "    }",
                            "    const x159 = getValueByPath(responseJson, 'features[9].geometry.coordinates[0][2][0]');",
                            "    if (x159 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].geometry.coordinates[0][2][0]', x159);",
                            "    }",
                            "    const x160 = getValueByPath(responseJson, 'features[9].geometry.coordinates[0][2][1]');",
                            "    if (x160 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].geometry.coordinates[0][2][1]', x160);",
                            "    }",
                            "    const x161 = getValueByPath(responseJson, 'features[9].geometry.coordinates[0][3][0]');",
                            "    if (x161 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].geometry.coordinates[0][3][0]', x161);",
                            "    }",
                            "    const x162 = getValueByPath(responseJson, 'features[9].geometry.coordinates[0][3][1]');",
                            "    if (x162 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].geometry.coordinates[0][3][1]', x162);",
                            "    }",
                            "    const x163 = getValueByPath(responseJson, 'features[9].geometry.coordinates[0][4][0]');",
                            "    if (x163 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].geometry.coordinates[0][4][0]', x163);",
                            "    }",
                            "    const x164 = getValueByPath(responseJson, 'features[9].geometry.coordinates[0][4][1]');",
                            "    if (x164 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].geometry.coordinates[0][4][1]', x164);",
                            "    }",
                            "    const x165 = getValueByPath(responseJson, 'features[9].id');",
                            "    if (x165 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[9].id', x165);",
                            "    }",
                            "    const x166 = getValueByPath(responseJson, 'features[10].type');",
                            "    if (x166 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].type', x166);",
                            "    }",
                            "    const x167 = getValueByPath(responseJson, 'features[10].properties.groupByBoundaryId');",
                            "    if (x167 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].properties.groupByBoundaryId', x167);",
                            "    }",
                            "    const x168 = getValueByPath(responseJson, 'features[10].properties.value');",
                            "    if (x168 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].properties.value', x168);",
                            "    }",
                            "    const x169 = getValueByPath(responseJson, 'features[10].properties.timestamp');",
                            "    if (x169 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].properties.timestamp', x169);",
                            "    }",
                            "    const x170 = getValueByPath(responseJson, 'features[10].geometry.type');",
                            "    if (x170 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].geometry.type', x170);",
                            "    }",
                            "    const x171 = getValueByPath(responseJson, 'features[10].geometry.coordinates[0][0][0]');",
                            "    if (x171 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].geometry.coordinates[0][0][0]', x171);",
                            "    }",
                            "    const x172 = getValueByPath(responseJson, 'features[10].geometry.coordinates[0][0][1]');",
                            "    if (x172 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].geometry.coordinates[0][0][1]', x172);",
                            "    }",
                            "    const x173 = getValueByPath(responseJson, 'features[10].geometry.coordinates[0][1][0]');",
                            "    if (x173 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].geometry.coordinates[0][1][0]', x173);",
                            "    }",
                            "    const x174 = getValueByPath(responseJson, 'features[10].geometry.coordinates[0][1][1]');",
                            "    if (x174 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].geometry.coordinates[0][1][1]', x174);",
                            "    }",
                            "    const x175 = getValueByPath(responseJson, 'features[10].geometry.coordinates[0][2][0]');",
                            "    if (x175 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].geometry.coordinates[0][2][0]', x175);",
                            "    }",
                            "    const x176 = getValueByPath(responseJson, 'features[10].geometry.coordinates[0][2][1]');",
                            "    if (x176 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].geometry.coordinates[0][2][1]', x176);",
                            "    }",
                            "    const x177 = getValueByPath(responseJson, 'features[10].geometry.coordinates[0][3][0]');",
                            "    if (x177 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].geometry.coordinates[0][3][0]', x177);",
                            "    }",
                            "    const x178 = getValueByPath(responseJson, 'features[10].geometry.coordinates[0][3][1]');",
                            "    if (x178 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].geometry.coordinates[0][3][1]', x178);",
                            "    }",
                            "    const x179 = getValueByPath(responseJson, 'features[10].geometry.coordinates[0][4][0]');",
                            "    if (x179 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].geometry.coordinates[0][4][0]', x179);",
                            "    }",
                            "    const x180 = getValueByPath(responseJson, 'features[10].geometry.coordinates[0][4][1]');",
                            "    if (x180 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].geometry.coordinates[0][4][1]', x180);",
                            "    }",
                            "    const x181 = getValueByPath(responseJson, 'features[10].id');",
                            "    if (x181 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[10].id', x181);",
                            "    }",
                            "    const x182 = getValueByPath(responseJson, 'features[11].type');",
                            "    if (x182 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].type', x182);",
                            "    }",
                            "    const x183 = getValueByPath(responseJson, 'features[11].properties.groupByBoundaryId');",
                            "    if (x183 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].properties.groupByBoundaryId', x183);",
                            "    }",
                            "    const x184 = getValueByPath(responseJson, 'features[11].properties.value');",
                            "    if (x184 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].properties.value', x184);",
                            "    }",
                            "    const x185 = getValueByPath(responseJson, 'features[11].properties.timestamp');",
                            "    if (x185 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].properties.timestamp', x185);",
                            "    }",
                            "    const x186 = getValueByPath(responseJson, 'features[11].geometry.type');",
                            "    if (x186 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].geometry.type', x186);",
                            "    }",
                            "    const x187 = getValueByPath(responseJson, 'features[11].geometry.coordinates[0][0][0]');",
                            "    if (x187 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].geometry.coordinates[0][0][0]', x187);",
                            "    }",
                            "    const x188 = getValueByPath(responseJson, 'features[11].geometry.coordinates[0][0][1]');",
                            "    if (x188 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].geometry.coordinates[0][0][1]', x188);",
                            "    }",
                            "    const x189 = getValueByPath(responseJson, 'features[11].geometry.coordinates[0][1][0]');",
                            "    if (x189 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].geometry.coordinates[0][1][0]', x189);",
                            "    }",
                            "    const x190 = getValueByPath(responseJson, 'features[11].geometry.coordinates[0][1][1]');",
                            "    if (x190 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].geometry.coordinates[0][1][1]', x190);",
                            "    }",
                            "    const x191 = getValueByPath(responseJson, 'features[11].geometry.coordinates[0][2][0]');",
                            "    if (x191 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].geometry.coordinates[0][2][0]', x191);",
                            "    }",
                            "    const x192 = getValueByPath(responseJson, 'features[11].geometry.coordinates[0][2][1]');",
                            "    if (x192 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].geometry.coordinates[0][2][1]', x192);",
                            "    }",
                            "    const x193 = getValueByPath(responseJson, 'features[11].geometry.coordinates[0][3][0]');",
                            "    if (x193 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].geometry.coordinates[0][3][0]', x193);",
                            "    }",
                            "    const x194 = getValueByPath(responseJson, 'features[11].geometry.coordinates[0][3][1]');",
                            "    if (x194 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].geometry.coordinates[0][3][1]', x194);",
                            "    }",
                            "    const x195 = getValueByPath(responseJson, 'features[11].geometry.coordinates[0][4][0]');",
                            "    if (x195 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].geometry.coordinates[0][4][0]', x195);",
                            "    }",
                            "    const x196 = getValueByPath(responseJson, 'features[11].geometry.coordinates[0][4][1]');",
                            "    if (x196 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].geometry.coordinates[0][4][1]', x196);",
                            "    }",
                            "    const x197 = getValueByPath(responseJson, 'features[11].id');",
                            "    if (x197 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[11].id', x197);",
                            "    }",
                            "    const x198 = getValueByPath(responseJson, 'features[12].type');",
                            "    if (x198 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].type', x198);",
                            "    }",
                            "    const x199 = getValueByPath(responseJson, 'features[12].properties.groupByBoundaryId');",
                            "    if (x199 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].properties.groupByBoundaryId', x199);",
                            "    }",
                            "    const x200 = getValueByPath(responseJson, 'features[12].properties.value');",
                            "    if (x200 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].properties.value', x200);",
                            "    }",
                            "    const x201 = getValueByPath(responseJson, 'features[12].properties.timestamp');",
                            "    if (x201 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].properties.timestamp', x201);",
                            "    }",
                            "    const x202 = getValueByPath(responseJson, 'features[12].geometry.type');",
                            "    if (x202 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].geometry.type', x202);",
                            "    }",
                            "    const x203 = getValueByPath(responseJson, 'features[12].geometry.coordinates[0][0][0]');",
                            "    if (x203 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].geometry.coordinates[0][0][0]', x203);",
                            "    }",
                            "    const x204 = getValueByPath(responseJson, 'features[12].geometry.coordinates[0][0][1]');",
                            "    if (x204 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].geometry.coordinates[0][0][1]', x204);",
                            "    }",
                            "    const x205 = getValueByPath(responseJson, 'features[12].geometry.coordinates[0][1][0]');",
                            "    if (x205 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].geometry.coordinates[0][1][0]', x205);",
                            "    }",
                            "    const x206 = getValueByPath(responseJson, 'features[12].geometry.coordinates[0][1][1]');",
                            "    if (x206 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].geometry.coordinates[0][1][1]', x206);",
                            "    }",
                            "    const x207 = getValueByPath(responseJson, 'features[12].geometry.coordinates[0][2][0]');",
                            "    if (x207 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].geometry.coordinates[0][2][0]', x207);",
                            "    }",
                            "    const x208 = getValueByPath(responseJson, 'features[12].geometry.coordinates[0][2][1]');",
                            "    if (x208 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].geometry.coordinates[0][2][1]', x208);",
                            "    }",
                            "    const x209 = getValueByPath(responseJson, 'features[12].geometry.coordinates[0][3][0]');",
                            "    if (x209 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].geometry.coordinates[0][3][0]', x209);",
                            "    }",
                            "    const x210 = getValueByPath(responseJson, 'features[12].geometry.coordinates[0][3][1]');",
                            "    if (x210 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].geometry.coordinates[0][3][1]', x210);",
                            "    }",
                            "    const x211 = getValueByPath(responseJson, 'features[12].geometry.coordinates[0][4][0]');",
                            "    if (x211 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].geometry.coordinates[0][4][0]', x211);",
                            "    }",
                            "    const x212 = getValueByPath(responseJson, 'features[12].geometry.coordinates[0][4][1]');",
                            "    if (x212 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].geometry.coordinates[0][4][1]', x212);",
                            "    }",
                            "    const x213 = getValueByPath(responseJson, 'features[12].id');",
                            "    if (x213 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[12].id', x213);",
                            "    }",
                            "    const x214 = getValueByPath(responseJson, 'features[13].type');",
                            "    if (x214 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].type', x214);",
                            "    }",
                            "    const x215 = getValueByPath(responseJson, 'features[13].properties.groupByBoundaryId');",
                            "    if (x215 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].properties.groupByBoundaryId', x215);",
                            "    }",
                            "    const x216 = getValueByPath(responseJson, 'features[13].properties.value');",
                            "    if (x216 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].properties.value', x216);",
                            "    }",
                            "    const x217 = getValueByPath(responseJson, 'features[13].properties.timestamp');",
                            "    if (x217 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].properties.timestamp', x217);",
                            "    }",
                            "    const x218 = getValueByPath(responseJson, 'features[13].geometry.type');",
                            "    if (x218 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].geometry.type', x218);",
                            "    }",
                            "    const x219 = getValueByPath(responseJson, 'features[13].geometry.coordinates[0][0][0]');",
                            "    if (x219 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].geometry.coordinates[0][0][0]', x219);",
                            "    }",
                            "    const x220 = getValueByPath(responseJson, 'features[13].geometry.coordinates[0][0][1]');",
                            "    if (x220 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].geometry.coordinates[0][0][1]', x220);",
                            "    }",
                            "    const x221 = getValueByPath(responseJson, 'features[13].geometry.coordinates[0][1][0]');",
                            "    if (x221 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].geometry.coordinates[0][1][0]', x221);",
                            "    }",
                            "    const x222 = getValueByPath(responseJson, 'features[13].geometry.coordinates[0][1][1]');",
                            "    if (x222 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].geometry.coordinates[0][1][1]', x222);",
                            "    }",
                            "    const x223 = getValueByPath(responseJson, 'features[13].geometry.coordinates[0][2][0]');",
                            "    if (x223 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].geometry.coordinates[0][2][0]', x223);",
                            "    }",
                            "    const x224 = getValueByPath(responseJson, 'features[13].geometry.coordinates[0][2][1]');",
                            "    if (x224 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].geometry.coordinates[0][2][1]', x224);",
                            "    }",
                            "    const x225 = getValueByPath(responseJson, 'features[13].geometry.coordinates[0][3][0]');",
                            "    if (x225 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].geometry.coordinates[0][3][0]', x225);",
                            "    }",
                            "    const x226 = getValueByPath(responseJson, 'features[13].geometry.coordinates[0][3][1]');",
                            "    if (x226 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].geometry.coordinates[0][3][1]', x226);",
                            "    }",
                            "    const x227 = getValueByPath(responseJson, 'features[13].geometry.coordinates[0][4][0]');",
                            "    if (x227 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].geometry.coordinates[0][4][0]', x227);",
                            "    }",
                            "    const x228 = getValueByPath(responseJson, 'features[13].geometry.coordinates[0][4][1]');",
                            "    if (x228 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].geometry.coordinates[0][4][1]', x228);",
                            "    }",
                            "    const x229 = getValueByPath(responseJson, 'features[13].id');",
                            "    if (x229 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[13].id', x229);",
                            "    }",
                            "    const x230 = getValueByPath(responseJson, 'features[14].type');",
                            "    if (x230 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].type', x230);",
                            "    }",
                            "    const x231 = getValueByPath(responseJson, 'features[14].properties.groupByBoundaryId');",
                            "    if (x231 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].properties.groupByBoundaryId', x231);",
                            "    }",
                            "    const x232 = getValueByPath(responseJson, 'features[14].properties.value');",
                            "    if (x232 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].properties.value', x232);",
                            "    }",
                            "    const x233 = getValueByPath(responseJson, 'features[14].properties.timestamp');",
                            "    if (x233 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].properties.timestamp', x233);",
                            "    }",
                            "    const x234 = getValueByPath(responseJson, 'features[14].geometry.type');",
                            "    if (x234 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].geometry.type', x234);",
                            "    }",
                            "    const x235 = getValueByPath(responseJson, 'features[14].geometry.coordinates[0][0][0]');",
                            "    if (x235 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].geometry.coordinates[0][0][0]', x235);",
                            "    }",
                            "    const x236 = getValueByPath(responseJson, 'features[14].geometry.coordinates[0][0][1]');",
                            "    if (x236 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].geometry.coordinates[0][0][1]', x236);",
                            "    }",
                            "    const x237 = getValueByPath(responseJson, 'features[14].geometry.coordinates[0][1][0]');",
                            "    if (x237 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].geometry.coordinates[0][1][0]', x237);",
                            "    }",
                            "    const x238 = getValueByPath(responseJson, 'features[14].geometry.coordinates[0][1][1]');",
                            "    if (x238 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].geometry.coordinates[0][1][1]', x238);",
                            "    }",
                            "    const x239 = getValueByPath(responseJson, 'features[14].geometry.coordinates[0][2][0]');",
                            "    if (x239 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].geometry.coordinates[0][2][0]', x239);",
                            "    }",
                            "    const x240 = getValueByPath(responseJson, 'features[14].geometry.coordinates[0][2][1]');",
                            "    if (x240 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].geometry.coordinates[0][2][1]', x240);",
                            "    }",
                            "    const x241 = getValueByPath(responseJson, 'features[14].geometry.coordinates[0][3][0]');",
                            "    if (x241 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].geometry.coordinates[0][3][0]', x241);",
                            "    }",
                            "    const x242 = getValueByPath(responseJson, 'features[14].geometry.coordinates[0][3][1]');",
                            "    if (x242 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].geometry.coordinates[0][3][1]', x242);",
                            "    }",
                            "    const x243 = getValueByPath(responseJson, 'features[14].geometry.coordinates[0][4][0]');",
                            "    if (x243 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].geometry.coordinates[0][4][0]', x243);",
                            "    }",
                            "    const x244 = getValueByPath(responseJson, 'features[14].geometry.coordinates[0][4][1]');",
                            "    if (x244 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].geometry.coordinates[0][4][1]', x244);",
                            "    }",
                            "    const x245 = getValueByPath(responseJson, 'features[14].id');",
                            "    if (x245 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[14].id', x245);",
                            "    }",
                            "    const x246 = getValueByPath(responseJson, 'features[15].type');",
                            "    if (x246 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].type', x246);",
                            "    }",
                            "    const x247 = getValueByPath(responseJson, 'features[15].properties.groupByBoundaryId');",
                            "    if (x247 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].properties.groupByBoundaryId', x247);",
                            "    }",
                            "    const x248 = getValueByPath(responseJson, 'features[15].properties.value');",
                            "    if (x248 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].properties.value', x248);",
                            "    }",
                            "    const x249 = getValueByPath(responseJson, 'features[15].properties.timestamp');",
                            "    if (x249 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].properties.timestamp', x249);",
                            "    }",
                            "    const x250 = getValueByPath(responseJson, 'features[15].geometry.type');",
                            "    if (x250 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].geometry.type', x250);",
                            "    }",
                            "    const x251 = getValueByPath(responseJson, 'features[15].geometry.coordinates[0][0][0]');",
                            "    if (x251 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].geometry.coordinates[0][0][0]', x251);",
                            "    }",
                            "    const x252 = getValueByPath(responseJson, 'features[15].geometry.coordinates[0][0][1]');",
                            "    if (x252 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].geometry.coordinates[0][0][1]', x252);",
                            "    }",
                            "    const x253 = getValueByPath(responseJson, 'features[15].geometry.coordinates[0][1][0]');",
                            "    if (x253 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].geometry.coordinates[0][1][0]', x253);",
                            "    }",
                            "    const x254 = getValueByPath(responseJson, 'features[15].geometry.coordinates[0][1][1]');",
                            "    if (x254 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].geometry.coordinates[0][1][1]', x254);",
                            "    }",
                            "    const x255 = getValueByPath(responseJson, 'features[15].geometry.coordinates[0][2][0]');",
                            "    if (x255 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].geometry.coordinates[0][2][0]', x255);",
                            "    }",
                            "    const x256 = getValueByPath(responseJson, 'features[15].geometry.coordinates[0][2][1]');",
                            "    if (x256 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].geometry.coordinates[0][2][1]', x256);",
                            "    }",
                            "    const x257 = getValueByPath(responseJson, 'features[15].geometry.coordinates[0][3][0]');",
                            "    if (x257 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].geometry.coordinates[0][3][0]', x257);",
                            "    }",
                            "    const x258 = getValueByPath(responseJson, 'features[15].geometry.coordinates[0][3][1]');",
                            "    if (x258 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].geometry.coordinates[0][3][1]', x258);",
                            "    }",
                            "    const x259 = getValueByPath(responseJson, 'features[15].geometry.coordinates[0][4][0]');",
                            "    if (x259 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].geometry.coordinates[0][4][0]', x259);",
                            "    }",
                            "    const x260 = getValueByPath(responseJson, 'features[15].geometry.coordinates[0][4][1]');",
                            "    if (x260 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].geometry.coordinates[0][4][1]', x260);",
                            "    }",
                            "    const x261 = getValueByPath(responseJson, 'features[15].id');",
                            "    if (x261 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[15].id', x261);",
                            "    }",
                            "    const x262 = getValueByPath(responseJson, 'features[16].type');",
                            "    if (x262 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].type', x262);",
                            "    }",
                            "    const x263 = getValueByPath(responseJson, 'features[16].properties.groupByBoundaryId');",
                            "    if (x263 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].properties.groupByBoundaryId', x263);",
                            "    }",
                            "    const x264 = getValueByPath(responseJson, 'features[16].properties.value');",
                            "    if (x264 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].properties.value', x264);",
                            "    }",
                            "    const x265 = getValueByPath(responseJson, 'features[16].properties.timestamp');",
                            "    if (x265 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].properties.timestamp', x265);",
                            "    }",
                            "    const x266 = getValueByPath(responseJson, 'features[16].geometry.type');",
                            "    if (x266 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].geometry.type', x266);",
                            "    }",
                            "    const x267 = getValueByPath(responseJson, 'features[16].geometry.coordinates[0][0][0]');",
                            "    if (x267 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].geometry.coordinates[0][0][0]', x267);",
                            "    }",
                            "    const x268 = getValueByPath(responseJson, 'features[16].geometry.coordinates[0][0][1]');",
                            "    if (x268 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].geometry.coordinates[0][0][1]', x268);",
                            "    }",
                            "    const x269 = getValueByPath(responseJson, 'features[16].geometry.coordinates[0][1][0]');",
                            "    if (x269 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].geometry.coordinates[0][1][0]', x269);",
                            "    }",
                            "    const x270 = getValueByPath(responseJson, 'features[16].geometry.coordinates[0][1][1]');",
                            "    if (x270 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].geometry.coordinates[0][1][1]', x270);",
                            "    }",
                            "    const x271 = getValueByPath(responseJson, 'features[16].geometry.coordinates[0][2][0]');",
                            "    if (x271 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].geometry.coordinates[0][2][0]', x271);",
                            "    }",
                            "    const x272 = getValueByPath(responseJson, 'features[16].geometry.coordinates[0][2][1]');",
                            "    if (x272 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].geometry.coordinates[0][2][1]', x272);",
                            "    }",
                            "    const x273 = getValueByPath(responseJson, 'features[16].geometry.coordinates[0][3][0]');",
                            "    if (x273 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].geometry.coordinates[0][3][0]', x273);",
                            "    }",
                            "    const x274 = getValueByPath(responseJson, 'features[16].geometry.coordinates[0][3][1]');",
                            "    if (x274 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].geometry.coordinates[0][3][1]', x274);",
                            "    }",
                            "    const x275 = getValueByPath(responseJson, 'features[16].geometry.coordinates[0][4][0]');",
                            "    if (x275 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].geometry.coordinates[0][4][0]', x275);",
                            "    }",
                            "    const x276 = getValueByPath(responseJson, 'features[16].geometry.coordinates[0][4][1]');",
                            "    if (x276 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].geometry.coordinates[0][4][1]', x276);",
                            "    }",
                            "    const x277 = getValueByPath(responseJson, 'features[16].id');",
                            "    if (x277 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[16].id', x277);",
                            "    }",
                            "    const x278 = getValueByPath(responseJson, 'features[17].type');",
                            "    if (x278 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].type', x278);",
                            "    }",
                            "    const x279 = getValueByPath(responseJson, 'features[17].properties.groupByBoundaryId');",
                            "    if (x279 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].properties.groupByBoundaryId', x279);",
                            "    }",
                            "    const x280 = getValueByPath(responseJson, 'features[17].properties.value');",
                            "    if (x280 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].properties.value', x280);",
                            "    }",
                            "    const x281 = getValueByPath(responseJson, 'features[17].properties.timestamp');",
                            "    if (x281 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].properties.timestamp', x281);",
                            "    }",
                            "    const x282 = getValueByPath(responseJson, 'features[17].geometry.type');",
                            "    if (x282 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].geometry.type', x282);",
                            "    }",
                            "    const x283 = getValueByPath(responseJson, 'features[17].geometry.coordinates[0][0][0]');",
                            "    if (x283 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].geometry.coordinates[0][0][0]', x283);",
                            "    }",
                            "    const x284 = getValueByPath(responseJson, 'features[17].geometry.coordinates[0][0][1]');",
                            "    if (x284 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].geometry.coordinates[0][0][1]', x284);",
                            "    }",
                            "    const x285 = getValueByPath(responseJson, 'features[17].geometry.coordinates[0][1][0]');",
                            "    if (x285 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].geometry.coordinates[0][1][0]', x285);",
                            "    }",
                            "    const x286 = getValueByPath(responseJson, 'features[17].geometry.coordinates[0][1][1]');",
                            "    if (x286 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].geometry.coordinates[0][1][1]', x286);",
                            "    }",
                            "    const x287 = getValueByPath(responseJson, 'features[17].geometry.coordinates[0][2][0]');",
                            "    if (x287 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].geometry.coordinates[0][2][0]', x287);",
                            "    }",
                            "    const x288 = getValueByPath(responseJson, 'features[17].geometry.coordinates[0][2][1]');",
                            "    if (x288 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].geometry.coordinates[0][2][1]', x288);",
                            "    }",
                            "    const x289 = getValueByPath(responseJson, 'features[17].geometry.coordinates[0][3][0]');",
                            "    if (x289 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].geometry.coordinates[0][3][0]', x289);",
                            "    }",
                            "    const x290 = getValueByPath(responseJson, 'features[17].geometry.coordinates[0][3][1]');",
                            "    if (x290 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].geometry.coordinates[0][3][1]', x290);",
                            "    }",
                            "    const x291 = getValueByPath(responseJson, 'features[17].geometry.coordinates[0][4][0]');",
                            "    if (x291 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].geometry.coordinates[0][4][0]', x291);",
                            "    }",
                            "    const x292 = getValueByPath(responseJson, 'features[17].geometry.coordinates[0][4][1]');",
                            "    if (x292 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].geometry.coordinates[0][4][1]', x292);",
                            "    }",
                            "    const x293 = getValueByPath(responseJson, 'features[17].id');",
                            "    if (x293 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[17].id', x293);",
                            "    }",
                            "    const x294 = getValueByPath(responseJson, 'features[18].type');",
                            "    if (x294 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].type', x294);",
                            "    }",
                            "    const x295 = getValueByPath(responseJson, 'features[18].properties.groupByBoundaryId');",
                            "    if (x295 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].properties.groupByBoundaryId', x295);",
                            "    }",
                            "    const x296 = getValueByPath(responseJson, 'features[18].properties.value');",
                            "    if (x296 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].properties.value', x296);",
                            "    }",
                            "    const x297 = getValueByPath(responseJson, 'features[18].properties.timestamp');",
                            "    if (x297 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].properties.timestamp', x297);",
                            "    }",
                            "    const x298 = getValueByPath(responseJson, 'features[18].geometry.type');",
                            "    if (x298 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].geometry.type', x298);",
                            "    }",
                            "    const x299 = getValueByPath(responseJson, 'features[18].geometry.coordinates[0][0][0]');",
                            "    if (x299 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].geometry.coordinates[0][0][0]', x299);",
                            "    }",
                            "    const x300 = getValueByPath(responseJson, 'features[18].geometry.coordinates[0][0][1]');",
                            "    if (x300 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].geometry.coordinates[0][0][1]', x300);",
                            "    }",
                            "    const x301 = getValueByPath(responseJson, 'features[18].geometry.coordinates[0][1][0]');",
                            "    if (x301 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].geometry.coordinates[0][1][0]', x301);",
                            "    }",
                            "    const x302 = getValueByPath(responseJson, 'features[18].geometry.coordinates[0][1][1]');",
                            "    if (x302 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].geometry.coordinates[0][1][1]', x302);",
                            "    }",
                            "    const x303 = getValueByPath(responseJson, 'features[18].geometry.coordinates[0][2][0]');",
                            "    if (x303 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].geometry.coordinates[0][2][0]', x303);",
                            "    }",
                            "    const x304 = getValueByPath(responseJson, 'features[18].geometry.coordinates[0][2][1]');",
                            "    if (x304 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].geometry.coordinates[0][2][1]', x304);",
                            "    }",
                            "    const x305 = getValueByPath(responseJson, 'features[18].geometry.coordinates[0][3][0]');",
                            "    if (x305 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].geometry.coordinates[0][3][0]', x305);",
                            "    }",
                            "    const x306 = getValueByPath(responseJson, 'features[18].geometry.coordinates[0][3][1]');",
                            "    if (x306 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].geometry.coordinates[0][3][1]', x306);",
                            "    }",
                            "    const x307 = getValueByPath(responseJson, 'features[18].geometry.coordinates[0][4][0]');",
                            "    if (x307 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].geometry.coordinates[0][4][0]', x307);",
                            "    }",
                            "    const x308 = getValueByPath(responseJson, 'features[18].geometry.coordinates[0][4][1]');",
                            "    if (x308 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].geometry.coordinates[0][4][1]', x308);",
                            "    }",
                            "    const x309 = getValueByPath(responseJson, 'features[18].id');",
                            "    if (x309 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[18].id', x309);",
                            "    }",
                            "    const x310 = getValueByPath(responseJson, 'features[19].type');",
                            "    if (x310 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].type', x310);",
                            "    }",
                            "    const x311 = getValueByPath(responseJson, 'features[19].properties.groupByBoundaryId');",
                            "    if (x311 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].properties.groupByBoundaryId', x311);",
                            "    }",
                            "    const x312 = getValueByPath(responseJson, 'features[19].properties.value');",
                            "    if (x312 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].properties.value', x312);",
                            "    }",
                            "    const x313 = getValueByPath(responseJson, 'features[19].properties.timestamp');",
                            "    if (x313 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].properties.timestamp', x313);",
                            "    }",
                            "    const x314 = getValueByPath(responseJson, 'features[19].geometry.type');",
                            "    if (x314 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].geometry.type', x314);",
                            "    }",
                            "    const x315 = getValueByPath(responseJson, 'features[19].geometry.coordinates[0][0][0]');",
                            "    if (x315 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].geometry.coordinates[0][0][0]', x315);",
                            "    }",
                            "    const x316 = getValueByPath(responseJson, 'features[19].geometry.coordinates[0][0][1]');",
                            "    if (x316 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].geometry.coordinates[0][0][1]', x316);",
                            "    }",
                            "    const x317 = getValueByPath(responseJson, 'features[19].geometry.coordinates[0][1][0]');",
                            "    if (x317 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].geometry.coordinates[0][1][0]', x317);",
                            "    }",
                            "    const x318 = getValueByPath(responseJson, 'features[19].geometry.coordinates[0][1][1]');",
                            "    if (x318 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].geometry.coordinates[0][1][1]', x318);",
                            "    }",
                            "    const x319 = getValueByPath(responseJson, 'features[19].geometry.coordinates[0][2][0]');",
                            "    if (x319 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].geometry.coordinates[0][2][0]', x319);",
                            "    }",
                            "    const x320 = getValueByPath(responseJson, 'features[19].geometry.coordinates[0][2][1]');",
                            "    if (x320 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].geometry.coordinates[0][2][1]', x320);",
                            "    }",
                            "    const x321 = getValueByPath(responseJson, 'features[19].geometry.coordinates[0][3][0]');",
                            "    if (x321 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].geometry.coordinates[0][3][0]', x321);",
                            "    }",
                            "    const x322 = getValueByPath(responseJson, 'features[19].geometry.coordinates[0][3][1]');",
                            "    if (x322 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].geometry.coordinates[0][3][1]', x322);",
                            "    }",
                            "    const x323 = getValueByPath(responseJson, 'features[19].geometry.coordinates[0][4][0]');",
                            "    if (x323 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].geometry.coordinates[0][4][0]', x323);",
                            "    }",
                            "    const x324 = getValueByPath(responseJson, 'features[19].geometry.coordinates[0][4][1]');",
                            "    if (x324 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].geometry.coordinates[0][4][1]', x324);",
                            "    }",
                            "    const x325 = getValueByPath(responseJson, 'features[19].id');",
                            "    if (x325 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[19].id', x325);",
                            "    }",
                            "    const x326 = getValueByPath(responseJson, 'features[20].type');",
                            "    if (x326 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].type', x326);",
                            "    }",
                            "    const x327 = getValueByPath(responseJson, 'features[20].properties.groupByBoundaryId');",
                            "    if (x327 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].properties.groupByBoundaryId', x327);",
                            "    }",
                            "    const x328 = getValueByPath(responseJson, 'features[20].properties.value');",
                            "    if (x328 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].properties.value', x328);",
                            "    }",
                            "    const x329 = getValueByPath(responseJson, 'features[20].properties.timestamp');",
                            "    if (x329 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].properties.timestamp', x329);",
                            "    }",
                            "    const x330 = getValueByPath(responseJson, 'features[20].geometry.type');",
                            "    if (x330 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].geometry.type', x330);",
                            "    }",
                            "    const x331 = getValueByPath(responseJson, 'features[20].geometry.coordinates[0][0][0]');",
                            "    if (x331 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].geometry.coordinates[0][0][0]', x331);",
                            "    }",
                            "    const x332 = getValueByPath(responseJson, 'features[20].geometry.coordinates[0][0][1]');",
                            "    if (x332 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].geometry.coordinates[0][0][1]', x332);",
                            "    }",
                            "    const x333 = getValueByPath(responseJson, 'features[20].geometry.coordinates[0][1][0]');",
                            "    if (x333 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].geometry.coordinates[0][1][0]', x333);",
                            "    }",
                            "    const x334 = getValueByPath(responseJson, 'features[20].geometry.coordinates[0][1][1]');",
                            "    if (x334 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].geometry.coordinates[0][1][1]', x334);",
                            "    }",
                            "    const x335 = getValueByPath(responseJson, 'features[20].geometry.coordinates[0][2][0]');",
                            "    if (x335 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].geometry.coordinates[0][2][0]', x335);",
                            "    }",
                            "    const x336 = getValueByPath(responseJson, 'features[20].geometry.coordinates[0][2][1]');",
                            "    if (x336 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].geometry.coordinates[0][2][1]', x336);",
                            "    }",
                            "    const x337 = getValueByPath(responseJson, 'features[20].geometry.coordinates[0][3][0]');",
                            "    if (x337 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].geometry.coordinates[0][3][0]', x337);",
                            "    }",
                            "    const x338 = getValueByPath(responseJson, 'features[20].geometry.coordinates[0][3][1]');",
                            "    if (x338 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].geometry.coordinates[0][3][1]', x338);",
                            "    }",
                            "    const x339 = getValueByPath(responseJson, 'features[20].geometry.coordinates[0][4][0]');",
                            "    if (x339 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].geometry.coordinates[0][4][0]', x339);",
                            "    }",
                            "    const x340 = getValueByPath(responseJson, 'features[20].geometry.coordinates[0][4][1]');",
                            "    if (x340 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].geometry.coordinates[0][4][1]', x340);",
                            "    }",
                            "    const x341 = getValueByPath(responseJson, 'features[20].id');",
                            "    if (x341 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[20].id', x341);",
                            "    }",
                            "    const x342 = getValueByPath(responseJson, 'features[21].type');",
                            "    if (x342 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].type', x342);",
                            "    }",
                            "    const x343 = getValueByPath(responseJson, 'features[21].properties.groupByBoundaryId');",
                            "    if (x343 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].properties.groupByBoundaryId', x343);",
                            "    }",
                            "    const x344 = getValueByPath(responseJson, 'features[21].properties.value');",
                            "    if (x344 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].properties.value', x344);",
                            "    }",
                            "    const x345 = getValueByPath(responseJson, 'features[21].properties.timestamp');",
                            "    if (x345 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].properties.timestamp', x345);",
                            "    }",
                            "    const x346 = getValueByPath(responseJson, 'features[21].geometry.type');",
                            "    if (x346 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].geometry.type', x346);",
                            "    }",
                            "    const x347 = getValueByPath(responseJson, 'features[21].geometry.coordinates[0][0][0]');",
                            "    if (x347 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].geometry.coordinates[0][0][0]', x347);",
                            "    }",
                            "    const x348 = getValueByPath(responseJson, 'features[21].geometry.coordinates[0][0][1]');",
                            "    if (x348 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].geometry.coordinates[0][0][1]', x348);",
                            "    }",
                            "    const x349 = getValueByPath(responseJson, 'features[21].geometry.coordinates[0][1][0]');",
                            "    if (x349 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].geometry.coordinates[0][1][0]', x349);",
                            "    }",
                            "    const x350 = getValueByPath(responseJson, 'features[21].geometry.coordinates[0][1][1]');",
                            "    if (x350 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].geometry.coordinates[0][1][1]', x350);",
                            "    }",
                            "    const x351 = getValueByPath(responseJson, 'features[21].geometry.coordinates[0][2][0]');",
                            "    if (x351 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].geometry.coordinates[0][2][0]', x351);",
                            "    }",
                            "    const x352 = getValueByPath(responseJson, 'features[21].geometry.coordinates[0][2][1]');",
                            "    if (x352 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].geometry.coordinates[0][2][1]', x352);",
                            "    }",
                            "    const x353 = getValueByPath(responseJson, 'features[21].geometry.coordinates[0][3][0]');",
                            "    if (x353 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].geometry.coordinates[0][3][0]', x353);",
                            "    }",
                            "    const x354 = getValueByPath(responseJson, 'features[21].geometry.coordinates[0][3][1]');",
                            "    if (x354 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].geometry.coordinates[0][3][1]', x354);",
                            "    }",
                            "    const x355 = getValueByPath(responseJson, 'features[21].geometry.coordinates[0][4][0]');",
                            "    if (x355 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].geometry.coordinates[0][4][0]', x355);",
                            "    }",
                            "    const x356 = getValueByPath(responseJson, 'features[21].geometry.coordinates[0][4][1]');",
                            "    if (x356 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].geometry.coordinates[0][4][1]', x356);",
                            "    }",
                            "    const x357 = getValueByPath(responseJson, 'features[21].id');",
                            "    if (x357 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[21].id', x357);",
                            "    }",
                            "    const x358 = getValueByPath(responseJson, 'features[22].type');",
                            "    if (x358 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].type', x358);",
                            "    }",
                            "    const x359 = getValueByPath(responseJson, 'features[22].properties.groupByBoundaryId');",
                            "    if (x359 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].properties.groupByBoundaryId', x359);",
                            "    }",
                            "    const x360 = getValueByPath(responseJson, 'features[22].properties.value');",
                            "    if (x360 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].properties.value', x360);",
                            "    }",
                            "    const x361 = getValueByPath(responseJson, 'features[22].properties.timestamp');",
                            "    if (x361 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].properties.timestamp', x361);",
                            "    }",
                            "    const x362 = getValueByPath(responseJson, 'features[22].geometry.type');",
                            "    if (x362 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].geometry.type', x362);",
                            "    }",
                            "    const x363 = getValueByPath(responseJson, 'features[22].geometry.coordinates[0][0][0]');",
                            "    if (x363 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].geometry.coordinates[0][0][0]', x363);",
                            "    }",
                            "    const x364 = getValueByPath(responseJson, 'features[22].geometry.coordinates[0][0][1]');",
                            "    if (x364 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].geometry.coordinates[0][0][1]', x364);",
                            "    }",
                            "    const x365 = getValueByPath(responseJson, 'features[22].geometry.coordinates[0][1][0]');",
                            "    if (x365 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].geometry.coordinates[0][1][0]', x365);",
                            "    }",
                            "    const x366 = getValueByPath(responseJson, 'features[22].geometry.coordinates[0][1][1]');",
                            "    if (x366 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].geometry.coordinates[0][1][1]', x366);",
                            "    }",
                            "    const x367 = getValueByPath(responseJson, 'features[22].geometry.coordinates[0][2][0]');",
                            "    if (x367 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].geometry.coordinates[0][2][0]', x367);",
                            "    }",
                            "    const x368 = getValueByPath(responseJson, 'features[22].geometry.coordinates[0][2][1]');",
                            "    if (x368 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].geometry.coordinates[0][2][1]', x368);",
                            "    }",
                            "    const x369 = getValueByPath(responseJson, 'features[22].geometry.coordinates[0][3][0]');",
                            "    if (x369 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].geometry.coordinates[0][3][0]', x369);",
                            "    }",
                            "    const x370 = getValueByPath(responseJson, 'features[22].geometry.coordinates[0][3][1]');",
                            "    if (x370 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].geometry.coordinates[0][3][1]', x370);",
                            "    }",
                            "    const x371 = getValueByPath(responseJson, 'features[22].geometry.coordinates[0][4][0]');",
                            "    if (x371 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].geometry.coordinates[0][4][0]', x371);",
                            "    }",
                            "    const x372 = getValueByPath(responseJson, 'features[22].geometry.coordinates[0][4][1]');",
                            "    if (x372 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].geometry.coordinates[0][4][1]', x372);",
                            "    }",
                            "    const x373 = getValueByPath(responseJson, 'features[22].id');",
                            "    if (x373 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[22].id', x373);",
                            "    }",
                            "    const x374 = getValueByPath(responseJson, 'features[23].type');",
                            "    if (x374 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].type', x374);",
                            "    }",
                            "    const x375 = getValueByPath(responseJson, 'features[23].properties.groupByBoundaryId');",
                            "    if (x375 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].properties.groupByBoundaryId', x375);",
                            "    }",
                            "    const x376 = getValueByPath(responseJson, 'features[23].properties.value');",
                            "    if (x376 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].properties.value', x376);",
                            "    }",
                            "    const x377 = getValueByPath(responseJson, 'features[23].properties.timestamp');",
                            "    if (x377 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].properties.timestamp', x377);",
                            "    }",
                            "    const x378 = getValueByPath(responseJson, 'features[23].geometry.type');",
                            "    if (x378 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].geometry.type', x378);",
                            "    }",
                            "    const x379 = getValueByPath(responseJson, 'features[23].geometry.coordinates[0][0][0]');",
                            "    if (x379 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].geometry.coordinates[0][0][0]', x379);",
                            "    }",
                            "    const x380 = getValueByPath(responseJson, 'features[23].geometry.coordinates[0][0][1]');",
                            "    if (x380 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].geometry.coordinates[0][0][1]', x380);",
                            "    }",
                            "    const x381 = getValueByPath(responseJson, 'features[23].geometry.coordinates[0][1][0]');",
                            "    if (x381 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].geometry.coordinates[0][1][0]', x381);",
                            "    }",
                            "    const x382 = getValueByPath(responseJson, 'features[23].geometry.coordinates[0][1][1]');",
                            "    if (x382 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].geometry.coordinates[0][1][1]', x382);",
                            "    }",
                            "    const x383 = getValueByPath(responseJson, 'features[23].geometry.coordinates[0][2][0]');",
                            "    if (x383 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].geometry.coordinates[0][2][0]', x383);",
                            "    }",
                            "    const x384 = getValueByPath(responseJson, 'features[23].geometry.coordinates[0][2][1]');",
                            "    if (x384 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].geometry.coordinates[0][2][1]', x384);",
                            "    }",
                            "    const x385 = getValueByPath(responseJson, 'features[23].geometry.coordinates[0][3][0]');",
                            "    if (x385 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].geometry.coordinates[0][3][0]', x385);",
                            "    }",
                            "    const x386 = getValueByPath(responseJson, 'features[23].geometry.coordinates[0][3][1]');",
                            "    if (x386 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].geometry.coordinates[0][3][1]', x386);",
                            "    }",
                            "    const x387 = getValueByPath(responseJson, 'features[23].geometry.coordinates[0][4][0]');",
                            "    if (x387 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].geometry.coordinates[0][4][0]', x387);",
                            "    }",
                            "    const x388 = getValueByPath(responseJson, 'features[23].geometry.coordinates[0][4][1]');",
                            "    if (x388 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].geometry.coordinates[0][4][1]', x388);",
                            "    }",
                            "    const x389 = getValueByPath(responseJson, 'features[23].id');",
                            "    if (x389 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[23].id', x389);",
                            "    }",
                            "    const x390 = getValueByPath(responseJson, 'features[24].type');",
                            "    if (x390 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].type', x390);",
                            "    }",
                            "    const x391 = getValueByPath(responseJson, 'features[24].properties.groupByBoundaryId');",
                            "    if (x391 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].properties.groupByBoundaryId', x391);",
                            "    }",
                            "    const x392 = getValueByPath(responseJson, 'features[24].properties.value');",
                            "    if (x392 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].properties.value', x392);",
                            "    }",
                            "    const x393 = getValueByPath(responseJson, 'features[24].properties.timestamp');",
                            "    if (x393 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].properties.timestamp', x393);",
                            "    }",
                            "    const x394 = getValueByPath(responseJson, 'features[24].geometry.type');",
                            "    if (x394 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].geometry.type', x394);",
                            "    }",
                            "    const x395 = getValueByPath(responseJson, 'features[24].geometry.coordinates[0][0][0]');",
                            "    if (x395 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].geometry.coordinates[0][0][0]', x395);",
                            "    }",
                            "    const x396 = getValueByPath(responseJson, 'features[24].geometry.coordinates[0][0][1]');",
                            "    if (x396 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].geometry.coordinates[0][0][1]', x396);",
                            "    }",
                            "    const x397 = getValueByPath(responseJson, 'features[24].geometry.coordinates[0][1][0]');",
                            "    if (x397 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].geometry.coordinates[0][1][0]', x397);",
                            "    }",
                            "    const x398 = getValueByPath(responseJson, 'features[24].geometry.coordinates[0][1][1]');",
                            "    if (x398 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].geometry.coordinates[0][1][1]', x398);",
                            "    }",
                            "    const x399 = getValueByPath(responseJson, 'features[24].geometry.coordinates[0][2][0]');",
                            "    if (x399 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].geometry.coordinates[0][2][0]', x399);",
                            "    }",
                            "    const x400 = getValueByPath(responseJson, 'features[24].geometry.coordinates[0][2][1]');",
                            "    if (x400 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].geometry.coordinates[0][2][1]', x400);",
                            "    }",
                            "    const x401 = getValueByPath(responseJson, 'features[24].geometry.coordinates[0][3][0]');",
                            "    if (x401 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].geometry.coordinates[0][3][0]', x401);",
                            "    }",
                            "    const x402 = getValueByPath(responseJson, 'features[24].geometry.coordinates[0][3][1]');",
                            "    if (x402 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].geometry.coordinates[0][3][1]', x402);",
                            "    }",
                            "    const x403 = getValueByPath(responseJson, 'features[24].geometry.coordinates[0][4][0]');",
                            "    if (x403 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].geometry.coordinates[0][4][0]', x403);",
                            "    }",
                            "    const x404 = getValueByPath(responseJson, 'features[24].geometry.coordinates[0][4][1]');",
                            "    if (x404 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].geometry.coordinates[0][4][1]', x404);",
                            "    }",
                            "    const x405 = getValueByPath(responseJson, 'features[24].id');",
                            "    if (x405 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[24].id', x405);",
                            "    }",
                            "    const x406 = getValueByPath(responseJson, 'features[25].type');",
                            "    if (x406 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].type', x406);",
                            "    }",
                            "    const x407 = getValueByPath(responseJson, 'features[25].properties.groupByBoundaryId');",
                            "    if (x407 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].properties.groupByBoundaryId', x407);",
                            "    }",
                            "    const x408 = getValueByPath(responseJson, 'features[25].properties.value');",
                            "    if (x408 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].properties.value', x408);",
                            "    }",
                            "    const x409 = getValueByPath(responseJson, 'features[25].properties.timestamp');",
                            "    if (x409 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].properties.timestamp', x409);",
                            "    }",
                            "    const x410 = getValueByPath(responseJson, 'features[25].geometry.type');",
                            "    if (x410 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].geometry.type', x410);",
                            "    }",
                            "    const x411 = getValueByPath(responseJson, 'features[25].geometry.coordinates[0][0][0]');",
                            "    if (x411 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].geometry.coordinates[0][0][0]', x411);",
                            "    }",
                            "    const x412 = getValueByPath(responseJson, 'features[25].geometry.coordinates[0][0][1]');",
                            "    if (x412 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].geometry.coordinates[0][0][1]', x412);",
                            "    }",
                            "    const x413 = getValueByPath(responseJson, 'features[25].geometry.coordinates[0][1][0]');",
                            "    if (x413 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].geometry.coordinates[0][1][0]', x413);",
                            "    }",
                            "    const x414 = getValueByPath(responseJson, 'features[25].geometry.coordinates[0][1][1]');",
                            "    if (x414 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].geometry.coordinates[0][1][1]', x414);",
                            "    }",
                            "    const x415 = getValueByPath(responseJson, 'features[25].geometry.coordinates[0][2][0]');",
                            "    if (x415 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].geometry.coordinates[0][2][0]', x415);",
                            "    }",
                            "    const x416 = getValueByPath(responseJson, 'features[25].geometry.coordinates[0][2][1]');",
                            "    if (x416 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].geometry.coordinates[0][2][1]', x416);",
                            "    }",
                            "    const x417 = getValueByPath(responseJson, 'features[25].geometry.coordinates[0][3][0]');",
                            "    if (x417 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].geometry.coordinates[0][3][0]', x417);",
                            "    }",
                            "    const x418 = getValueByPath(responseJson, 'features[25].geometry.coordinates[0][3][1]');",
                            "    if (x418 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].geometry.coordinates[0][3][1]', x418);",
                            "    }",
                            "    const x419 = getValueByPath(responseJson, 'features[25].geometry.coordinates[0][4][0]');",
                            "    if (x419 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].geometry.coordinates[0][4][0]', x419);",
                            "    }",
                            "    const x420 = getValueByPath(responseJson, 'features[25].geometry.coordinates[0][4][1]');",
                            "    if (x420 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].geometry.coordinates[0][4][1]', x420);",
                            "    }",
                            "    const x421 = getValueByPath(responseJson, 'features[25].id');",
                            "    if (x421 !== undefined) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.body.features[25].id', x421);",
                            "    }",
                            "",
                            "    // Store response headers",
                            "    pm.response.headers.each(function(header) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.headers.', header.value);",
                            "    });",
                            "",
                            "    // Store response cookies",
                            "    pm.response.cookies.each(function(cookie) {",
                            "        pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.cookies.', cookie.value);",
                            "    });",
                            "",
                            "    // Store status code",
                            "    pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.response.status_code', pm.response.code);",
                            "} catch (error) {",
                            "    console.error('Failed to process response:', error.message);",
                            "}"
                        ]
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.request.headers.Content-Type', 'application/x-www-form-urlencoded');",
                            "pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.request.body.bboxes', '8.67,49.39,8.71,49.42|8.68,49.40,8.72,49.43');",
                            "pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.request.body.filter', 'type:way and natural=forest');",
                            "pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.request.body.format', 'geojson');",
                            "pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.request.body.showMetadata', 'true');",
                            "pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.request.body.time', '2015-01-01/2016-01-01/P1M');",
                            "pm.collectionVariables.set('perimeterDensityGroupByBoundary_1.request.body.timeout', '30');"
                        ]
                    }
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    "pm.environment.set('baseUrl', 'https://api.ohsome.org/v1');"
                ]
            }
        }
    ]
}